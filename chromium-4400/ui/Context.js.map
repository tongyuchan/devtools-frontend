{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../../../../front_end/ui/Context.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Root from '../root/root.js';  // eslint-disable-line no-unused-vars\n\nimport {ContextFlavorListener} from './ContextFlavorListener.js';\n\n/** @type {!Context} */\nlet contextInstance;\n\n/** @typedef {(function(new:Object, ...*):void|function(new:Object, ...?):void)} */\nlet ConstructorFn;  // eslint-disable-line no-unused-vars\n\nexport class Context {\n  /**\n   * @private\n   */\n  constructor() {\n    /** @type {!Map<!ConstructorFn, !Object>} */\n    this._flavors = new Map();\n    /** @type {!Map<!ConstructorFn, !Common.ObjectWrapper.ObjectWrapper>} */\n    this._eventDispatchers = new Map();\n  }\n\n  /**\n   * @param {{forceNew: ?boolean}} opts\n   */\n  static instance(opts = {forceNew: null}) {\n    const {forceNew} = opts;\n    if (!contextInstance || forceNew) {\n      contextInstance = new Context();\n    }\n\n    return contextInstance;\n  }\n\n  /**\n   * @param {(function(new:T, ...*):void|function(new:T, ...?):void)} flavorType\n   * @param {?T} flavorValue\n   * @template T\n   */\n  setFlavor(flavorType, flavorValue) {\n    const value = this._flavors.get(flavorType) || null;\n    if (value === flavorValue) {\n      return;\n    }\n    if (flavorValue) {\n      this._flavors.set(flavorType, flavorValue);\n    } else {\n      this._flavors.delete(flavorType);\n    }\n\n    this._dispatchFlavorChange(flavorType, flavorValue);\n  }\n\n  /**\n   * @param {(function(new:T, ...*):void|function(new:T, ...?):void)} flavorType\n   * @param {?T} flavorValue\n   * @template T\n   */\n  _dispatchFlavorChange(flavorType, flavorValue) {\n    for (const extension of Root.Runtime.Runtime.instance().extensions(ContextFlavorListener)) {\n      if (extension.hasContextType(flavorType)) {\n        extension.instance().then(\n            instance => /** @type {!ContextFlavorListener} */ (instance).flavorChanged(flavorValue));\n      }\n    }\n    const dispatcher = this._eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.dispatchEventToListeners(Events.FlavorChanged, flavorValue);\n  }\n\n  /**\n   * @param {!ConstructorFn} flavorType\n   * @param {function(!Common.EventTarget.EventTargetEvent):void} listener\n   * @param {!Object=} thisObject\n   */\n  addFlavorChangeListener(flavorType, listener, thisObject) {\n    let dispatcher = this._eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      dispatcher = new Common.ObjectWrapper.ObjectWrapper();\n      this._eventDispatchers.set(flavorType, dispatcher);\n    }\n    dispatcher.addEventListener(Events.FlavorChanged, listener, thisObject);\n  }\n\n  /**\n   * @param {!ConstructorFn} flavorType\n   * @param {function(!Common.EventTarget.EventTargetEvent):void} listener\n   * @param {!Object=} thisObject\n   */\n  removeFlavorChangeListener(flavorType, listener, thisObject) {\n    const dispatcher = this._eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.removeEventListener(Events.FlavorChanged, listener, thisObject);\n    if (!dispatcher.hasEventListeners(Events.FlavorChanged)) {\n      this._eventDispatchers.delete(flavorType);\n    }\n  }\n\n  /**\n   * @param {(function(new:T, ...*):void|function(new:T, ...?):void)} flavorType\n   * @return {?T}\n   * @template T\n   */\n  flavor(flavorType) {\n    return /** @type {?T} */ (this._flavors.get(flavorType)) || null;\n  }\n\n  /**\n   * @return {!Set.<(function(new:Object, ...*):void|function(new:Object, ...?):void)>}\n   */\n  flavors() {\n    return new Set(this._flavors.keys());\n  }\n\n  /**\n   * @param {!Array.<!Root.Runtime.Extension>} extensions\n   * @return {!Set.<!Root.Runtime.Extension>}\n   */\n  applicableExtensions(extensions) {\n    const targetExtensionSet = new Set();\n\n    const availableFlavors = this.flavors();\n    for (const extension of extensions) {\n      if (Root.Runtime.Runtime.instance().isExtensionApplicableToContextTypes(extension, availableFlavors)) {\n        targetExtensionSet.add(extension);\n      }\n    }\n\n    return targetExtensionSet;\n  }\n}\n\n/** @enum {symbol} */\nconst Events = {\n  FlavorChanged: Symbol('FlavorChanged')\n};\n"]}