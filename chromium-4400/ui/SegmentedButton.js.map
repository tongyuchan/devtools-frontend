{"version":3,"file":"SegmentedButton.js","sourceRoot":"","sources":["../../../../../front_end/ui/SegmentedButton.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,EAAC,IAAI,EAAC,MAAM,aAAa,CAAC;AAEjC,MAAM,OAAO,eAAgB,SAAQ,IAAI;IACvC;QACE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,qCAAqC;QACrC,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAE1B,sBAAsB;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,EAAC,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;QACjF,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO;QAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC;QACrF,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK;QACV,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE;YAC5B,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACzC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,EAAE,GAAG,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC;SACtF;IACH,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Tooltip} from './Tooltip.js';\nimport {HBox} from './Widget.js';\n\nexport class SegmentedButton extends HBox {\n  constructor() {\n    super(true);\n    /** @type {!Map<string, !Element>} */\n    this._buttons = new Map();\n\n    /** @type {?string} */\n    this._selected = null;\n    this.registerRequiredCSS('ui/segmentedButton.css', {enableLegacyPatching: true});\n    this.contentElement.classList.add('segmented-button');\n  }\n\n  /**\n   * @param {string} label\n   * @param {string} value\n   * @param {string=} tooltip\n   */\n  addSegment(label, value, tooltip) {\n    const button = this.contentElement.createChild('button', 'segmented-button-segment');\n    button.textContent = label;\n    if (tooltip) {\n      Tooltip.install(button, tooltip);\n    }\n    this._buttons.set(value, button);\n    button.addEventListener('click', () => this.select(value));\n  }\n\n  /**\n   * @param {string} value\n   */\n  select(value) {\n    if (this._selected === value) {\n      return;\n    }\n    this._selected = value;\n    for (const [key, button] of this._buttons) {\n      button.classList.toggle('segmented-button-segment-selected', key === this._selected);\n    }\n  }\n\n  /**\n   * @return {?string}\n   */\n  selected() {\n    return this._selected;\n  }\n}\n"]}