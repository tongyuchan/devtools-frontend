{"version":3,"file":"FilterSuggestionBuilder.js","sourceRoot":"","sources":["../../../../../front_end/ui/FilterSuggestionBuilder.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nimport {Suggestion, Suggestions} from './SuggestBox.js';  // eslint-disable-line no-unused-vars\n\nexport class FilterSuggestionBuilder {\n  /**\n   * @param {!Array<string>} keys\n   * @param {function(string, !Array<string>):void=} valueSorter\n   */\n  constructor(keys, valueSorter) {\n    this._keys = keys;\n    this._valueSorter = valueSorter || ((key, result) => result.sort());\n    /** @type {!Map<string, !Set<string>>} */\n    this._valuesMap = new Map();\n  }\n\n  /**\n   * @param {string} expression\n   * @param {string} prefix\n   * @param {boolean=} force\n   * @return {!Promise<!Suggestions>}\n   */\n  completions(expression, prefix, force) {\n    if (!prefix && !force) {\n      return Promise.resolve([]);\n    }\n\n    const negative = prefix.startsWith('-');\n    if (negative) {\n      prefix = prefix.substring(1);\n    }\n    const modifier = negative ? '-' : '';\n    const valueDelimiterIndex = prefix.indexOf(':');\n\n    /** @type {!Suggestions} */\n    const suggestions = [];\n    if (valueDelimiterIndex === -1) {\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(prefix), 'i');\n      for (const key of this._keys) {\n        if (matcher.test(key)) {\n          suggestions.push(/** @type {!Suggestion} */ ({text: modifier + key + ':'}));\n        }\n      }\n    } else {\n      const key = prefix.substring(0, valueDelimiterIndex).toLowerCase();\n      const value = prefix.substring(valueDelimiterIndex + 1);\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(value), 'i');\n      const values = Array.from(this._valuesMap.get(key) || new Set());\n      this._valueSorter(key, values);\n      for (const item of values) {\n        if (matcher.test(item) && (item !== value)) {\n          suggestions.push(/** @type {!Suggestion} */ ({text: modifier + key + ':' + item}));\n        }\n      }\n    }\n    return Promise.resolve(suggestions);\n  }\n\n  /**\n   * @param {string} key\n   * @param {?string=} value\n   */\n  addItem(key, value) {\n    if (!value) {\n      return;\n    }\n\n    let set = this._valuesMap.get(key);\n    if (!set) {\n      set = /** @type {!Set<string>} */ (new Set());\n      this._valuesMap.set(key, set);\n    }\n    set.add(value);\n  }\n\n  clear() {\n    this._valuesMap.clear();\n  }\n}\n"]}