{"version":3,"file":"TextEditor.js","sourceRoot":"","sources":["../../../../../front_end/ui/TextEditor.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAO9C;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAC5B;;;OAGG;IACH,YAAY,CAAC,OAAO;QAClB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,UAAW,SAAQ,MAAM,CAAC,WAAW,CAAC,WAAW;IAC5D;;OAEG;IACH,MAAM;QACJ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,SAAS;QACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,SAAS;QACP,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAS;IACtB,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,yBAAyB;QACvB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAI;IACZ,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,UAAU;QACb,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,gBAAgB;IAChB,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,OAAO;IACzB,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,MAAM;IAC5B,CAAC;IAED,iBAAiB;IACjB,CAAC;IAED;;;;OAIG;IACH,iBAAiB,CAAC,UAAU,EAAE,YAAY;QACxC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,UAAU,EAAE,YAAY;QAC1C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,WAAW,IAAG,CAAC;CAC/B;AAED,qBAAqB;AACrB,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,aAAa,EAAE,MAAM,CAAC,eAAe,CAAC;IACtC,WAAW,EAAE,MAAM,CAAC,aAAa,CAAC;IAClC,iBAAiB,EAAE,MAAM,CAAC,mBAAmB,CAAC;CAC/C,CAAC;AAEF;;;;;;;;;;;;;;IAcI;AACJ,qBAAqB;AACrB,MAAM,CAAC,IAAI,OAAO,CAAC;AAEnB;;;;;;;;IAQI;AACJ,qBAAqB;AACrB,MAAM,CAAC,IAAI,kBAAkB,CAAC","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as TextUtils from '../text_utils/text_utils.js';  // eslint-disable-line no-unused-vars\n\nimport {AnchorBehavior} from './GlassPane.js';  // eslint-disable-line no-unused-vars\nimport {Suggestions} from './SuggestBox.js';    // eslint-disable-line no-unused-vars\nimport {Widget} from './Widget.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @interface\n */\nexport class TextEditorFactory {\n  /**\n   * @param {!Options} options\n   * @return {!TextEditor}\n   */\n  createEditor(options) {\n    throw new Error('not implemented');\n  }\n}\n\n/**\n * @interface\n */\nexport class TextEditor extends Common.EventTarget.EventTarget {\n  /**\n   * @return {!Widget}\n   */\n  widget() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!TextUtils.TextRange.TextRange}\n   */\n  fullRange() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!TextUtils.TextRange.TextRange}\n   */\n  selection() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @param {!TextUtils.TextRange.TextRange} selection\n   */\n  setSelection(selection) {\n  }\n\n  /**\n   * @param {!TextUtils.TextRange.TextRange=} textRange\n   * @return {string}\n   */\n  text(textRange) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {string}\n   */\n  textWithCurrentSuggestion() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @param {string} text\n   */\n  setText(text) {\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @return {string}\n   */\n  line(lineNumber) {\n    throw new Error('not implemented');\n  }\n\n  newlineAndIndent() {\n  }\n\n  /**\n   * @param {function(!KeyboardEvent):void} handler\n   */\n  addKeyDownHandler(handler) {\n  }\n\n  /**\n   * @param {?AutocompleteConfig} config\n   */\n  configureAutocomplete(config) {\n  }\n\n  clearAutocomplete() {\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @param {number} columnNumber\n   * @return {!{x: number, y: number}}\n   */\n  visualCoordinates(lineNumber, columnNumber) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @param {number} columnNumber\n   * @return {?{startColumn: number, endColumn: number, type: string}}\n   */\n  tokenAtTextPosition(lineNumber, columnNumber) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @param {string} placeholder\n   */\n  setPlaceholder(placeholder) {}\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  CursorChanged: Symbol('CursorChanged'),\n  TextChanged: Symbol('TextChanged'),\n  SuggestionChanged: Symbol('SuggestionChanged')\n};\n\n/**\n * @typedef {{\n  *  bracketMatchingSetting: (!Common.Settings.Setting<*>|undefined),\n  *  devtoolsAccessibleName: (string|undefined),\n  *  lineNumbers: boolean,\n  *  lineWrapping: boolean,\n  *  mimeType: (string|undefined),\n  *  autoHeight: (boolean|undefined),\n  *  padBottom: (boolean|undefined),\n  *  maxHighlightLength: (number|undefined),\n  *  placeholder: (string|undefined),\n  *  lineWiseCopyCut: (boolean|undefined),\n  *  inputStyle: (string|undefined),\n  * }}\n  */\n// @ts-ignore typedef\nexport let Options;\n\n/**\n  * @typedef {{\n  *     substituteRangeCallback: ((function(number, number):?TextUtils.TextRange.TextRange)|undefined),\n  *     tooltipCallback: ((function(number, number):!Promise<?Element>)|undefined),\n  *     suggestionsCallback: ((function(!TextUtils.TextRange.TextRange, !TextUtils.TextRange.TextRange, boolean=):?Promise.<!Suggestions>)|undefined),\n  *     isWordChar: ((function(string):boolean)|undefined),\n  *     anchorBehavior: (AnchorBehavior|undefined)\n  * }}\n  */\n// @ts-ignore typedef\nexport let AutocompleteConfig;\n"]}