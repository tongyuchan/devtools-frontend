{"version":3,"file":"SyntaxHighlighter.js","sourceRoot":"","sources":["../../../../../front_end/ui/SyntaxHighlighter.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2010 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Root from '../root/root.js';  // eslint-disable-line no-unused-vars\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {createTextChild} from './UIUtils.js';\n\nexport class SyntaxHighlighter {\n  /**\n   * @param {string} mimeType\n   * @param {boolean} stripExtraWhitespace\n   */\n  constructor(mimeType, stripExtraWhitespace) {\n    this._mimeType = mimeType;\n    this._stripExtraWhitespace = stripExtraWhitespace;\n  }\n\n  /**\n   * @param {string} content\n   * @param {string} className\n   * @return {!Element}\n   */\n  createSpan(content, className) {\n    const span = document.createElement('span');\n    span.className = className.replace(/\\S+/g, 'cm-$&');\n    if (this._stripExtraWhitespace && className !== 'whitespace') {\n      content = content.replace(/^[\\n\\r]*/, '').replace(/\\s*$/, '');\n    }\n    createTextChild(span, content);\n    return span;\n  }\n\n  /**\n   * @param {!Element} node\n   * @return {!Promise.<void>}\n   */\n  syntaxHighlightNode(node) {\n    const lines = node.textContent ? node.textContent.split('\\n') : [];\n    /** @type {number} */\n    let plainTextStart;\n    /** @type {string} */\n    let line;\n\n    const extension = Root.Runtime.Runtime.instance().extension(TextUtils.TextUtils.TokenizerFactory);\n    if (extension) {\n      return extension.instance().then(\n          factory => processTokens.call(this, /** @type {!TextUtils.TextUtils.TokenizerFactory} */ (factory)));\n    }\n    return Promise.resolve();\n\n    /**\n     * @param {!TextUtils.TextUtils.TokenizerFactory} tokenizerFactory\n     * @this {SyntaxHighlighter}\n     */\n    function processTokens(tokenizerFactory) {\n      node.removeChildren();\n      const tokenize = tokenizerFactory.createTokenizer(this._mimeType);\n      for (let i = 0; i < lines.length; ++i) {\n        line = lines[i];\n        plainTextStart = 0;\n        tokenize(line, processToken.bind(this));\n        if (plainTextStart < line.length) {\n          const plainText = line.substring(plainTextStart, line.length);\n          createTextChild(node, plainText);\n        }\n        if (i < lines.length - 1) {\n          createTextChild(node, '\\n');\n        }\n      }\n    }\n\n    /**\n     * @param {string} token\n     * @param {?string} tokenType\n     * @param {number} column\n     * @param {number} newColumn\n     * @this {SyntaxHighlighter}\n     */\n    function processToken(token, tokenType, column, newColumn) {\n      if (!tokenType) {\n        return;\n      }\n\n      if (column > plainTextStart) {\n        const plainText = line.substring(plainTextStart, column);\n        createTextChild(node, plainText);\n      }\n      node.appendChild(this.createSpan(token, tokenType));\n      plainTextStart = newColumn;\n    }\n  }\n}\n"]}