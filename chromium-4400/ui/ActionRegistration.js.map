{"version":3,"file":"ActionRegistration.js","sourceRoot":"","sources":["../../../../../front_end/ui/ActionRegistration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\nimport {ls} from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {Context} from './Context.js';\n\nclass ActionRuntimeExtensionDescriptor extends Root.Runtime.RuntimeExtensionDescriptor {\n  iconClass?: string;\n  toggledIconClass?: string;\n  toggleWithRedColor?: boolean;\n  toggleable?: boolean;\n\n  constructor() {\n    super();\n  }\n}\n\nexport interface Action extends Common.EventTarget.EventTarget {\n  id(): string;\n\n  execute(): Promise<boolean>;\n\n  icon(): string|undefined;\n\n  toggledIcon(): string|undefined;\n\n  toggleWithRedColor(): boolean;\n\n  setEnabled(_enabled: boolean): void;\n\n  enabled(): boolean;\n\n  category(): string;\n\n  tags(): string|void;\n\n  toggleable(): boolean;\n\n  title(): string;\n\n  toggled(): boolean;\n\n  setToggled(_toggled: boolean): void\n}\n\nexport class LegacyActionRegistration extends Common.ObjectWrapper.ObjectWrapper implements Action {\n  _extension: Root.Runtime.Extension;\n  _enabled: boolean;\n  _toggled: boolean;\n\n  constructor(extension: Root.Runtime.Extension) {\n    super();\n    this._extension = extension;\n    this._enabled = true;\n    this._toggled = false;\n  }\n\n  id(): string {\n    return this.actionDescriptor().actionId || '';\n  }\n\n  extension(): Root.Runtime.Extension {\n    return this._extension;\n  }\n\n  async execute(): Promise<boolean> {\n    if (!this._extension.canInstantiate()) {\n      return false;\n    }\n    const delegate = await this._extension.instance() as ActionDelegate;\n    const actionId = this.id();\n    return delegate.handleAction(Context.instance(), actionId);\n  }\n\n  icon(): string {\n    return this.actionDescriptor().iconClass || '';\n  }\n\n  toggledIcon(): string {\n    return this.actionDescriptor().toggledIconClass || '';\n  }\n\n  toggleWithRedColor(): boolean {\n    return Boolean(this.actionDescriptor().toggleWithRedColor);\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this._enabled === enabled) {\n      return;\n    }\n\n    this._enabled = enabled;\n    this.dispatchEventToListeners(Events.Enabled, enabled);\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  category(): string {\n    return ls`${this.actionDescriptor().category || ''}`;\n  }\n\n  tags(): string {\n    const keys = this.actionDescriptor().tags || '';\n    // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n    const keyList = keys.split(',');\n    let key = '';\n    keyList.forEach(k => {\n      key += (ls(k.trim()) + '\\0');\n    });\n    return key;\n  }\n\n  toggleable(): boolean {\n    return Boolean(this.actionDescriptor().toggleable);\n  }\n\n  title(): string {\n    let title = this._extension.title() || '';\n    const options = this.actionDescriptor().options;\n    if (options) {\n      for (const pair of options) {\n        if (pair.value !== this._toggled) {\n          title = ls`${pair.title}`;\n        }\n      }\n    }\n    return title;\n  }\n\n  toggled(): boolean {\n    return this._toggled;\n  }\n\n  setToggled(toggled: boolean): void {\n    console.assert(this.toggleable(), 'Shouldn\\'t be toggling an untoggleable action', this.id());\n    if (this._toggled === toggled) {\n      return;\n    }\n\n    this._toggled = toggled;\n    this.dispatchEventToListeners(Events.Toggled, toggled);\n  }\n\n  private actionDescriptor(): ActionRuntimeExtensionDescriptor {\n    return this._extension.descriptor() as ActionRuntimeExtensionDescriptor;\n  }\n}\n\nexport interface ActionDelegate {\n  handleAction(_context: Context, _actionId: string): boolean;\n}\n\nexport class PreRegisteredAction extends Common.ObjectWrapper.ObjectWrapper implements Action {\n  _enabled = true;\n  _toggled = false;\n  private actionRegistration: ActionRegistration;\n  constructor(actionRegistration: ActionRegistration) {\n    super();\n    this.actionRegistration = actionRegistration;\n  }\n\n  id(): string {\n    return this.actionRegistration.actionId;\n  }\n\n  async execute(): Promise<boolean> {\n    if (!this.actionRegistration.loadActionDelegate) {\n      return false;\n    }\n    const delegate = await this.actionRegistration.loadActionDelegate();\n    const actionId = this.id();\n    return delegate.handleAction(Context.instance(), actionId);\n  }\n\n  icon(): string|undefined {\n    return this.actionRegistration.iconClass;\n  }\n\n  toggledIcon(): string|undefined {\n    return this.actionRegistration.toggledIconClass;\n  }\n\n  toggleWithRedColor(): boolean {\n    return Boolean(this.actionRegistration.toggleWithRedColor);\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this._enabled === enabled) {\n      return;\n    }\n\n    this._enabled = enabled;\n    this.dispatchEventToListeners(Events.Enabled, enabled);\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  category(): string {\n    return this.actionRegistration.category;\n  }\n\n  tags(): string|void {\n    if (this.actionRegistration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.actionRegistration.tags.map(tag => tag()).join('\\0');\n    }\n  }\n\n  toggleable(): boolean {\n    return Boolean(this.actionRegistration.toggleable);\n  }\n\n  title(): string {\n    let title = this.actionRegistration.title ? this.actionRegistration.title() : '';\n    const options = this.actionRegistration.options;\n    if (options) {\n      // Actions with an 'options' property don't have a title field. Instead, the displayed\n      // title is taken from the 'title' property of the option that is not active. Only one of the\n      // two options can be active at a given moment and the 'toggled' property of the action along\n      // with the 'value' of the options are used to determine which one it is.\n\n      for (const pair of options) {\n        if (pair.value !== this._toggled) {\n          title = pair.title();\n        }\n      }\n    }\n    return title;\n  }\n\n  toggled(): boolean {\n    return this._toggled;\n  }\n\n  setToggled(toggled: boolean): void {\n    console.assert(this.toggleable(), 'Shouldn\\'t be toggling an untoggleable action', this.id());\n    if (this._toggled === toggled) {\n      return;\n    }\n\n    this._toggled = toggled;\n    this.dispatchEventToListeners(Events.Toggled, toggled);\n  }\n\n  options(): undefined|Array<ExtensionOption> {\n    return this.actionRegistration.options;\n  }\n\n  contextTypes(): undefined|Array<unknown> {\n    if (this.actionRegistration.contextTypes) {\n      return this.actionRegistration.contextTypes();\n    }\n    return undefined;\n  }\n\n  canInstantiate(): boolean {\n    return Boolean(this.actionRegistration.loadActionDelegate);\n  }\n\n  bindings(): Array<Binding>|undefined {\n    return this.actionRegistration.bindings;\n  }\n\n  experiment(): string|undefined {\n    return this.actionRegistration.experiment;\n  }\n\n  condition(): string|undefined {\n    return this.actionRegistration.condition;\n  }\n}\n\nconst registeredActionExtensions: Array<PreRegisteredAction> = [];\n\nconst actionIdSet = new Set<string>();\n\nexport function registerActionExtension(registration: ActionRegistration): void {\n  const actionId = registration.actionId;\n  if (actionIdSet.has(actionId)) {\n    throw new Error(`Duplicate Action id '${actionId}': ${new Error().stack}`);\n  }\n  actionIdSet.add(actionId);\n  registeredActionExtensions.push(new PreRegisteredAction(registration));\n}\n\nexport function getRegisteredActionExtensions(): Array<PreRegisteredAction> {\n  return registeredActionExtensions.filter(\n      action =>\n          Root.Runtime.Runtime.isDescriptorEnabled({experiment: action.experiment(), condition: action.condition()}));\n}\n\nexport const enum Platforms {\n  All = 'All platforms',\n  Mac = 'mac',\n  WindowsLinux = 'windows,linux',\n  Android = 'Android',\n}\n\nexport const Events = {\n  Enabled: Symbol('Enabled'),\n  Toggled: Symbol('Toggled'),\n};\n\nexport const ActionCategory = {\n  ELEMENTS: ls`Elements`,\n  SCREENSHOT: ls`Screenshot`,\n  NETWORK: ls`Network`,\n  MEMORY: ls`Memory`,\n  JAVASCRIPT_PROFILER: ls`JavaScript Profiler`,\n};\n\ntype ActionCategory = typeof ActionCategory[keyof typeof ActionCategory];\n\nexport const enum IconClass {\n  LARGEICON_NODE_SEARCH = 'largeicon-node-search',\n  LARGEICON_START_RECORDING = 'largeicon-start-recording',\n  LARGEICON_STOP_RECORDING = 'largeicon-stop-recording',\n  LARGEICON_REFRESH = 'largeicon-refresh',\n}\n\nexport const enum KeybindSet {\n  DEVTOOLS_DEFAULT = 'devToolsDefault',\n  VS_CODE = 'vsCode',\n}\n\nexport interface ExtensionOption {\n  value: boolean;\n  title: () => Platform.UIString.LocalizedString;\n  text?: string;\n}\n\nexport interface Binding {\n  platform?: Platforms;\n  shortcut: string;\n  keybindSets?: Array<KeybindSet>;\n}\n\n/**\n * The representation of an action extension to be registered.\n */\nexport interface ActionRegistration {\n  /**\n   * The unique id of an Action extension.\n   */\n  actionId: string;\n  /**\n   * The category with which the action is displayed in the UI.\n   */\n  category: ActionCategory;\n  /**\n   * The title with which the action is displayed in the UI.\n   */\n  title?: () => Platform.UIString.LocalizedString;\n  /**\n   * The type of the icon used to trigger the action.\n   */\n  iconClass?: string;\n  /**\n   * Whether the style of the icon toggles on interaction.\n   */\n  toggledIconClass?: string;\n  /**\n   * Whether the class 'toolbar-toggle-with-red-color' is toggled on the icon on interaction.\n   */\n  toggleWithRedColor?: boolean;\n  /**\n   * Words used to find an action in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * Whether the action is toggleable.\n   */\n  toggleable?: boolean;\n  /**\n   * Loads the class that handles the action when it is triggered. The common pattern for implementing\n   * this function relies on having the module that contains the action’s handler lazily loaded. For example:\n   * ```js\n   *  let loadedElementsModule;\n   *\n   *  async function loadElementsModule() {\n   *\n   *    if (!loadedElementsModule) {\n   *      loadedElementsModule = await import('./elements.js');\n   *    }\n   *    return loadedElementsModule;\n   *  }\n   *  UI.ActionRegistration.registerActionExtension({\n   *   <...>\n   *    async loadActionDelegate() {\n   *      const Elements = await loadElementsModule();\n   *      return Elements.ElementsPanel.ElementsActionDelegate.instance();\n   *    },\n   *   <...>\n   *  });\n   * ```\n   */\n  loadActionDelegate?: () => Promise<ActionDelegate>;\n  /**\n   * Returns the classes that represent the 'context flavors' under which the action is available for triggering.\n   * The context of the application is described in 'flavors' that are usually views added and removed to the context\n   * as the user interacts with the application (e.g when the user moves across views). (See UI.Context)\n   * When the action is supposed to be available globally, that is, it does not depend on the application to have\n   * a specific context, the value of this property should be undefined.\n   *\n   * Because the method is synchronous, context types should be already loaded when the method is invoked.\n   * In the case that an action has context types it depends on, and they haven't been loaded yet, the function should\n   * return an empty array. Once the context types have been loaded, the function should return an array with all types\n   * that it depends on.\n   *\n   * The common pattern for implementing this function is relying on having the module with the corresponding context\n   * types loaded and stored when the related 'view' extension is loaded asynchronously. As an example:\n   *\n   * ```js\n   * let loadedElementsModule;\n   *\n   * async function loadElementsModule() {\n   *\n   *   if (!loadedElementsModule) {\n   *     loadedElementsModule = await import('./elements.js');\n   *   }\n   *   return loadedElementsModule;\n   * }\n   * function maybeRetrieveContextTypes(getClassCallBack: (elementsModule: typeof Elements) => unknown[]): unknown[] {\n   *\n   *   if (loadedElementsModule === undefined) {\n   *     return [];\n   *   }\n   *   return getClassCallBack(loadedElementsModule);\n   * }\n   * UI.ActionRegistration.registerActionExtension({\n   *\n   *   contextTypes() {\n   *     return maybeRetrieveContextTypes(Elements => [Elements.ElementsPanel.ElementsPanel]);\n   *   }\n   *   <...>\n   * });\n   * ```\n   */\n  contextTypes?: () => Array<unknown>;\n  /**\n   * The descriptions for each of the two states in which a toggleable action can be.\n   */\n  options?: Array<ExtensionOption>;\n  /**\n   * The description of the variables (e.g. platform, keys and keybind sets) under which a keyboard shortcut triggers the action.\n   * If a keybind must be available on all platforms, its 'platform' property must be undefined. The same applies to keybind sets\n   * and the keybindSet property.\n   *\n   * Keybinds also depend on the context types of their corresponding action, and so they will only be available when such context types\n   * are flavors of the current appliaction context.\n   */\n  bindings?: Array<Binding>;\n  /**\n   * The name of the experiment an action is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the action respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition represented as a string the action's availability depends on. Conditions come\n   * from the queryParamsObject defined in Runtime and just as the experiment field, they determine the availability\n   * of the setting. A condition can be negated by prepending a ‘!’ to the value of the condition\n   * property and in that case the behaviour of the action's availability will be inverted.\n   */\n  condition?: Root.Runtime.ConditionName;\n}\n"]}