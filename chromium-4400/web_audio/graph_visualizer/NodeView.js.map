{"version":3,"file":"NodeView.js","sourceRoot":"","sources":["../../../../../../front_end/web_audio/graph_visualizer/NodeView.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../../ui/ui.js';\n\nimport {BottomPaddingWithoutParam, BottomPaddingWithParam, LeftMarginOfText, LeftSideTopPadding, NodeCreationData, NodeLabelFontStyle, NodeLayout, ParamLabelFontStyle, Port, PortTypes, RightMarginOfText, TotalInputPortHeight, TotalOutputPortHeight, TotalParamPortHeight} from './GraphStyle.js';  // eslint-disable-line no-unused-vars\nimport {calculateInputPortXY, calculateOutputPortXY, calculateParamPortXY} from './NodeRendererUtility.js';\n\n// A class that represents a node of a graph, consisting of the information needed to layout the\n// node and display the node. Each node has zero or more ports, including input, output, and param ports.\nexport class NodeView {\n  /**\n   * @param {!NodeCreationData} data\n   * @param {string} label\n   */\n  constructor(data, label) {\n    this.id = data.nodeId;\n    this.type = data.nodeType;\n    this.numberOfInputs = data.numberOfInputs;\n    this.numberOfOutputs = data.numberOfOutputs;\n    this.label = label;\n\n    this.size = {width: 0, height: 0};\n    // Position of the center. If null, it means the graph layout has not been computed\n    // and this node should not be rendered. It will be set after layouting.\n    /**\n     * @type {?Object}\n     */\n    this.position = null;\n\n    /** @type {!NodeLayout} */\n    this._layout = {\n      inputPortSectionHeight: 0,\n      outputPortSectionHeight: 0,\n      maxTextLength: 0,\n      totalHeight: 0,\n    };\n    /** @type {!Map<string, !Port>} */\n    this.ports = new Map();\n\n    this._initialize(data);\n  }\n\n  /**\n   * @param {!NodeCreationData} data\n   */\n  _initialize(data) {\n    this._updateNodeLayoutAfterAddingNode(data);\n    this._setupInputPorts();\n    this._setupOutputPorts();\n  }\n\n  /**\n   * Add an AudioParam to this node.\n   * Note for @method removeParamPort: removeParamPort is not necessary because it will only happen\n   * when the parent NodeView is destroyed. So there is no need to remove port individually\n   * when the whole NodeView will be gone.\n   * @param {string} paramId\n   * @param {string} paramType\n   */\n  addParamPort(paramId, paramType) {\n    const paramPorts = this.getPortsByType(PortTypes.Param);\n    const numberOfParams = paramPorts.length;\n\n    const {x, y} = calculateParamPortXY(numberOfParams, this._layout.inputPortSectionHeight);\n    this._addPort({\n      id: generateParamPortId(this.id, paramId),\n      type: PortTypes.Param,\n      label: paramType,\n      x,\n      y,\n    });\n\n    this._updateNodeLayoutAfterAddingParam(numberOfParams + 1, paramType);\n\n    // The position of output ports may be changed if adding a param increases the total height.\n    this._setupOutputPorts();\n  }\n\n  /**\n   * @param {!PortTypes} type\n   * @return {!Array<!Port>}\n   */\n  getPortsByType(type) {\n    /**\n     * @type {!Array<!Port>}\n     */\n    const result = [];\n    this.ports.forEach(port => {\n      if (port.type === type) {\n        result.push(port);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Use number of inputs and outputs to compute the layout\n   * for text and ports.\n   * Credit: This function is mostly borrowed from Audion/\n   *      `audion.entryPoints.handleNodeCreated_()`.\n   *      https://github.com/google/audion/blob/master/js/entry-points/panel.js\n   * @param {!NodeCreationData} data\n   */\n  _updateNodeLayoutAfterAddingNode(data) {\n    // Even if there are no input ports, leave room for the node label.\n    const inputPortSectionHeight = TotalInputPortHeight * Math.max(1, data.numberOfInputs) + LeftSideTopPadding;\n    this._layout.inputPortSectionHeight = inputPortSectionHeight;\n    this._layout.outputPortSectionHeight = TotalOutputPortHeight * data.numberOfOutputs;\n\n    // Use the max of the left and right side heights as the total height.\n    // Include a little padding on the left.\n    this._layout.totalHeight =\n        Math.max(inputPortSectionHeight + BottomPaddingWithoutParam, this._layout.outputPortSectionHeight);\n\n    // Update max length with node label.\n    const nodeLabelLength = measureTextWidth(this.label, NodeLabelFontStyle);\n    this._layout.maxTextLength = Math.max(this._layout.maxTextLength, nodeLabelLength);\n\n    this._updateNodeSize();\n  }\n\n  /**\n   * After adding a param port, update the node layout based on the y value\n   * and label length.\n   * @param {number} numberOfParams\n   * @param {string} paramType\n   */\n  _updateNodeLayoutAfterAddingParam(numberOfParams, paramType) {\n    // The height after adding param ports and input ports.\n    // Include a little padding on the left.\n    const leftSideMaxHeight =\n        this._layout.inputPortSectionHeight + numberOfParams * TotalParamPortHeight + BottomPaddingWithParam;\n\n    // Use the max of the left and right side heights as the total height.\n    this._layout.totalHeight = Math.max(leftSideMaxHeight, this._layout.outputPortSectionHeight);\n\n    // Update max length with param label.\n    const paramLabelLength = measureTextWidth(paramType, ParamLabelFontStyle);\n    this._layout.maxTextLength = Math.max(this._layout.maxTextLength, paramLabelLength);\n\n    this._updateNodeSize();\n  }\n\n  _updateNodeSize() {\n    this.size = {\n      width: Math.ceil(LeftMarginOfText + this._layout.maxTextLength + RightMarginOfText),\n      height: this._layout.totalHeight,\n    };\n  }\n\n  // Setup the properties of each input port.\n  _setupInputPorts() {\n    for (let i = 0; i < this.numberOfInputs; i++) {\n      const {x, y} = calculateInputPortXY(i);\n      this._addPort({id: generateInputPortId(this.id, i), type: PortTypes.In, x, y, label: undefined});\n    }\n  }\n\n  // Setup the properties of each output port.\n  _setupOutputPorts() {\n    for (let i = 0; i < this.numberOfOutputs; i++) {\n      const portId = generateOutputPortId(this.id, i);\n      const {x, y} = calculateOutputPortXY(i, this.size, this.numberOfOutputs);\n      if (this.ports.has(portId)) {\n        // Update y value of an existing output port.\n        const port = this.ports.get(portId);\n        if (!port) {\n          throw new Error(`Unable to find port with id ${portId}`);\n        }\n\n        port.x = x;\n        port.y = y;\n      } else {\n        this._addPort({id: portId, type: PortTypes.Out, x, y, label: undefined});\n      }\n    }\n  }\n\n  /** @param {!Port} port */\n  _addPort(port) {\n    this.ports.set(port.id, port);\n  }\n}\n\n/**\n * Generates the port id for the input of node.\n * @param {string} nodeId\n * @param {number | undefined} inputIndex\n * @return {string}\n */\nexport const generateInputPortId = (nodeId, inputIndex) => {\n  return `${nodeId}-input-${inputIndex || 0}`;\n};\n\n/**\n * Generates the port id for the output of node.\n * @param {string} nodeId\n * @param {number | undefined} outputIndex\n * @return {string}\n */\nexport const generateOutputPortId = (nodeId, outputIndex) => {\n  return `${nodeId}-output-${outputIndex || 0}`;\n};\n\n/**\n * Generates the port id for the param of node.\n * @param {string} nodeId\n * @param {string} paramId\n * @return {string}\n */\nexport const generateParamPortId = (nodeId, paramId) => {\n  return `${nodeId}-param-${paramId}`;\n};\n\n// A label generator to convert UUID of node to shorter label to display.\n// Each graph should have its own generator since the node count starts from 0.\nexport class NodeLabelGenerator {\n  constructor() {\n    this._totalNumberOfNodes = 0;\n  }\n\n  /**\n   * Generates the label for a node of a graph.\n   * @param {string} nodeType\n   * @return {string}\n   */\n  generateLabel(nodeType) {\n    // To make the label concise, remove the suffix \"Node\" from the nodeType.\n    if (nodeType.endsWith('Node')) {\n      nodeType = nodeType.slice(0, nodeType.length - 4);\n    }\n\n    // Also, use an integer to replace the long UUID.\n    this._totalNumberOfNodes += 1;\n    const label = `${nodeType} ${this._totalNumberOfNodes}`;\n    return label;\n  }\n}\n\n/**\n * @type {!CanvasRenderingContext2D}\n */\nlet _contextForFontTextMeasuring;\n\n/**\n * Get the text width using given font style.\n * @param {string} text\n * @param {?string} fontStyle\n * @return {number}\n */\nexport const measureTextWidth = (text, fontStyle) => {\n  if (!_contextForFontTextMeasuring) {\n    const context = document.createElement('canvas').getContext('2d');\n    if (!context) {\n      throw new Error('Unable to create canvas context.');\n    }\n\n    _contextForFontTextMeasuring = context;\n  }\n\n  const context = _contextForFontTextMeasuring;\n  context.save();\n  if (fontStyle) {\n    context.font = fontStyle;\n  }\n\n  const width = UI.UIUtils.measureTextWidth(context, text);\n  context.restore();\n  return width;\n};\n"]}