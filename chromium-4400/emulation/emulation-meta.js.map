{"version":3,"file":"emulation-meta.js","sourceRoot":"","sources":["../../../../../front_end/emulation/emulation-meta.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,EAAE,EAAC,MAAM,yBAAyB,CAAC;AAC3C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAKlC,IAAI,qBAAmD,CAAC;AAExD,KAAK,UAAU,mBAAmB;IAChC,IAAI,CAAC,qBAAqB,EAAE;QAC1B,8CAA8C;QAC9C,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACrE,qBAAqB,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,CAAC;KACxD;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AAED,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,qCAAiD;IACzD,aAAa,EAAE,cAAc;IAC7B,KAAK,EAAE,GAAsC,EAAE,CAAC,EAAE,CAAA,SAAS;IAC3D,KAAK,EAAE,EAAE;IACT,KAAK,CAAC,QAAQ;QACZ,MAAM,SAAS,GAAG,MAAM,mBAAmB,EAAE,CAAC;QAC9C,OAAO,SAAS,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;IACpE,CAAC;IACD,EAAE,EAAE,SAAS;IACb,QAAQ,EAAE;QACR,4BAA4B;QAC5B,0BAA0B;KAC3B;CACF,CAAC,CAAC;AAEH,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,iCAA+C;IACvD,aAAa,EAAE,cAAc;IAC7B,KAAK,EAAE,GAAsC,EAAE,CAAC,EAAE,CAAA,SAAS;IAC3D,EAAE,EAAE,SAAS;IACb,WAAW,6BAA0C;IACrD,KAAK,EAAE,GAAG;IACV,KAAK,CAAC,QAAQ;QACZ,MAAM,SAAS,GAAG,MAAM,mBAAmB,EAAE,CAAC;QAC9C,OAAO,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IACtD,CAAC;IACD,IAAI,EAAE;QACJ,GAAsC,EAAE,CAAC,EAAE,CAAA,aAAa;QACxD,GAAsC,EAAE,CAAC,EAAE,CAAA,WAAW;QACtD,GAAsC,EAAE,CAAC,EAAE,CAAA,QAAQ;QACnD,GAAsC,EAAE,CAAC,EAAE,CAAA,SAAS;QACpD,GAAsC,EAAE,CAAC,EAAE,CAAA,eAAe;QAC1D,GAAsC,EAAE,CAAC,EAAE,CAAA,oBAAoB;KAChE;CACF,CAAC,CAAC;AAEH,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,qCAAiD;IACzD,EAAE,EAAE,qBAAqB;IACzB,aAAa,EAAE,gBAAgB;IAC/B,KAAK,EAAE,GAAsC,EAAE,CAAC,EAAE,CAAA,WAAW;IAC7D,KAAK,EAAE,EAAE;IACT,KAAK,CAAC,QAAQ;QACZ,MAAM,SAAS,GAAG,MAAM,mBAAmB,EAAE,CAAC;QAC9C,OAAO,SAAS,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;IACxE,CAAC;IACD,QAAQ,EAAE;QACR,qBAAqB;KACtB;CACF,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../platform/platform.js';\nimport {ls} from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport * as UI from '../ui/ui.js';\n\n// eslint-disable-next-line rulesdir/es_modules_import\nimport type * as Emulation from './emulation.js';\n\nlet loadedEmulationModule: (typeof Emulation|undefined);\n\nasync function loadEmulationModule(): Promise<typeof Emulation> {\n  if (!loadedEmulationModule) {\n    // Side-effect import resources in module.json\n    await Root.Runtime.Runtime.instance().loadModulePromise('emulation');\n    loadedEmulationModule = await import('./emulation.js');\n  }\n  return loadedEmulationModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  commandPrompt: 'Show Devices',\n  title: (): Platform.UIString.LocalizedString => ls`Devices`,\n  order: 30,\n  async loadView() {\n    const Emulation = await loadEmulationModule();\n    return Emulation.DevicesSettingsTab.DevicesSettingsTab.instance();\n  },\n  id: 'devices',\n  settings: [\n    'standardEmulatedDeviceList',\n    'customEmulatedDeviceList',\n  ],\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  commandPrompt: 'Show Sensors',\n  title: (): Platform.UIString.LocalizedString => ls`Sensors`,\n  id: 'sensors',\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const Emulation = await loadEmulationModule();\n    return Emulation.SensorsView.SensorsView.instance();\n  },\n  tags: [\n    (): Platform.UIString.LocalizedString => ls`geolocation`,\n    (): Platform.UIString.LocalizedString => ls`timezones`,\n    (): Platform.UIString.LocalizedString => ls`locale`,\n    (): Platform.UIString.LocalizedString => ls`locales`,\n    (): Platform.UIString.LocalizedString => ls`accelerometer`,\n    (): Platform.UIString.LocalizedString => ls`device orientation`,\n  ],\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'emulation-locations',\n  commandPrompt: 'Show Locations',\n  title: (): Platform.UIString.LocalizedString => ls`Locations`,\n  order: 40,\n  async loadView() {\n    const Emulation = await loadEmulationModule();\n    return Emulation.LocationsSettingsTab.LocationsSettingsTab.instance();\n  },\n  settings: [\n    'emulation.locations',\n  ],\n});\n"]}