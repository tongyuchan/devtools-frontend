{"version":3,"file":"LiveHeapProfile.js","sourceRoot":"","sources":["../../../../../front_end/perf_ui/LiveHeapProfile.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Host from '../host/host.js';\nimport * as SDK from '../sdk/sdk.js';\n\nimport {Memory} from './LineLevelProfile.js';\n\n/**\n * @implements {Common.Runnable.Runnable}\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.HeapProfilerModel.HeapProfilerModel>}\n */\nexport class LiveHeapProfile {\n  constructor() {\n    this._running = false;\n    this._sessionId = 0;\n    /** @type {function(?Function=):void} */\n    this._loadEventCallback = () => {};\n    this._setting = Common.Settings.Settings.instance().moduleSetting('memoryLiveHeapProfile');\n    this._setting.addChangeListener(event => event.data ? this._startProfiling() : this._stopProfiling());\n    if (this._setting.get()) {\n      this._startProfiling();\n    }\n  }\n\n  /**\n   * @override\n   */\n  run() {\n    return Promise.resolve();\n  }\n\n  /**\n   * @override\n   * @param {!SDK.HeapProfilerModel.HeapProfilerModel} model\n   */\n  modelAdded(model) {\n    model.startSampling(1e4);\n  }\n\n  /**\n   * @override\n   * @param {!SDK.HeapProfilerModel.HeapProfilerModel} model\n   */\n  modelRemoved(model) {\n    // Cannot do much when the model has already been removed.\n  }\n\n  async _startProfiling() {\n    if (this._running) {\n      return;\n    }\n    this._running = true;\n    const sessionId = this._sessionId;\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.SDKModel.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this._loadEventFired, this);\n\n    do {\n      const models = SDK.SDKModel.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel);\n      const profiles = await Promise.all(models.map(model => model.getSamplingProfile()));\n      if (sessionId !== this._sessionId) {\n        break;\n      }\n      Memory.instance().reset();\n      for (let i = 0; i < profiles.length; ++i) {\n        const profile = profiles[i];\n        if (!profile) {\n          continue;\n        }\n\n        Memory.instance().appendHeapProfile(profile, models[i].target());\n      }\n      await Promise.race([\n        new Promise(r => setTimeout(r, Host.InspectorFrontendHost.isUnderTest() ? 10 : 5000)), new Promise(r => {\n          this._loadEventCallback = r;\n        })\n      ]);\n    } while (sessionId === this._sessionId);\n\n    SDK.SDKModel.TargetManager.instance().unobserveModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.SDKModel.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this._loadEventFired, this);\n    for (const model of SDK.SDKModel.TargetManager.instance().models(SDK.HeapProfilerModel.HeapProfilerModel)) {\n      model.stopSampling();\n    }\n    Memory.instance().reset();\n  }\n\n  _stopProfiling() {\n    if (!this._running) {\n      return;\n    }\n    this._running = false;\n    this._sessionId++;\n  }\n\n  _loadEventFired() {\n    this._loadEventCallback();\n  }\n}\n"]}