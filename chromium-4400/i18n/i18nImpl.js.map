{"version":3,"file":"i18nImpl.js","sourceRoot":"","sources":["../../../../../front_end/i18n/i18nImpl.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Platform from '../platform/platform.js';\n\n// eslint-disable-next-line\nimport i18nBundle from '../third_party/i18n/i18n.js';\n\n/**\n * The locale that DevTools displays\n * @param {string} locale\n * @param {*} lhlMessages\n */\nexport const registerLocaleData = i18nBundle.registerLocaleData;\n\n/**\n * The locale that DevTools displays\n * @type {string|undefined}\n */\nexport let registeredLocale;\n\n/**\n * The strings from the module.json file\n * @type {!Object|undefined}\n */\nlet moduleJSONStrings;\n\n/**\n * Returns an instance of an object of formatted strings based on locale. If the instance is not\n * set at the time of calling, it is created.\n * @return {!Object}\n */\nfunction getOrSetModuleJSONStrings() {\n  if (!registeredLocale) {\n    throw new Error(`Unsupported locale '${registeredLocale}'`);\n  }\n\n  moduleJSONStrings = moduleJSONStrings || i18nBundle.getRendererFormattedStrings(registeredLocale);\n  return moduleJSONStrings;\n}\n\n/**\n * Take the locale passed in from the browser(host), run through the fallback logic (example: es-419 -> es)\n * to find the DevTools supported locale and register it.\n * @param {string} locale\n */\nexport function registerLocale(locale) {\n  registeredLocale = i18nBundle.lookupLocale(locale);\n}\n\n/**\n * Returns an anonymous function that wraps a call to retrieve a localized string.\n * This is introduced so that localized strings can be declared in environments where\n * the i18n system has not been configured and so, cannot be directly invoked. Instead,\n * strings are lazily localized when they are used. This is used for instance in the\n * meta files used to register module extensions.\n * @param {function(string, ?Object):string} str_\n * @param {string} id\n * @param {!Object} values\n * @return {function(): !Platform.UIString.LocalizedString} the localized version of the\n */\nexport function getLazilyComputedLocalizedString(str_, id, values = {}) {\n  return () => getLocalizedString(str_, id, values);\n}\n\n/**\n * Retrieve the localized string.\n * @param {function(string, ?Object):string} str_\n * @param {string} id\n * @param {!Object} values\n * @return {!Platform.UIString.LocalizedString} the localized version of the\n */\nexport function getLocalizedString(str_, id, values = {}) {\n  if (!registeredLocale) {\n    throw new Error(`Unsupported locale '${registeredLocale}'`);\n  }\n\n  const icuMessage = str_(id, values);\n  return /** @type {!Platform.UIString.LocalizedString} */ (i18nBundle.getFormatted(icuMessage, registeredLocale));\n}\n\n/**\n * Register a file's UIStrings with i18n, return function to generate the string ids.\n * @param {string} path\n * @param {!Object} stringStructure\n * @return {function(string, ?Object):string} return function to generate the string ids.\n */\nexport function registerUIStrings(path, stringStructure) {\n  /**\n   * Convert a message string & replacement values into an\n   * indexed id value in the form '{messageid} | # {index}'.\n   *\n   * @param {string} id\n   * @param {?Object} value\n   * */\n  const str = (id, value) => {\n    try {\n      const i18nInstance = i18nBundle.createMessageInstanceIdFn(path, stringStructure);\n      return i18nInstance(id, value);\n    } catch (e) {\n      // ID was not in the main file search for module.json strings\n      if (e instanceof i18nBundle.idNotInMainDictionaryException) {\n        const stringMappingArray = Object.getOwnPropertyNames(getOrSetModuleJSONStrings());\n        const index = stringMappingArray.indexOf(id);\n        if (index >= 0) {\n          return stringMappingArray[index];\n        }\n      }\n\n      return id;\n    }\n  };\n\n  return str;\n}\n\n/**\n * Returns a span element that may contains other DOM element as placeholders\n * @param {function(string, ?Object):string} str_\n * @param {string} stringId\n * @param {!Object<string, *>} placeholders\n * @return {!Element} the localized result\n */\nexport function getFormatLocalizedString(str_, stringId, placeholders) {\n  if (!registeredLocale) {\n    throw new Error(`Unsupported locale '${registeredLocale}'`);\n  }\n\n  const icuMessage = str_(stringId, placeholders);\n  const formatter = i18nBundle.getFormatter(icuMessage, registeredLocale);\n\n  const icuElements = formatter.getAst().elements;\n  const args = [];\n  let formattedString = '';\n  for (const element of icuElements) {\n    if (element.type === 'argumentElement') {\n      const placeholderValue = placeholders[element.id];\n      if (placeholderValue) {\n        args.push(placeholderValue);\n        element.value = '%s';  // convert the {PH} back to %s to use StringUtilities\n      }\n    }\n    formattedString += element.value;\n  }\n  return formatLocalized(formattedString, args);\n}\n\n/**\n * @param {string} formattedString\n * @param {?ArrayLike<?>} args\n * @return {!Element} the formatted result.\n */\nexport function formatLocalized(formattedString, args) {\n  /** @type {function(string):string} */\n  const substitution = substitution => {\n    return substitution;\n  };\n\n  /**\n   * @param {!Element} a\n   * @param {?} b\n   * @return {!Element}\n   */\n  function append(a, b) {\n    a.appendChild(typeof b === 'string' ? document.createTextNode(b) : b);\n    return a;\n  }\n\n  const formatters = {s: substitution};\n  return Platform.StringUtilities.format(formattedString, args, formatters, document.createElement('span'), append)\n      .formattedResult;\n}\n\n/**\n * @param {string} string\n * @param {*} values\n * @return {string} the serialized string.\n */\nexport function serializeUIString(string, values = []) {\n  const serializedMessage = {string, values};\n  return JSON.stringify(serializedMessage);\n}\n\n/**\n * @param {?string} serializedMessage\n */\nexport function deserializeUIString(serializedMessage) {\n  if (!serializedMessage) {\n    return {};\n  }\n\n  return JSON.parse(serializedMessage);\n}\n"]}