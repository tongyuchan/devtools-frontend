{"version":3,"file":"CodeMirrorUtils.js","sourceRoot":"","sources":["../../../../../front_end/text_editor/CodeMirrorUtils.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as TextUtils from '../text_utils/text_utils.js';\n\n/**\n * @param {!TextUtils.TextRange.TextRange} range\n * @return {!{start: *, end: *}} // {start: !CodeMirror.Pos, end: !CodeMirror.Pos}\n */\nexport function toPos(range) {\n  return {\n    start: new CodeMirror.Pos(range.startLine, range.startColumn),\n    end: new CodeMirror.Pos(range.endLine, range.endColumn)\n  };\n}\n\n/**\n * @param {*} start // !CodeMirror.Pos\n * @param {*} end // !CodeMirror.Pos\n * @return {!TextUtils.TextRange.TextRange}\n */\nexport function toRange(start, end) {\n  return new TextUtils.TextRange.TextRange(start.line, start.ch, end.line, end.ch);\n}\n\n/**\n * @param {*} changeObject (!CodeMirror.ChangeObject)\n * @return {{oldRange: !TextUtils.TextRange.TextRange, newRange: !TextUtils.TextRange.TextRange}}\n */\nexport function changeObjectToEditOperation(changeObject) {\n  const oldRange = toRange(changeObject.from, changeObject.to);\n  const newRange = oldRange.clone();\n  const linesAdded = changeObject.text.length;\n  if (linesAdded === 0) {\n    newRange.endLine = newRange.startLine;\n    newRange.endColumn = newRange.startColumn;\n  } else if (linesAdded === 1) {\n    newRange.endLine = newRange.startLine;\n    newRange.endColumn = newRange.startColumn + changeObject.text[0].length;\n  } else {\n    newRange.endLine = newRange.startLine + linesAdded - 1;\n    newRange.endColumn = changeObject.text[linesAdded - 1].length;\n  }\n  return {oldRange: oldRange, newRange: newRange};\n}\n\n/**\n * @param {!CodeMirror} codeMirror\n * @param {number} linesCount\n * @return {!Array.<string>}\n */\nexport function pullLines(codeMirror, linesCount) {\n  /** @type {!Array.<string>} */\n  const lines = [];\n  // @ts-expect-error CodeMirror types do not specify eachLine.\n  codeMirror.eachLine(0, linesCount, onLineHandle);\n  return lines;\n\n  /**\n   * @param {!{text: string}} lineHandle\n   */\n  function onLineHandle(lineHandle) {\n    lines.push(lineHandle.text);\n  }\n}\n\n/**\n * @implements {TextUtils.TextUtils.TokenizerFactory}\n */\nexport class TokenizerFactory {\n  /**\n   * @override\n   * @param {string} mimeType\n   * @return {function(string, function(string, ?string, number, number))}\n   */\n  createTokenizer(mimeType) {\n    const mode = CodeMirror.getMode({indentUnit: 2}, mimeType);\n    const state = CodeMirror.startState(mode);\n    /**\n     * @param {string} line\n     * @param {function(string, (string|null), number, number):void} callback\n     */\n    function tokenize(line, callback) {\n      const stream = new CodeMirror.StringStream(line);\n      while (!stream.eol()) {\n        // @ts-expect-error CodeMirror types specify token as optional.\n        const style = mode.token(stream, state);\n        const value = stream.current();\n        callback(value, style, stream.start, stream.start + value.length);\n        stream.start = stream.pos;\n      }\n    }\n    return tokenize;\n  }\n}\n"]}