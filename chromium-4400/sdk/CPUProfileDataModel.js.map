{"version":3,"file":"CPUProfileDataModel.js","sourceRoot":"","sources":["../../../../../front_end/sdk/CPUProfileDataModel.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\nimport {ls} from '../platform/platform.js';\n\nimport {ProfileNode, ProfileTreeModel} from './ProfileTreeModel.js';\nimport {Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\nexport class CPUProfileNode extends ProfileNode {\n  /**\n   * @param {!Protocol.Profiler.ProfileNode} node\n   * @param {number} sampleTime\n   */\n  constructor(node, sampleTime) {\n    const callFrame = node.callFrame || /** @type {!Protocol.Runtime.CallFrame} */ ({\n                        // Backward compatibility for old SamplingHeapProfileNode format.\n                        // @ts-ignore Legacy types\n                        functionName: node['functionName'],\n                        // @ts-ignore Legacy types\n                        scriptId: node['scriptId'],\n                        // @ts-ignore Legacy types\n                        url: node['url'],\n                        // @ts-ignore Legacy types\n                        lineNumber: node['lineNumber'] - 1,\n                        // @ts-ignore Legacy types\n                        columnNumber: node['columnNumber'] - 1\n                      });\n    super(callFrame);\n    this.id = node.id;\n    this.self = (node.hitCount || 0) * sampleTime;\n    this.positionTicks = node.positionTicks;\n    // Compatibility: legacy backends could provide \"no reason\" for optimized functions.\n    this.deoptReason = node.deoptReason && node.deoptReason !== 'no reason' ? node.deoptReason : null;\n  }\n}\n\nexport class CPUProfileDataModel extends ProfileTreeModel {\n  /**\n   * @param {!Protocol.Profiler.Profile} profile\n   * @param {?Target} target\n   */\n  constructor(profile, target) {\n    super(target);\n    // @ts-ignore Legacy types\n    const isLegacyFormat = Boolean(profile['head']);\n    if (isLegacyFormat) {\n      // Legacy format contains raw timestamps and start/stop times are in seconds.\n      this.profileStartTime = profile.startTime * 1000;\n      this.profileEndTime = profile.endTime * 1000;\n      // @ts-ignore Legacy types\n      this.timestamps = profile.timestamps;\n      this._compatibilityConversionHeadToNodes(profile);\n    } else {\n      // Current format encodes timestamps as deltas. Start/stop times are in microseconds.\n      this.profileStartTime = profile.startTime / 1000;\n      this.profileEndTime = profile.endTime / 1000;\n      this.timestamps = this._convertTimeDeltas(profile);\n    }\n    this.samples = profile.samples;\n    // @ts-ignore Legacy types\n    this.lines = profile.lines;\n    this.totalHitCount = 0;\n    this.profileHead = this._translateProfileTree(profile.nodes);\n    this.initialize(this.profileHead);\n    this._extractMetaNodes();\n    if (this.samples) {\n      this._buildIdToNodeMap();\n      this._sortSamples();\n      this._normalizeTimestamps();\n      this._fixMissingSamples();\n    }\n    /** @type {!Array<number>} */\n    this.timestamps;\n    /** @type {!Map<number, !CPUProfileNode>} */\n    this._idToNode;\n    /** @type {!CPUProfileNode} */\n    this.gcNode;\n  }\n\n  /**\n   * @param {!Protocol.Profiler.Profile} profile\n   */\n  _compatibilityConversionHeadToNodes(profile) {\n    // @ts-ignore Legacy types\n    if (!profile.head || profile.nodes) {\n      return;\n    }\n    /** @type {!Array<!Protocol.Profiler.ProfileNode>} */\n    const nodes = [];\n    // @ts-ignore Legacy types\n    convertNodesTree(profile.head);\n    profile.nodes = nodes;\n    // @ts-ignore Legacy types\n    delete profile.head;\n    /**\n     * @param {!Protocol.Profiler.ProfileNode} node\n     * @return {number}\n     */\n    function convertNodesTree(node) {\n      nodes.push(node);\n      // @ts-ignore Legacy types\n      node.children = (/** @type {!Array<!Protocol.Profiler.ProfileNode>} */ (node.children)).map(convertNodesTree);\n      return node.id;\n    }\n  }\n\n  /**\n   * @param {!Protocol.Profiler.Profile} profile\n   * @return {!Array<number>}\n   */\n  _convertTimeDeltas(profile) {\n    if (!profile.timeDeltas) {\n      return [];\n    }\n    let lastTimeUsec = profile.startTime;\n    const timestamps = new Array(profile.timeDeltas.length);\n    for (let i = 0; i < profile.timeDeltas.length; ++i) {\n      lastTimeUsec += profile.timeDeltas[i];\n      timestamps[i] = lastTimeUsec;\n    }\n    return timestamps;\n  }\n\n  /**\n   * @param {!Array<!Protocol.Profiler.ProfileNode>} nodes\n   * @return {!CPUProfileNode}\n   */\n  _translateProfileTree(nodes) {\n    /**\n     * @param {!Protocol.Profiler.ProfileNode} node\n     * @return {boolean}\n     */\n    function isNativeNode(node) {\n      if (node.callFrame) {\n        return Boolean(node.callFrame.url) && node.callFrame.url.startsWith('native ');\n      }\n      // @ts-ignore Legacy types\n      return Boolean(node['url']) && node['url'].startsWith('native ');\n    }\n\n    /**\n     * @param {!Array<!Protocol.Profiler.ProfileNode>} nodes\n     */\n    function buildChildrenFromParents(nodes) {\n      if (nodes[0].children) {\n        return;\n      }\n      nodes[0].children = [];\n      for (let i = 1; i < nodes.length; ++i) {\n        const node = nodes[i];\n        // @ts-ignore Legacy types\n        const parentNode = nodeByIdMap.get(node.parent);\n        // @ts-ignore Legacy types\n        if (parentNode.children) {\n          // @ts-ignore Legacy types\n          parentNode.children.push(node.id);\n        } else {\n          // @ts-ignore Legacy types\n          parentNode.children = [node.id];\n        }\n      }\n    }\n\n    /**\n     * @param {!Array<!Protocol.Profiler.ProfileNode>} nodes\n     * @param {!Array<number>|undefined} samples\n     */\n    function buildHitCountFromSamples(nodes, samples) {\n      if (typeof (nodes[0].hitCount) === 'number') {\n        return;\n      }\n      if (!samples) {\n        throw new Error('Error: Neither hitCount nor samples are present in profile.');\n      }\n      for (let i = 0; i < nodes.length; ++i) {\n        nodes[i].hitCount = 0;\n      }\n      for (let i = 0; i < samples.length; ++i) {\n        ++/** @type {number} */ (/** @type {!Protocol.Profiler.ProfileNode} */ (nodeByIdMap.get(samples[i])).hitCount);\n      }\n    }\n\n    /** @type {!Map<number, !Protocol.Profiler.ProfileNode>} */\n    const nodeByIdMap = new Map();\n    for (let i = 0; i < nodes.length; ++i) {\n      const node = nodes[i];\n      nodeByIdMap.set(node.id, node);\n    }\n\n    buildHitCountFromSamples(nodes, this.samples);\n    buildChildrenFromParents(nodes);\n    this.totalHitCount = nodes.reduce((acc, node) => acc + (node.hitCount || 0), 0);\n    const sampleTime = (this.profileEndTime - this.profileStartTime) / this.totalHitCount;\n    const keepNatives =\n        Boolean(Common.Settings.Settings.instance().moduleSetting('showNativeFunctionsInJSProfile').get());\n    const root = nodes[0];\n    /** @type {!Map<number, number>} */\n    const idMap = new Map([[root.id, root.id]]);\n    const resultRoot = new CPUProfileNode(root, sampleTime);\n    if (!root.children) {\n      throw new Error('Missing children for root');\n    }\n    const parentNodeStack = root.children.map(() => resultRoot);\n    const sourceNodeStack = root.children.map(id => nodeByIdMap.get(id));\n    while (sourceNodeStack.length) {\n      let parentNode = parentNodeStack.pop();\n      const sourceNode = sourceNodeStack.pop();\n      if (!sourceNode || !parentNode) {\n        continue;\n      }\n      if (!sourceNode.children) {\n        sourceNode.children = [];\n      }\n      const targetNode = new CPUProfileNode(sourceNode, sampleTime);\n      if (keepNatives || !isNativeNode(sourceNode)) {\n        parentNode.children.push(targetNode);\n        parentNode = targetNode;\n      } else {\n        parentNode.self += targetNode.self;\n      }\n      idMap.set(sourceNode.id, parentNode.id);\n      parentNodeStack.push.apply(\n          parentNodeStack, sourceNode.children.map(() => /** @type {!CPUProfileNode} */ (parentNode)));\n      sourceNodeStack.push.apply(sourceNodeStack, sourceNode.children.map(id => nodeByIdMap.get(id)));\n    }\n    if (this.samples) {\n      this.samples = this.samples.map(id => /** @type {number} */ (idMap.get(id)));\n    }\n    return resultRoot;\n  }\n\n  _sortSamples() {\n    const timestamps = this.timestamps;\n    if (!timestamps) {\n      return;\n    }\n    const samples = this.samples;\n    if (!samples) {\n      return;\n    }\n    const indices = timestamps.map((x, index) => index);\n    indices.sort((a, b) => timestamps[a] - timestamps[b]);\n    for (let i = 0; i < timestamps.length; ++i) {\n      let index = indices[i];\n      if (index === i) {\n        continue;\n      }\n      // Move items in a cycle.\n      const savedTimestamp = timestamps[i];\n      const savedSample = samples[i];\n      let currentIndex = i;\n      while (index !== i) {\n        samples[currentIndex] = samples[index];\n        timestamps[currentIndex] = timestamps[index];\n        currentIndex = index;\n        index = indices[index];\n        indices[currentIndex] = currentIndex;\n      }\n      samples[currentIndex] = savedSample;\n      timestamps[currentIndex] = savedTimestamp;\n    }\n  }\n\n  _normalizeTimestamps() {\n    if (!this.samples) {\n      return;\n    }\n    let timestamps = this.timestamps;\n    if (!timestamps) {\n      // Support loading old CPU profiles that are missing timestamps.\n      // Derive timestamps from profile start and stop times.\n      const profileStartTime = this.profileStartTime;\n      const interval = (this.profileEndTime - profileStartTime) / this.samples.length;\n      timestamps = /** @type {!Array<number>} */ (/** @type {*} */ (new Float64Array(this.samples.length + 1)));\n      for (let i = 0; i < timestamps.length; ++i) {\n        timestamps[i] = profileStartTime + i * interval;\n      }\n      this.timestamps = timestamps;\n      return;\n    }\n\n    // Convert samples from usec to msec\n    for (let i = 0; i < timestamps.length; ++i) {\n      timestamps[i] /= 1000;\n    }\n    if (this.samples.length === timestamps.length) {\n      // Support for a legacy format where were no timeDeltas.\n      // Add an extra timestamp used to calculate the last sample duration.\n      const averageSample = ((timestamps[timestamps.length - 1] || 0) - timestamps[0]) / (timestamps.length - 1);\n      this.timestamps.push((timestamps[timestamps.length - 1] || 0) + averageSample);\n    }\n    this.profileStartTime = timestamps[0];\n    this.profileEndTime = /** @type {number} */ (timestamps[timestamps.length - 1]);\n  }\n\n  _buildIdToNodeMap() {\n    this._idToNode = new Map();\n    const idToNode = this._idToNode;\n    const stack = [this.profileHead];\n    while (stack.length) {\n      const node = /** @type {!CPUProfileNode} */ (stack.pop());\n      idToNode.set(node.id, node);\n      // @ts-ignore Legacy types\n      stack.push.apply(stack, node.children);\n    }\n  }\n\n  _extractMetaNodes() {\n    const topLevelNodes = this.profileHead.children;\n    for (let i = 0; i < topLevelNodes.length && !(this.gcNode && this.programNode && this.idleNode); i++) {\n      const node = topLevelNodes[i];\n      if (node.functionName === '(garbage collector)') {\n        this.gcNode = /** @type {!CPUProfileNode} */ (node);\n      } else if (node.functionName === '(program)') {\n        this.programNode = node;\n      } else if (node.functionName === '(idle)') {\n        this.idleNode = node;\n      }\n    }\n  }\n\n  _fixMissingSamples() {\n    // Sometimes sampler is not able to parse the JS stack and returns\n    // a (program) sample instead. The issue leads to call frames belong\n    // to the same function invocation being split apart.\n    // Here's a workaround for that. When there's a single (program) sample\n    // between two call stacks sharing the same bottom node, it is replaced\n    // with the preceeding sample.\n    const samples = this.samples;\n    if (!samples) {\n      return;\n    }\n    const samplesCount = samples.length;\n    if (!this.programNode || samplesCount < 3) {\n      return;\n    }\n    const idToNode = this._idToNode;\n    const programNodeId = this.programNode.id;\n    const gcNodeId = this.gcNode ? this.gcNode.id : -1;\n    const idleNodeId = this.idleNode ? this.idleNode.id : -1;\n    let prevNodeId = samples[0];\n    let nodeId = samples[1];\n    let count = 0;\n    for (let sampleIndex = 1; sampleIndex < samplesCount - 1; sampleIndex++) {\n      const nextNodeId = samples[sampleIndex + 1];\n      if (nodeId === programNodeId && !isSystemNode(prevNodeId) && !isSystemNode(nextNodeId) &&\n          bottomNode(/** @type {!ProfileNode} */ (idToNode.get(prevNodeId))) ===\n              bottomNode(/** @type {!ProfileNode} */ (idToNode.get(nextNodeId)))) {\n        ++count;\n        samples[sampleIndex] = prevNodeId;\n      }\n      prevNodeId = nodeId;\n      nodeId = nextNodeId;\n    }\n    if (count) {\n      Common.Console.Console.instance().warn(ls`DevTools: CPU profile parser is fixing ${count} missing samples.`);\n    }\n    /**\n     * @param {!ProfileNode} node\n     * @return {!ProfileNode}\n     */\n    function bottomNode(node) {\n      while (node.parent && node.parent.parent) {\n        node = node.parent;\n      }\n      return node;\n    }\n    /**\n     * @param {number} nodeId\n     * @return {boolean}\n     */\n    function isSystemNode(nodeId) {\n      return nodeId === programNodeId || nodeId === gcNodeId || nodeId === idleNodeId;\n    }\n  }\n\n  /**\n   * @param {function(number, !CPUProfileNode, number):void} openFrameCallback\n   * @param {function(number, !CPUProfileNode, number, number, number):void} closeFrameCallback\n   * @param {number=} startTime\n   * @param {number=} stopTime\n   */\n  forEachFrame(openFrameCallback, closeFrameCallback, startTime, stopTime) {\n    if (!this.profileHead || !this.samples) {\n      return;\n    }\n\n    startTime = startTime || 0;\n    stopTime = stopTime || Infinity;\n    const samples = this.samples;\n    const timestamps = this.timestamps;\n    const idToNode = this._idToNode;\n    const gcNode = this.gcNode;\n    const samplesCount = samples.length;\n    const startIndex =\n        Platform.ArrayUtilities.lowerBound(timestamps, startTime, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    let stackTop = 0;\n    const stackNodes = [];\n    let prevId = this.profileHead.id;\n    let sampleTime;\n    /** @type {?CPUProfileNode} */\n    let gcParentNode = null;\n\n    // Extra slots for gc being put on top,\n    // and one at the bottom to allow safe stackTop-1 access.\n    const stackDepth = this.maxDepth + 3;\n    if (!this._stackStartTimes) {\n      this._stackStartTimes = new Float64Array(stackDepth);\n    }\n    const stackStartTimes = this._stackStartTimes;\n    if (!this._stackChildrenDuration) {\n      this._stackChildrenDuration = new Float64Array(stackDepth);\n    }\n    const stackChildrenDuration = this._stackChildrenDuration;\n\n    let node;\n    let sampleIndex;\n    for (sampleIndex = startIndex; sampleIndex < samplesCount; sampleIndex++) {\n      sampleTime = timestamps[sampleIndex];\n      if (sampleTime >= stopTime) {\n        break;\n      }\n      const id = samples[sampleIndex];\n      if (id === prevId) {\n        continue;\n      }\n      node = idToNode.get(id);\n      let prevNode = /** @type {!CPUProfileNode} */ (idToNode.get(prevId));\n\n      if (node === gcNode) {\n        // GC samples have no stack, so we just put GC node on top of the last recorded sample.\n        gcParentNode = prevNode;\n        openFrameCallback(gcParentNode.depth + 1, gcNode, sampleTime);\n        stackStartTimes[++stackTop] = sampleTime;\n        stackChildrenDuration[stackTop] = 0;\n        prevId = id;\n        continue;\n      }\n      if (prevNode === gcNode && gcParentNode) {\n        // end of GC frame\n        const start = stackStartTimes[stackTop];\n        const duration = sampleTime - start;\n        stackChildrenDuration[stackTop - 1] += duration;\n        closeFrameCallback(gcParentNode.depth + 1, gcNode, start, duration, duration - stackChildrenDuration[stackTop]);\n        --stackTop;\n        prevNode = gcParentNode;\n        prevId = prevNode.id;\n        gcParentNode = null;\n      }\n\n      while (node && node.depth > prevNode.depth) {\n        stackNodes.push(node);\n        node = node.parent;\n      }\n\n      // Go down to the LCA and close current intervals.\n      while (prevNode !== node) {\n        const start = stackStartTimes[stackTop];\n        const duration = sampleTime - start;\n        stackChildrenDuration[stackTop - 1] += duration;\n        closeFrameCallback(\n            prevNode.depth, /** @type {!CPUProfileNode} */ (prevNode), start, duration,\n            duration - stackChildrenDuration[stackTop]);\n        --stackTop;\n        if (node && node.depth === prevNode.depth) {\n          stackNodes.push(node);\n          node = node.parent;\n        }\n        prevNode = /** @type {!CPUProfileNode} */ (prevNode.parent);\n      }\n\n      // Go up the nodes stack and open new intervals.\n      while (stackNodes.length) {\n        const currentNode = /** @type {!CPUProfileNode} */ (stackNodes.pop());\n        node = currentNode;\n        openFrameCallback(currentNode.depth, currentNode, sampleTime);\n        stackStartTimes[++stackTop] = sampleTime;\n        stackChildrenDuration[stackTop] = 0;\n      }\n\n      prevId = id;\n    }\n\n    sampleTime = timestamps[sampleIndex] || this.profileEndTime;\n    if (gcParentNode && idToNode.get(prevId) === gcNode) {\n      const start = stackStartTimes[stackTop];\n      const duration = sampleTime - start;\n      stackChildrenDuration[stackTop - 1] += duration;\n      closeFrameCallback(\n          gcParentNode.depth + 1, /** @type {!CPUProfileNode} */ (node), start, duration,\n          duration - stackChildrenDuration[stackTop]);\n      --stackTop;\n      prevId = gcParentNode.id;\n    }\n\n    for (let node = idToNode.get(prevId); node && node.parent; node = /** @type {!CPUProfileNode} */ (node.parent)) {\n      const start = stackStartTimes[stackTop];\n      const duration = sampleTime - start;\n      stackChildrenDuration[stackTop - 1] += duration;\n      closeFrameCallback(\n          node.depth, /** @type {!CPUProfileNode} */ (node), start, duration,\n          duration - stackChildrenDuration[stackTop]);\n      --stackTop;\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @return {?CPUProfileNode}\n   */\n  nodeByIndex(index) {\n    return this.samples && this._idToNode.get(this.samples[index]) || null;\n  }\n}\n"]}