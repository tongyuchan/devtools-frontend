{"version":3,"file":"HeapProfilerModel.js","sourceRoot":"","sources":["../../../../../front_end/sdk/HeapProfilerModel.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {DebuggerModel} from './DebuggerModel.js';            // eslint-disable-line no-unused-vars\nimport {RemoteObject} from './RemoteObject.js';              // eslint-disable-line no-unused-vars\nimport {RuntimeModel} from './RuntimeModel.js';              // eslint-disable-line no-unused-vars\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\n\nexport class HeapProfilerModel extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    target.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this));\n    this._enabled = false;\n    this._heapProfilerAgent = target.heapProfilerAgent();\n    this._memoryAgent = target.memoryAgent();\n    this._runtimeModel = /** @type {!RuntimeModel} */ (target.model(RuntimeModel));\n    this._samplingProfilerDepth = 0;\n  }\n\n  /**\n   * @return {!DebuggerModel}\n   */\n  debuggerModel() {\n    return this._runtimeModel.debuggerModel();\n  }\n\n  /**\n   * @return {!RuntimeModel}\n   */\n  runtimeModel() {\n    return this._runtimeModel;\n  }\n\n  async enable() {\n    if (this._enabled) {\n      return;\n    }\n\n    this._enabled = true;\n    await this._heapProfilerAgent.invoke_enable();\n  }\n\n  /**\n   * @param {number=} samplingRateInBytes\n   * @returns {!Promise<boolean>}\n   */\n  async startSampling(samplingRateInBytes) {\n    if (this._samplingProfilerDepth++) {\n      return false;\n    }\n    const defaultSamplingIntervalInBytes = 16384;\n    const response = await this._heapProfilerAgent.invoke_startSampling(\n        {samplingInterval: samplingRateInBytes || defaultSamplingIntervalInBytes});\n    return Boolean(response.getError());\n  }\n\n  /**\n   * @return {!Promise<?Protocol.HeapProfiler.SamplingHeapProfile>}\n   */\n  async stopSampling() {\n    if (!this._samplingProfilerDepth) {\n      throw new Error('Sampling profiler is not running.');\n    }\n    if (--this._samplingProfilerDepth) {\n      return this.getSamplingProfile();\n    }\n    const response = await this._heapProfilerAgent.invoke_stopSampling();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  /**\n   * @return {!Promise<?Protocol.HeapProfiler.SamplingHeapProfile>}\n   */\n  async getSamplingProfile() {\n    const response = await this._heapProfilerAgent.invoke_getSamplingProfile();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   */\n  async collectGarbage() {\n    const response = await this._heapProfilerAgent.invoke_collectGarbage();\n    return Boolean(response.getError());\n  }\n\n  /**\n   * @param {string} objectId\n   * @return {!Promise<?string>}\n   */\n  async snapshotObjectIdForObjectId(objectId) {\n    const response = await this._heapProfilerAgent.invoke_getHeapObjectId({objectId});\n    if (response.getError()) {\n      return null;\n    }\n    return response.heapSnapshotObjectId;\n  }\n\n  /**\n   * @param {string} snapshotObjectId\n   * @param {string} objectGroupName\n   * @return {!Promise<?RemoteObject>}\n   */\n  async objectForSnapshotObjectId(snapshotObjectId, objectGroupName) {\n    const result = await this._heapProfilerAgent.invoke_getObjectByHeapObjectId(\n        {objectId: snapshotObjectId, objectGroup: objectGroupName});\n    if (result.getError()) {\n      return null;\n    }\n    return this._runtimeModel.createRemoteObject(result.result);\n  }\n\n  /**\n   * @param {string} snapshotObjectId\n   * @return {!Promise<boolean>}\n   */\n  async addInspectedHeapObject(snapshotObjectId) {\n    const response = await this._heapProfilerAgent.invoke_addInspectedHeapObject({heapObjectId: snapshotObjectId});\n    return Boolean(response.getError());\n  }\n\n  /**\n   * @param {boolean} reportProgress\n   * @param {boolean} treatGlobalObjectsAsRoots\n   * @return {!Promise<void>}\n   */\n  async takeHeapSnapshot(reportProgress, treatGlobalObjectsAsRoots) {\n    await this._heapProfilerAgent.invoke_takeHeapSnapshot({reportProgress, treatGlobalObjectsAsRoots});\n  }\n\n  /**\n   * @param {boolean} recordAllocationStacks\n   * @return {!Promise<boolean>}\n   */\n  async startTrackingHeapObjects(recordAllocationStacks) {\n    const response =\n        await this._heapProfilerAgent.invoke_startTrackingHeapObjects({trackAllocations: recordAllocationStacks});\n    return Boolean(response.getError());\n  }\n\n  /**\n   * @param {boolean} reportProgress\n   * @return {!Promise<boolean>}\n   */\n  async stopTrackingHeapObjects(reportProgress) {\n    const response = await this._heapProfilerAgent.invoke_stopTrackingHeapObjects({reportProgress});\n    return Boolean(response.getError());\n  }\n\n  /**\n   * @param {!Array<number>} samples\n   */\n  heapStatsUpdate(samples) {\n    this.dispatchEventToListeners(Events.HeapStatsUpdate, samples);\n  }\n\n  /**\n   * @param {number} lastSeenObjectId\n   * @param {number} timestamp\n   */\n  lastSeenObjectId(lastSeenObjectId, timestamp) {\n    this.dispatchEventToListeners(Events.LastSeenObjectId, {lastSeenObjectId: lastSeenObjectId, timestamp: timestamp});\n  }\n\n  /**\n   * @param {string} chunk\n   */\n  addHeapSnapshotChunk(chunk) {\n    this.dispatchEventToListeners(Events.AddHeapSnapshotChunk, chunk);\n  }\n\n  /**\n   * @param {number} done\n   * @param {number} total\n   * @param {boolean=} finished\n   */\n  reportHeapSnapshotProgress(done, total, finished) {\n    this.dispatchEventToListeners(Events.ReportHeapSnapshotProgress, {done: done, total: total, finished: finished});\n  }\n\n  resetProfiles() {\n    this.dispatchEventToListeners(Events.ResetProfiles, this);\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  HeapStatsUpdate: Symbol('HeapStatsUpdate'),\n  LastSeenObjectId: Symbol('LastSeenObjectId'),\n  AddHeapSnapshotChunk: Symbol('AddHeapSnapshotChunk'),\n  ReportHeapSnapshotProgress: Symbol('ReportHeapSnapshotProgress'),\n  ResetProfiles: Symbol('ResetProfiles')\n};\n\n/** @typedef {!{functionName: string, url: string, scriptId: (Protocol.Runtime.ScriptId|undefined), lineNumber: (number|undefined), columnNumber: (number|undefined)}} */\n// @ts-ignore typedef\nexport let NativeProfilerCallFrame;  // eslint-disable-line no-unused-vars\n\n/** @typedef {!{callFrame: !NativeProfilerCallFrame, selfSize: number, id: (number|undefined), children: Array<!CommonHeapProfileNode>}} */\n// @ts-ignore typedef\nexport let CommonHeapProfileNode;  // eslint-disable-line no-unused-vars\n\n/** @typedef {!{head:!CommonHeapProfileNode, modules:!Array<!Protocol.Memory.Module>}} */\n// @ts-ignore typedef\nexport let CommonHeapProfile;  // eslint-disable-line no-unused-vars\n\n/**\n * @implements {ProtocolProxyApi.HeapProfilerDispatcher}\n */\nclass HeapProfilerDispatcher {\n  /**\n   * @param {!HeapProfilerModel} model\n   */\n  constructor(model) {\n    this._heapProfilerModel = model;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.HeapProfiler.HeapStatsUpdateEvent} event\n   */\n  heapStatsUpdate({statsUpdate}) {\n    this._heapProfilerModel.heapStatsUpdate(statsUpdate);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.HeapProfiler.LastSeenObjectIdEvent} event\n   */\n  lastSeenObjectId({lastSeenObjectId, timestamp}) {\n    this._heapProfilerModel.lastSeenObjectId(lastSeenObjectId, timestamp);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.HeapProfiler.AddHeapSnapshotChunkEvent} event\n   */\n  addHeapSnapshotChunk({chunk}) {\n    this._heapProfilerModel.addHeapSnapshotChunk(chunk);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.HeapProfiler.ReportHeapSnapshotProgressEvent} event\n   */\n  reportHeapSnapshotProgress({done, total, finished}) {\n    this._heapProfilerModel.reportHeapSnapshotProgress(done, total, finished);\n  }\n\n  /**\n   * @override\n   */\n  resetProfiles() {\n    this._heapProfilerModel.resetProfiles();\n  }\n}\n\n/** @typedef {!{callFrame: !NativeProfilerCallFrame, selfSize: number, childMap: !Map<string, !NodeForConstruction>}} */\n// @ts-ignore typedef\nlet NodeForConstruction;  // eslint-disable-line no-unused-vars\n\nSDKModel.register(HeapProfilerModel, Capability.JS, false);\n"]}