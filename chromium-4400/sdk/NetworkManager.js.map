{"version":3,"file":"NetworkManager.js","sourceRoot":"","sources":["../../../../../front_end/sdk/NetworkManager.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\nimport * as Platform from '../platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';  // eslint-disable-line no-unused-vars\n\nimport {Cookie} from './Cookie.js';\nimport {BlockedCookieWithReason, ContentData, Events as NetworkRequestEvents, ExtraRequestInfo, ExtraResponseInfo, MIME_TYPE, MIME_TYPE_TO_RESOURCE_TYPE, NameValue, NetworkRequest} from './NetworkRequest.js';  // eslint-disable-line no-unused-vars\nimport {Capability, SDKModel, SDKModelObserver, Target, TargetManager} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\n/** @type {!WeakMap<!NetworkRequest, !NetworkManager>} */\nconst requestToManagerMap = new WeakMap();\n\nconst CONNECTION_TYPES = new Map([\n  ['2g', Protocol.Network.ConnectionType.Cellular2g],\n  ['3g', Protocol.Network.ConnectionType.Cellular3g],\n  ['4g', Protocol.Network.ConnectionType.Cellular4g],\n  ['bluetooth', Protocol.Network.ConnectionType.Bluetooth],\n  ['wifi', Protocol.Network.ConnectionType.Wifi],\n  ['wimax', Protocol.Network.ConnectionType.Wimax],\n]);\n\n\nexport class NetworkManager extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    this._dispatcher = new NetworkDispatcher(this);\n    this._networkAgent = target.networkAgent();\n    target.registerNetworkDispatcher(this._dispatcher);\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      this._networkAgent.invoke_setCacheDisabled({cacheDisabled: true});\n    }\n\n    this._networkAgent.invoke_enable({maxPostDataSize: MAX_EAGER_POST_REQUEST_BODY_LENGTH});\n    this._networkAgent.invoke_setAttachDebugStack({enabled: true});\n\n    this._bypassServiceWorkerSetting = Common.Settings.Settings.instance().createSetting('bypassServiceWorker', false);\n    if (this._bypassServiceWorkerSetting.get()) {\n      this._bypassServiceWorkerChanged();\n    }\n    this._bypassServiceWorkerSetting.addChangeListener(this._bypassServiceWorkerChanged, this);\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .addChangeListener(this._cacheDisabledSettingChanged, this);\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   * @return {?NetworkManager}\n   */\n  static forRequest(request) {\n    return requestToManagerMap.get(request) || null;\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   * @return {boolean}\n   */\n  static canReplayRequest(request) {\n    return Boolean(requestToManagerMap.get(request)) &&\n        request.resourceType() === Common.ResourceType.resourceTypes.XHR;\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   */\n  static replayRequest(request) {\n    const manager = requestToManagerMap.get(request);\n    if (!manager) {\n      return;\n    }\n    manager._networkAgent.invoke_replayXHR({requestId: request.requestId()});\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   * @param {string} query\n   * @param {boolean} caseSensitive\n   * @param {boolean} isRegex\n   * @return {!Promise<!Array<!TextUtils.ContentProvider.SearchMatch>>}\n   */\n  static async searchInRequest(request, query, caseSensitive, isRegex) {\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return [];\n    }\n    const response = await manager._networkAgent.invoke_searchInResponseBody(\n        {requestId: request.requestId(), query: query, caseSensitive: caseSensitive, isRegex: isRegex});\n    return response.result || [];\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   * @return {!Promise<!ContentData>}\n   */\n  static async requestContentData(request) {\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return {error: 'Content for WebSockets is currently not supported', content: null, encoded: false};\n    }\n    if (!request.finished) {\n      await request.once(NetworkRequestEvents.FinishedLoading);\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request', content: null, encoded: false};\n    }\n    const response = await manager._networkAgent.invoke_getResponseBody({requestId: request.requestId()});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n\n  /**\n   * @param {!NetworkRequest} request\n   * @return {!Promise<?string>}\n   */\n  static async requestPostData(request) {\n    const manager = NetworkManager.forRequest(request);\n    if (manager) {\n      try {\n        const {postData} =\n            await manager._networkAgent.invoke_getRequestPostData({requestId: request.backendRequestId()});\n        return postData;\n      } catch (e) {\n        return e.message;\n      }\n    }\n    console.error('No network manager for request');\n    return /** @type {!Promise<?string>} */ (Promise.resolve(null));\n  }\n\n  /**\n   * @param {!Conditions} conditions\n   * @return {!Protocol.Network.ConnectionType}\n   * TODO(allada): this belongs to NetworkConditionsSelector, which should hardcode/guess it.\n   */\n  static _connectionType(conditions) {\n    if (!conditions.download && !conditions.upload) {\n      return Protocol.Network.ConnectionType.None;\n    }\n    const title = conditions.title.toLowerCase();\n    for (const [name, protocolType] of CONNECTION_TYPES) {\n      if (title.includes(name)) {\n        return protocolType;\n      }\n    }\n    return Protocol.Network.ConnectionType.Other;\n  }\n\n  /**\n   * @param {!Object<string,string>} headers\n   * @return {!Object<string, string>}\n   */\n  static lowercaseHeaders(headers) {\n    /** @type {!Object<string, string>} */\n    const newHeaders = {};\n    for (const headerName in headers) {\n      newHeaders[headerName.toLowerCase()] = headers[headerName];\n    }\n    return newHeaders;\n  }\n\n  /**\n   * @param {string} url\n   * @return {!NetworkRequest}\n   */\n  inflightRequestForURL(url) {\n    return this._dispatcher._inflightRequestsByURL[url];\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _cacheDisabledSettingChanged(event) {\n    const enabled = /** @type {boolean} */ (event.data);\n    this._networkAgent.invoke_setCacheDisabled({cacheDisabled: enabled});\n  }\n\n  /**\n   * @override\n   */\n  dispose() {\n    Common.Settings.Settings.instance()\n        .moduleSetting('cacheDisabled')\n        .removeChangeListener(this._cacheDisabledSettingChanged, this);\n  }\n\n  _bypassServiceWorkerChanged() {\n    this._networkAgent.invoke_setBypassServiceWorker({bypass: this._bypassServiceWorkerSetting.get()});\n  }\n\n  /**\n   * @param {string} frameId\n   * @returns {!Promise<?Protocol.Network.SecurityIsolationStatus>}\n   */\n  async getSecurityIsolationStatus(frameId) {\n    const result = await this._networkAgent.invoke_getSecurityIsolationStatus({frameId});\n    if (result.getError()) {\n      return null;\n    }\n    return result.status;\n  }\n\n  /**\n    * @param {string} frameId\n    * @param {string} url\n    * @param {!Protocol.Network.LoadNetworkResourceOptions} options\n    * @return {!Promise<!Protocol.Network.LoadNetworkResourcePageResult>}\n    */\n  async loadNetworkResource(frameId, url, options) {\n    const result = await this._networkAgent.invoke_loadNetworkResource({frameId, url, options});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return result.resource;\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  RequestStarted: Symbol('RequestStarted'),\n  RequestUpdated: Symbol('RequestUpdated'),\n  RequestFinished: Symbol('RequestFinished'),\n  RequestUpdateDropped: Symbol('RequestUpdateDropped'),\n  ResponseReceived: Symbol('ResponseReceived'),\n  MessageGenerated: Symbol('MessageGenerated'),\n  RequestRedirected: Symbol('RequestRedirected'),\n  LoadingFinished: Symbol('LoadingFinished'),\n};\n\n/** @type {!Conditions} */\nexport const NoThrottlingConditions = {\n  title: Common.UIString.UIString('No throttling'),\n  download: -1,\n  upload: -1,\n  latency: 0\n};\n\n/** @type {!Conditions} */\nexport const OfflineConditions = {\n  title: Common.UIString.UIString('Offline'),\n  download: 0,\n  upload: 0,\n  latency: 0,\n};\n\n/** @type {!Conditions} */\nexport const Slow3GConditions = {\n  title: Common.UIString.UIString('Slow 3G'),\n  download: 500 * 1000 / 8 * .8,\n  upload: 500 * 1000 / 8 * .8,\n  latency: 400 * 5,\n};\n\n/** @type {!Conditions} */\nexport const Fast3GConditions = {\n  title: Common.UIString.UIString('Fast 3G'),\n  download: 1.6 * 1000 * 1000 / 8 * .9,\n  upload: 750 * 1000 / 8 * .9,\n  latency: 150 * 3.75,\n};\n\nconst MAX_EAGER_POST_REQUEST_BODY_LENGTH = 64 * 1024;  // bytes\n\n/**\n * @implements {ProtocolProxyApi.NetworkDispatcher}\n */\nexport class NetworkDispatcher {\n  /**\n   * @param {!NetworkManager} manager\n   */\n  constructor(manager) {\n    this._manager = manager;\n    /** @type {!Map<!Protocol.Network.RequestId, !NetworkRequest>} */\n    this._inflightRequestsById = new Map();\n    /** @type {!Object<string, !NetworkRequest>} */\n    this._inflightRequestsByURL = {};\n    /** @type {!Map<string, !RedirectExtraInfoBuilder>} */\n    this._requestIdToRedirectExtraInfoBuilder = new Map();\n    /**\n     * In case of an early abort or a cache hit, the Trust Token done event is\n     * reported before the request itself is created in `requestWillBeSent`.\n     * This causes the event to be lost as no `NetworkRequest` instance has been\n     * created yet.\n     * This map caches the events temporarliy and populates the NetworKRequest\n     * once it is created in `requestWillBeSent`.\n     * @type {!Map<string, Protocol.Network.TrustTokenOperationDoneEvent>}\n     */\n    this._requestIdToTrustTokenEvent = new Map();\n  }\n\n  /**\n   * @param {!Protocol.Network.Headers} headersMap\n   * @return {!Array.<!NameValue>}\n   */\n  _headersMapToHeadersArray(headersMap) {\n    const result = [];\n    for (const name in headersMap) {\n      const values = headersMap[name].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        result.push({name: name, value: values[i]});\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   * @param {!Protocol.Network.Request} request\n   */\n  _updateNetworkRequestWithRequest(networkRequest, request) {\n    networkRequest.requestMethod = request.method;\n    networkRequest.setRequestHeaders(this._headersMapToHeadersArray(request.headers));\n    networkRequest.setRequestFormData(Boolean(request.hasPostData), request.postData || null);\n    networkRequest.setInitialPriority(request.initialPriority);\n    networkRequest.mixedContentType = request.mixedContentType || Protocol.Security.MixedContentType.None;\n    networkRequest.setReferrerPolicy(request.referrerPolicy);\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   * @param {!Protocol.Network.Response} response\n   */\n  _updateNetworkRequestWithResponse(networkRequest, response) {\n    if (response.url && networkRequest.url() !== response.url) {\n      networkRequest.setUrl(response.url);\n    }\n    networkRequest.mimeType = /** @type {!MIME_TYPE} */ (response.mimeType);\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    if (!networkRequest.hasExtraResponseInfo()) {\n      networkRequest.responseHeaders = this._headersMapToHeadersArray(response.headers);\n    }\n\n    if (response.encodedDataLength >= 0) {\n      networkRequest.setTransferSize(response.encodedDataLength);\n    }\n\n    if (response.requestHeaders && !networkRequest.hasExtraRequestInfo()) {\n      // TODO(http://crbug.com/1004979): Stop using response.requestHeaders and\n      //   response.requestHeadersText once shared workers\n      //   emit Network.*ExtraInfo events for their network requests.\n      networkRequest.setRequestHeaders(this._headersMapToHeadersArray(response.requestHeaders));\n      networkRequest.setRequestHeadersText(response.requestHeadersText || '');\n    }\n\n    networkRequest.connectionReused = response.connectionReused;\n    networkRequest.connectionId = String(response.connectionId);\n    if (response.remoteIPAddress) {\n      networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);\n    }\n\n    if (response.fromServiceWorker) {\n      networkRequest.fetchedViaServiceWorker = true;\n    }\n\n    if (response.fromDiskCache) {\n      networkRequest.setFromDiskCache();\n    }\n\n    if (response.fromPrefetchCache) {\n      networkRequest.setFromPrefetchCache();\n    }\n\n    if (response.cacheStorageCacheName) {\n      networkRequest.setResponseCacheStorageCacheName(response.cacheStorageCacheName);\n    }\n\n    if (response.responseTime) {\n      networkRequest.setResponseRetrievalTime(new Date(response.responseTime));\n    }\n\n    networkRequest.timing = response.timing;\n\n    networkRequest.protocol = response.protocol || '';\n\n    if (response.serviceWorkerResponseSource) {\n      networkRequest.setServiceWorkerResponseSource(response.serviceWorkerResponseSource);\n    }\n\n    networkRequest.setSecurityState(response.securityState);\n\n    if (!this._mimeTypeIsConsistentWithType(networkRequest)) {\n      const message = Common.UIString.UIString(\n          'Resource interpreted as %s but transferred with MIME type %s: \"%s\".', networkRequest.resourceType().title(),\n          networkRequest.mimeType, networkRequest.url());\n      this._manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: true});\n    }\n\n    if (response.securityDetails) {\n      networkRequest.setSecurityDetails(response.securityDetails);\n    }\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   * @return {boolean}\n   */\n  _mimeTypeIsConsistentWithType(networkRequest) {\n    // If status is an error, content is likely to be of an inconsistent type,\n    // as it's going to be an error message. We do not want to emit a warning\n    // for this, though, as this will already be reported as resource loading failure.\n    // Also, if a URL like http://localhost/wiki/load.php?debug=true&lang=en produces text/css and gets reloaded,\n    // it is 304 Not Modified and its guessed mime-type is text/php, which is wrong.\n    // Don't check for mime-types in 304-resources.\n    if (networkRequest.hasErrorStatusCode() || networkRequest.statusCode === 304 || networkRequest.statusCode === 204) {\n      return true;\n    }\n\n    const resourceType = networkRequest.resourceType();\n    if (resourceType !== Common.ResourceType.resourceTypes.Stylesheet &&\n        resourceType !== Common.ResourceType.resourceTypes.Document &&\n        resourceType !== Common.ResourceType.resourceTypes.TextTrack) {\n      return true;\n    }\n\n\n    if (!networkRequest.mimeType) {\n      return true;\n    }  // Might be not known for cached resources with null responses.\n\n    if (MIME_TYPE_TO_RESOURCE_TYPE.has(networkRequest.mimeType)) {\n      return resourceType.name() in MIME_TYPE_TO_RESOURCE_TYPE.get(networkRequest.mimeType);\n    }\n\n    return false;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.ResourceChangedPriorityEvent} request\n   */\n  resourceChangedPriority({requestId, newPriority, timestamp}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (networkRequest) {\n      networkRequest.setPriority(newPriority);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.SignedExchangeReceivedEvent} request\n   */\n  signedExchangeReceived({requestId, info}) {\n    // While loading a signed exchange, a signedExchangeReceived event is sent\n    // between two requestWillBeSent events.\n    // 1. The first requestWillBeSent is sent while starting the navigation (or\n    //    prefetching).\n    // 2. This signedExchangeReceived event is sent when the browser detects the\n    //    signed exchange.\n    // 3. The second requestWillBeSent is sent with the generated redirect\n    //    response and a new redirected request which URL is the inner request\n    //    URL of the signed exchange.\n    let networkRequest = this._inflightRequestsById.get(requestId);\n    // |requestId| is available only for navigation requests. If the request was\n    // sent from a renderer process for prefetching, it is not available. In the\n    // case, need to fallback to look for the URL.\n    // TODO(crbug/841076): Sends the request ID of prefetching to the browser\n    // process and DevTools to find the matching request.\n    if (!networkRequest) {\n      networkRequest = this._inflightRequestsByURL[info.outerResponse.url];\n      if (!networkRequest) {\n        return;\n      }\n    }\n    networkRequest.setSignedExchangeInfo(info);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.SignedExchange);\n\n    this._updateNetworkRequestWithResponse(networkRequest, info.outerResponse);\n    this._updateNetworkRequest(networkRequest);\n    this._manager.dispatchEventToListeners(\n        Events.ResponseReceived, {request: networkRequest, response: info.outerResponse});\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.RequestWillBeSentEvent} request\n   */\n  requestWillBeSent(\n      {requestId, loaderId, documentURL, request, timestamp, wallTime, initiator, redirectResponse, type, frameId}) {\n    let networkRequest = this._inflightRequestsById.get(requestId);\n    if (networkRequest) {\n      // FIXME: move this check to the backend.\n      if (!redirectResponse) {\n        return;\n      }\n      // If signedExchangeReceived event has already been sent for the request,\n      // ignores the internally generated |redirectResponse|. The\n      // |outerResponse| of SignedExchangeInfo was set to |networkRequest| in\n      // signedExchangeReceived().\n      if (!networkRequest.signedExchangeInfo()) {\n        this.responseReceived({\n          requestId,\n          loaderId,\n          timestamp,\n          type: type || Protocol.Network.ResourceType.Other,\n          response: redirectResponse,\n          frameId\n        });\n      }\n      networkRequest = this._appendRedirect(requestId, timestamp, request.url);\n      this._manager.dispatchEventToListeners(Events.RequestRedirected, networkRequest);\n    } else {\n      networkRequest =\n          this._createNetworkRequest(requestId, frameId || '', loaderId, request.url, documentURL, initiator);\n    }\n    networkRequest.hasNetworkData = true;\n    this._updateNetworkRequestWithRequest(networkRequest, request);\n    networkRequest.setIssueTime(timestamp, wallTime);\n    networkRequest.setResourceType(\n        type ? Common.ResourceType.resourceTypes[type] : Common.ResourceType.resourceTypes.Other);\n    if (request.trustTokenParams) {\n      networkRequest.setTrustTokenParams(request.trustTokenParams);\n    }\n    const maybeTrustTokenEvent = this._requestIdToTrustTokenEvent.get(requestId);\n    if (maybeTrustTokenEvent) {\n      networkRequest.setTrustTokenOperationDoneEvent(maybeTrustTokenEvent);\n      this._requestIdToTrustTokenEvent.delete(requestId);\n    }\n\n    this._getExtraInfoBuilder(requestId).addRequest(networkRequest);\n\n    this._startNetworkRequest(networkRequest, request);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.RequestServedFromCacheEvent} request\n   */\n  requestServedFromCache({requestId}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.setFromMemoryCache();\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.ResponseReceivedEvent} request\n   */\n  responseReceived({requestId, loaderId, timestamp, type, response, frameId}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    const lowercaseHeaders = NetworkManager.lowercaseHeaders(response.headers);\n    if (!networkRequest) {\n      const lastModifiedHeader = lowercaseHeaders['last-modified'];\n      // We missed the requestWillBeSent.\n      /** @type {!RequestUpdateDroppedEventData} */\n      const eventData = {\n        url: response.url,\n        frameId: frameId || '',\n        loaderId: loaderId,\n        resourceType: type,\n        mimeType: response.mimeType,\n        lastModified: lastModifiedHeader ? new Date(lastModifiedHeader) : null,\n      };\n      this._manager.dispatchEventToListeners(Events.RequestUpdateDropped, eventData);\n      return;\n    }\n\n    networkRequest.responseReceivedTime = timestamp;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[type]);\n\n    // net::ParsedCookie::kMaxCookieSize = 4096 (net/cookies/parsed_cookie.h)\n    if ('set-cookie' in lowercaseHeaders && lowercaseHeaders['set-cookie'].length > 4096) {\n      const values = lowercaseHeaders['set-cookie'].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        if (values[i].length <= 4096) {\n          continue;\n        }\n        const message = Common.UIString.UIString(\n            'Set-Cookie header is ignored in response from url: %s. Cookie length should be less than or equal to 4096 characters.',\n            response.url);\n        this._manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n\n    this._updateNetworkRequestWithResponse(networkRequest, response);\n\n    this._updateNetworkRequest(networkRequest);\n    this._manager.dispatchEventToListeners(Events.ResponseReceived, {request: networkRequest, response});\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.DataReceivedEvent} request\n   */\n  dataReceived({requestId, timestamp, dataLength, encodedDataLength}) {\n    /** @type {?(!NetworkRequest|undefined)} */\n    let networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this._maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.resourceSize += dataLength;\n    if (encodedDataLength !== -1) {\n      networkRequest.increaseTransferSize(encodedDataLength);\n    }\n    networkRequest.endTime = timestamp;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.LoadingFinishedEvent} request\n   */\n  loadingFinished({requestId, timestamp: finishTime, encodedDataLength, shouldReportCorbBlocking}) {\n    /** @type {?(!NetworkRequest|undefined)} */\n    let networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this._maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    this._getExtraInfoBuilder(requestId).finished();\n    this._finishNetworkRequest(networkRequest, finishTime, encodedDataLength, shouldReportCorbBlocking);\n    this._manager.dispatchEventToListeners(Events.LoadingFinished, networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.LoadingFailedEvent} request\n   */\n  loadingFailed({\n    requestId,\n    timestamp: time,\n    type: resourceType,\n    errorText: localizedDescription,\n    canceled,\n    blockedReason,\n    corsErrorStatus\n  }) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.failed = true;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[resourceType]);\n    networkRequest.canceled = Boolean(canceled);\n    if (blockedReason) {\n      networkRequest.setBlockedReason(blockedReason);\n      if (blockedReason === Protocol.Network.BlockedReason.Inspector) {\n        const message = Common.UIString.UIString('Request was blocked by DevTools: \"%s\".', networkRequest.url());\n        this._manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n    if (corsErrorStatus) {\n      networkRequest.setCorsErrorStatus(corsErrorStatus);\n    }\n    networkRequest.localizedFailDescription = localizedDescription;\n    this._getExtraInfoBuilder(requestId).finished();\n    this._finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketCreatedEvent} request\n   */\n  webSocketCreated({requestId, url: requestURL, initiator}) {\n    const networkRequest = new NetworkRequest(requestId, requestURL, '', '', '', initiator || null);\n    requestToManagerMap.set(networkRequest, this._manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    this._startNetworkRequest(networkRequest, null);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketWillSendHandshakeRequestEvent} request\n   */\n  webSocketWillSendHandshakeRequest({requestId, timestamp: time, wallTime, request}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.requestMethod = 'GET';\n    networkRequest.setRequestHeaders(this._headersMapToHeadersArray(request.headers));\n    networkRequest.setIssueTime(time, wallTime);\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketHandshakeResponseReceivedEvent} request\n   */\n  webSocketHandshakeResponseReceived({requestId, timestamp: time, response}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    networkRequest.responseHeaders = this._headersMapToHeadersArray(response.headers);\n    networkRequest.responseHeadersText = response.headersText || '';\n    if (response.requestHeaders) {\n      networkRequest.setRequestHeaders(this._headersMapToHeadersArray(response.requestHeaders));\n    }\n    if (response.requestHeadersText) {\n      networkRequest.setRequestHeadersText(response.requestHeadersText);\n    }\n    networkRequest.responseReceivedTime = time;\n    networkRequest.protocol = 'websocket';\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketFrameReceivedEvent} request\n   */\n  webSocketFrameReceived({requestId, timestamp: time, response}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, false);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketFrameSentEvent} request\n   */\n  webSocketFrameSent({requestId, timestamp: time, response}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, true);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketFrameErrorEvent} request\n   */\n  webSocketFrameError({requestId, timestamp: time, errorMessage}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrameError(errorMessage, time);\n    networkRequest.responseReceivedTime = time;\n\n    this._updateNetworkRequest(networkRequest);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebSocketClosedEvent} request\n   */\n  webSocketClosed({requestId, timestamp: time}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    this._finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.EventSourceMessageReceivedEvent} request\n   */\n  eventSourceMessageReceived({requestId, timestamp: time, eventName, eventId, data}) {\n    const networkRequest = this._inflightRequestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addEventSourceMessage(time, eventName, eventId, data);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.RequestInterceptedEvent} request\n   */\n  requestIntercepted({\n    interceptionId,\n    request,\n    frameId,\n    resourceType,\n    isNavigationRequest,\n    isDownload,\n    redirectUrl,\n    authChallenge,\n    responseErrorReason,\n    responseStatusCode,\n    responseHeaders,\n    requestId\n  }) {\n    MultitargetNetworkManager.instance()._requestIntercepted(new InterceptedRequest(\n        this._manager.target().networkAgent(), interceptionId, request, frameId, resourceType, isNavigationRequest,\n        isDownload, redirectUrl, authChallenge, responseErrorReason, responseStatusCode, responseHeaders, requestId));\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.RequestWillBeSentExtraInfoEvent} request\n   */\n  requestWillBeSentExtraInfo({requestId, associatedCookies, headers, clientSecurityState}) {\n    /** @type {!Array<!BlockedCookieWithReason>} */\n    const blockedRequestCookies = [];\n    const includedRequestCookies = [];\n    for (const {blockedReasons, cookie} of associatedCookies) {\n      if (blockedReasons.length === 0) {\n        includedRequestCookies.push(Cookie.fromProtocolCookie(cookie));\n      } else {\n        blockedRequestCookies.push({blockedReasons, cookie: Cookie.fromProtocolCookie(cookie)});\n      }\n    }\n    const extraRequestInfo = {\n      blockedRequestCookies,\n      includedRequestCookies,\n      requestHeaders: this._headersMapToHeadersArray(headers),\n      clientSecurityState: clientSecurityState\n    };\n    this._getExtraInfoBuilder(requestId).addRequestExtraInfo(extraRequestInfo);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.ResponseReceivedExtraInfoEvent} request\n   */\n  responseReceivedExtraInfo({requestId, blockedCookies, headers, headersText}) {\n    /** @type {!ExtraResponseInfo} */\n    const extraResponseInfo = {\n      blockedResponseCookies: blockedCookies.map(blockedCookie => {\n        return {\n          blockedReasons: blockedCookie.blockedReasons,\n          cookieLine: blockedCookie.cookieLine,\n          cookie: blockedCookie.cookie ? Cookie.fromProtocolCookie(blockedCookie.cookie) : null\n        };\n      }),\n      responseHeaders: this._headersMapToHeadersArray(headers),\n      responseHeadersText: headersText\n    };\n    this._getExtraInfoBuilder(requestId).addResponseExtraInfo(extraResponseInfo);\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {!RedirectExtraInfoBuilder}\n   */\n  _getExtraInfoBuilder(requestId) {\n    /** @type {!RedirectExtraInfoBuilder} */\n    let builder;\n    if (!this._requestIdToRedirectExtraInfoBuilder.has(requestId)) {\n      const deleteCallback = () => {\n        this._requestIdToRedirectExtraInfoBuilder.delete(requestId);\n      };\n      builder = new RedirectExtraInfoBuilder(deleteCallback);\n      this._requestIdToRedirectExtraInfoBuilder.set(requestId, builder);\n    } else {\n      builder = /** @type {!RedirectExtraInfoBuilder} */ (this._requestIdToRedirectExtraInfoBuilder.get(requestId));\n    }\n    return builder;\n  }\n\n  /**\n   * @param {!Protocol.Network.RequestId} requestId\n   * @param {!Protocol.Network.MonotonicTime} time\n   * @param {string} redirectURL\n   * @return {!NetworkRequest}\n   */\n  _appendRedirect(requestId, time, redirectURL) {\n    const originalNetworkRequest = this._inflightRequestsById.get(requestId);\n    if (!originalNetworkRequest) {\n      throw new Error(`Could not find original network request for ${requestId}`);\n    }\n    let redirectCount = 0;\n    for (let redirect = originalNetworkRequest.redirectSource(); redirect; redirect = redirect.redirectSource()) {\n      redirectCount++;\n    }\n\n    originalNetworkRequest.markAsRedirect(redirectCount);\n    this._finishNetworkRequest(originalNetworkRequest, time, -1);\n    const newNetworkRequest = this._createNetworkRequest(\n        requestId, originalNetworkRequest.frameId, originalNetworkRequest.loaderId, redirectURL,\n        originalNetworkRequest.documentURL, originalNetworkRequest.initiator());\n    newNetworkRequest.setRedirectSource(originalNetworkRequest);\n    originalNetworkRequest.setRedirectDestination(newNetworkRequest);\n    return newNetworkRequest;\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {?NetworkRequest}\n   */\n  _maybeAdoptMainResourceRequest(requestId) {\n    const request = MultitargetNetworkManager.instance()._inflightMainResourceRequests.get(requestId);\n    if (!request) {\n      return null;\n    }\n    const oldDispatcher = /** @type {!NetworkManager} */ (NetworkManager.forRequest(request))._dispatcher;\n    oldDispatcher._inflightRequestsById.delete(requestId);\n    delete oldDispatcher._inflightRequestsByURL[request.url()];\n    this._inflightRequestsById.set(requestId, request);\n    this._inflightRequestsByURL[request.url()] = request;\n    requestToManagerMap.set(request, this._manager);\n    return request;\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   * @param {?Protocol.Network.Request} originalRequest\n   */\n  _startNetworkRequest(networkRequest, originalRequest) {\n    this._inflightRequestsById.set(networkRequest.requestId(), networkRequest);\n    this._inflightRequestsByURL[networkRequest.url()] = networkRequest;\n    // The following relies on the fact that loaderIds and requestIds are\n    // globally unique and that the main request has them equal.\n    if (networkRequest.loaderId === networkRequest.requestId()) {\n      MultitargetNetworkManager.instance()._inflightMainResourceRequests.set(\n          networkRequest.requestId(), networkRequest);\n    }\n\n    this._manager.dispatchEventToListeners(Events.RequestStarted, {request: networkRequest, originalRequest});\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   */\n  _updateNetworkRequest(networkRequest) {\n    this._manager.dispatchEventToListeners(Events.RequestUpdated, networkRequest);\n  }\n\n  /**\n   * @param {!NetworkRequest} networkRequest\n   * @param {!Protocol.Network.MonotonicTime} finishTime\n   * @param {number} encodedDataLength\n   * @param {boolean=} shouldReportCorbBlocking\n   */\n  _finishNetworkRequest(networkRequest, finishTime, encodedDataLength, shouldReportCorbBlocking) {\n    networkRequest.endTime = finishTime;\n    networkRequest.finished = true;\n    if (encodedDataLength >= 0) {\n      const redirectSource = networkRequest.redirectSource();\n      if (redirectSource && redirectSource.signedExchangeInfo()) {\n        networkRequest.setTransferSize(0);\n        redirectSource.setTransferSize(encodedDataLength);\n        this._updateNetworkRequest(redirectSource);\n      } else {\n        networkRequest.setTransferSize(encodedDataLength);\n      }\n    }\n    this._manager.dispatchEventToListeners(Events.RequestFinished, networkRequest);\n    this._inflightRequestsById.delete(networkRequest.requestId());\n    delete this._inflightRequestsByURL[networkRequest.url()];\n    MultitargetNetworkManager.instance()._inflightMainResourceRequests.delete(networkRequest.requestId());\n\n    if (shouldReportCorbBlocking) {\n      const message = Common.UIString.UIString(\n          'Cross-Origin Read Blocking (CORB) blocked cross-origin response %s with MIME type %s. See https://www.chromestatus.com/feature/5629709824032768 for more details.',\n          networkRequest.url(), networkRequest.mimeType);\n      this._manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: true});\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('monitoringXHREnabled').get() &&\n        networkRequest.resourceType().category() === Common.ResourceType.resourceCategories.XHR) {\n      let message;\n      const failedToLoad = networkRequest.failed || networkRequest.hasErrorStatusCode();\n      if (failedToLoad) {\n        message = Common.UIString.UIString(\n            '%s failed loading: %s \"%s\".', networkRequest.resourceType().title(), networkRequest.requestMethod,\n            networkRequest.url());\n      } else {\n        message = Common.UIString.UIString(\n            '%s finished loading: %s \"%s\".', networkRequest.resourceType().title(), networkRequest.requestMethod,\n            networkRequest.url());\n      }\n\n      this._manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: false});\n    }\n  }\n\n  /**\n   * @param {!Protocol.Network.RequestId} requestId\n   * @param {string} frameId\n   * @param {!Protocol.Network.LoaderId} loaderId\n   * @param {string} url\n   * @param {string} documentURL\n   * @param {?Protocol.Network.Initiator} initiator\n   */\n  _createNetworkRequest(requestId, frameId, loaderId, url, documentURL, initiator) {\n    const request = new NetworkRequest(requestId, url, documentURL, frameId, loaderId, initiator);\n    requestToManagerMap.set(request, this._manager);\n    return request;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebTransportCreatedEvent} request\n   */\n  webTransportCreated({transportId, url: requestURL, timestamp: time, initiator}) {\n    const networkRequest = new NetworkRequest(transportId, requestURL, '', '', '', initiator || null);\n    networkRequest.hasNetworkData = true;\n    requestToManagerMap.set(networkRequest, this._manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebTransport);\n    networkRequest.setIssueTime(time, 0);\n    // This dummy deltas are needed to show this request as being\n    // downloaded(blue) given typical WebTransport is kept for a while.\n    // TODO(yoichio): Add appropreate events to fix these dummy datas.\n    // TODO(yoichio): Add appropreate events to address abort cases.\n    networkRequest.responseReceivedTime = time + 0.001;\n    networkRequest.endTime = time + 0.002;\n    this._startNetworkRequest(networkRequest, null);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Network.WebTransportClosedEvent} request\n   */\n  webTransportClosed({transportId, timestamp: time}) {\n    const networkRequest = this._inflightRequestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.endTime = time;\n    this._finishNetworkRequest(networkRequest, time, 0);\n  }\n\n  /** @param {!Protocol.Network.TrustTokenOperationDoneEvent} event */\n  trustTokenOperationDone(event) {\n    const request = this._inflightRequestsById.get(event.requestId);\n    if (!request) {\n      this._requestIdToTrustTokenEvent.set(event.requestId, event);\n      return;\n    }\n    request.setTrustTokenOperationDoneEvent(event);\n  }\n}\n\n/**\n * @type {?MultitargetNetworkManager}\n */\nlet multiTargetNetworkManagerInstance;\n\n/**\n * @implements {SDKModelObserver<!NetworkManager>}\n */\nexport class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper {\n  constructor() {\n    super();\n    /** @type {string} */\n    this._userAgentOverride = '';\n    /** @type {?Protocol.Emulation.UserAgentMetadata} */\n    this._userAgentMetadataOverride = null;\n    /** @type {!Set<!ProtocolProxyApi.NetworkApi>} */\n    this._agents = new Set();\n    /** @type {!Map<string, !NetworkRequest>} */\n    this._inflightMainResourceRequests = new Map();\n    /** @type {!Conditions} */\n    this._networkConditions = NoThrottlingConditions;\n    /** @type {?Promise<void>} */\n    this._updatingInterceptionPatternsPromise = null;\n\n    // TODO(allada) Remove these and merge it with request interception.\n    this._blockingEnabledSetting = Common.Settings.Settings.instance().moduleSetting('requestBlockingEnabled');\n    this._blockedPatternsSetting = Common.Settings.Settings.instance().createSetting('networkBlockedPatterns', []);\n    /** @type {!Array<string>} */\n    this._effectiveBlockedURLs = [];\n    this._updateBlockedPatterns();\n\n    /** @type {!Platform.MapUtilities.Multimap<!RequestInterceptor, !InterceptionPattern>} */\n    this._urlsForRequestInterceptor = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().observeModels(NetworkManager, this);\n  }\n\n  /**\n   * @param {{forceNew: ?boolean}} opts\n   * @return {!MultitargetNetworkManager}\n   */\n  static instance(opts = {forceNew: null}) {\n    const {forceNew} = opts;\n    if (!multiTargetNetworkManagerInstance || forceNew) {\n      multiTargetNetworkManagerInstance = new MultitargetNetworkManager();\n    }\n\n    return multiTargetNetworkManagerInstance;\n  }\n\n  /**\n   * @return {string}\n   */\n  static getChromeVersion() {\n    const chromeRegex = new RegExp('(?:^|\\\\W)Chrome/(\\\\S+)');\n    const chromeMatch = navigator.userAgent.match(chromeRegex);\n    if (chromeMatch && chromeMatch.length > 1) {\n      return chromeMatch[1];\n    }\n    return '';\n  }\n\n\n  /**\n    * Generate a brand version list for Chrome, including some randomization\n    * to try to ensure proper parsing behavior. See\n    *\n    * https://wicg.github.io/ua-client-hints/#grease\n    *\n    * This implementation matches GenerateBrandVersionList() in\n    * chrome_content_browser_client.cc\n    * @param {number} seed\n    * @param {string} brand\n    * @param {string} majorVersion\n    *\n    * @return {!Array<!Protocol.Emulation.UserAgentBrandVersion>}\n    */\n  static _generateBrandVersionList(seed, brand, majorVersion) {\n    // Pick a stable permutation seeded by major version number. any values here\n    // and in order should be under three.\n    const orders = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]];\n    const permutation = seed % orders.length;\n    const order = orders[permutation];\n\n    const escapedChars = ['\\\\', '\\\"', ';'];\n    const greaseyBrand =\n        escapedChars[order[0]] + 'Not' + escapedChars[order[1]] + 'A' + escapedChars[order[2]] + 'Brand';\n\n    const greasey = {brand: greaseyBrand, version: '99'};\n    const chromium = {brand: 'Chromium', version: majorVersion};\n    const branded = {brand: brand, version: majorVersion};\n\n    const greasedBrandVersionList = /** @type {!Array<!Protocol.Emulation.UserAgentBrandVersion>} */ ([]);\n    greasedBrandVersionList[order[0]] = greasey;\n    greasedBrandVersionList[order[1]] = chromium;\n    greasedBrandVersionList[order[2]] = branded;\n    return greasedBrandVersionList;\n  }\n\n  /**\n   * @return {!Array<!Protocol.Emulation.UserAgentBrandVersion>}\n   */\n  static getChromeBrands() {\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      const majorVersion = chromeVersion.split('.', 1)[0];\n      return MultitargetNetworkManager._generateBrandVersionList(\n          Number.parseInt(majorVersion, 10), 'Google Chrome', majorVersion);\n    }\n    return [];\n  }\n\n  /**\n   * @param {string} uaString\n   * @return {string}\n   */\n  static patchUserAgentWithChromeVersion(uaString) {\n    // Patches Chrome/CriOS version from user agent (\"1.2.3.4\" when user agent is: \"Chrome/1.2.3.4\").\n    // Edge also contains an appVersion which should be patched to match the Chrome major version.\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      // \"1.2.3.4\" becomes \"1.0.100.0\"\n      const additionalAppVersion = chromeVersion.split('.', 1)[0] + '.0.100.0';\n      return Platform.StringUtilities.sprintf(uaString, chromeVersion, additionalAppVersion);\n    }\n    return uaString;\n  }\n\n  /**\n   * @override\n   * @param {!NetworkManager} networkManager\n   */\n  modelAdded(networkManager) {\n    const networkAgent = networkManager.target().networkAgent();\n    if (this._extraHeaders) {\n      networkAgent.invoke_setExtraHTTPHeaders({headers: this._extraHeaders});\n    }\n    if (this.currentUserAgent()) {\n      networkAgent.invoke_setUserAgentOverride(\n          {userAgent: this.currentUserAgent(), userAgentMetadata: this._userAgentMetadataOverride || undefined});\n    }\n    if (this._effectiveBlockedURLs.length) {\n      networkAgent.invoke_setBlockedURLs({urls: this._effectiveBlockedURLs});\n    }\n    if (this.isIntercepting()) {\n      networkAgent.invoke_setRequestInterception({patterns: this._urlsForRequestInterceptor.valuesArray()});\n    }\n    this._agents.add(networkAgent);\n    if (this.isThrottling()) {\n      this._updateNetworkConditions(networkAgent);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!NetworkManager} networkManager\n   */\n  modelRemoved(networkManager) {\n    for (const entry of this._inflightMainResourceRequests) {\n      const manager = NetworkManager.forRequest(/** @type {!NetworkRequest} */ (entry[1]));\n      if (manager !== networkManager) {\n        continue;\n      }\n      this._inflightMainResourceRequests.delete(/** @type {string} */ (entry[0]));\n    }\n    this._agents.delete(networkManager.target().networkAgent());\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isThrottling() {\n    return this._networkConditions.download >= 0 || this._networkConditions.upload >= 0 ||\n        this._networkConditions.latency > 0;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isOffline() {\n    return !this._networkConditions.download && !this._networkConditions.upload;\n  }\n\n  /**\n   * @param {!Conditions} conditions\n   */\n  setNetworkConditions(conditions) {\n    this._networkConditions = conditions;\n    for (const agent of this._agents) {\n      this._updateNetworkConditions(agent);\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ConditionsChanged);\n  }\n\n  /**\n   * @return {!Conditions}\n   */\n  networkConditions() {\n    return this._networkConditions;\n  }\n\n  /**\n   * @param {!ProtocolProxyApi.NetworkApi} networkAgent\n   */\n  _updateNetworkConditions(networkAgent) {\n    const conditions = this._networkConditions;\n    if (!this.isThrottling()) {\n      networkAgent.invoke_emulateNetworkConditions(\n          {offline: false, latency: 0, downloadThroughput: 0, uploadThroughput: 0});\n    } else {\n      networkAgent.invoke_emulateNetworkConditions({\n        offline: this.isOffline(),\n        latency: conditions.latency,\n        downloadThroughput: conditions.download < 0 ? 0 : conditions.download,\n        uploadThroughput: conditions.upload < 0 ? 0 : conditions.upload,\n        connectionType: NetworkManager._connectionType(conditions)\n      });\n    }\n  }\n\n  /**\n   * @param {!Protocol.Network.Headers} headers\n   */\n  setExtraHTTPHeaders(headers) {\n    this._extraHeaders = headers;\n    for (const agent of this._agents) {\n      agent.invoke_setExtraHTTPHeaders({headers: this._extraHeaders});\n    }\n  }\n\n  /**\n   * @return {string}\n   */\n  currentUserAgent() {\n    return this._customUserAgent ? this._customUserAgent : this._userAgentOverride;\n  }\n\n  _updateUserAgentOverride() {\n    const userAgent = this.currentUserAgent();\n    for (const agent of this._agents) {\n      agent.invoke_setUserAgentOverride(\n          {userAgent: userAgent, userAgentMetadata: this._userAgentMetadataOverride || undefined});\n    }\n  }\n\n  /**\n   * @param {string} userAgent\n   * @param {?Protocol.Emulation.UserAgentMetadata} userAgentMetadataOverride\n   */\n  setUserAgentOverride(userAgent, userAgentMetadataOverride) {\n    const uaChanged = (this._userAgentOverride !== userAgent);\n    this._userAgentOverride = userAgent;\n    if (!this._customUserAgent) {\n      this._userAgentMetadataOverride = userAgentMetadataOverride;\n      this._updateUserAgentOverride();\n    } else {\n      this._userAgentMetadataOverride = null;\n    }\n\n    if (uaChanged) {\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.UserAgentChanged);\n    }\n  }\n\n  /**\n   * @return {string}\n   */\n  userAgentOverride() {\n    return this._userAgentOverride;\n  }\n\n  /**\n   * @param {string} userAgent\n   */\n  setCustomUserAgentOverride(userAgent) {\n    this._customUserAgent = userAgent;\n    this._userAgentMetadataOverride = null;\n    this._updateUserAgentOverride();\n  }\n\n  // TODO(allada) Move all request blocking into interception and let view manage blocking.\n  /**\n   * @return {!Array<!BlockedPattern>}\n   */\n  blockedPatterns() {\n    return this._blockedPatternsSetting.get().slice();\n  }\n\n  /**\n   * @return {boolean}\n   */\n  blockingEnabled() {\n    return this._blockingEnabledSetting.get();\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isBlocking() {\n    return Boolean(this._effectiveBlockedURLs.length);\n  }\n\n  /**\n   * @param {!Array<!BlockedPattern>} patterns\n   */\n  setBlockedPatterns(patterns) {\n    this._blockedPatternsSetting.set(patterns);\n    this._updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  /**\n   * @param {boolean} enabled\n   */\n  setBlockingEnabled(enabled) {\n    if (this._blockingEnabledSetting.get() === enabled) {\n      return;\n    }\n    this._blockingEnabledSetting.set(enabled);\n    this._updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  _updateBlockedPatterns() {\n    const urls = [];\n    if (this._blockingEnabledSetting.get()) {\n      for (const pattern of this._blockedPatternsSetting.get()) {\n        if (pattern.enabled) {\n          urls.push(pattern.url);\n        }\n      }\n    }\n\n    if (!urls.length && !this._effectiveBlockedURLs.length) {\n      return;\n    }\n    this._effectiveBlockedURLs = urls;\n    for (const agent of this._agents) {\n      agent.invoke_setBlockedURLs({urls: this._effectiveBlockedURLs});\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isIntercepting() {\n    return Boolean(this._urlsForRequestInterceptor.size);\n  }\n\n  /**\n   * @param {!Array<!InterceptionPattern>} patterns\n   * @param {!RequestInterceptor} requestInterceptor\n   * @return {!Promise<void>}\n   */\n  setInterceptionHandlerForPatterns(patterns, requestInterceptor) {\n    // Note: requestInterceptors may recieve interception requests for patterns they did not subscribe to.\n    this._urlsForRequestInterceptor.deleteAll(requestInterceptor);\n    for (const newPattern of patterns) {\n      this._urlsForRequestInterceptor.set(requestInterceptor, newPattern);\n    }\n    return this._updateInterceptionPatternsOnNextTick();\n  }\n\n  /**\n   * @return {!Promise<void>}\n   */\n  _updateInterceptionPatternsOnNextTick() {\n    // This is used so we can register and unregister patterns in loops without sending lots of protocol messages.\n    if (!this._updatingInterceptionPatternsPromise) {\n      this._updatingInterceptionPatternsPromise = Promise.resolve().then(this._updateInterceptionPatterns.bind(this));\n    }\n    return this._updatingInterceptionPatternsPromise;\n  }\n\n  /**\n   * @return {!Promise<void>}\n   */\n  _updateInterceptionPatterns() {\n    if (!Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      Common.Settings.Settings.instance().moduleSetting('cacheDisabled').set(true);\n    }\n    this._updatingInterceptionPatternsPromise = null;\n    const promises = /** @type {!Array<!Promise<*>>} */ ([]);\n    for (const agent of this._agents) {\n      promises.push(agent.invoke_setRequestInterception({patterns: this._urlsForRequestInterceptor.valuesArray()}));\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.InterceptorsChanged);\n    return Promise.all(promises).then(values => Promise.resolve());\n  }\n\n  /**\n   * @param {!InterceptedRequest} interceptedRequest\n   */\n  async _requestIntercepted(interceptedRequest) {\n    for (const requestInterceptor of this._urlsForRequestInterceptor.keysArray()) {\n      await requestInterceptor(interceptedRequest);\n      if (interceptedRequest.hasResponded()) {\n        return;\n      }\n    }\n    if (!interceptedRequest.hasResponded()) {\n      interceptedRequest.continueRequestWithoutChange();\n    }\n  }\n\n  clearBrowserCache() {\n    for (const agent of this._agents) {\n      agent.invoke_clearBrowserCache();\n    }\n  }\n\n  clearBrowserCookies() {\n    for (const agent of this._agents) {\n      agent.invoke_clearBrowserCookies();\n    }\n  }\n\n  /**\n   * @param {string} origin\n   * @return {!Promise<!Array<string>>}\n   */\n  getCertificate(origin) {\n    const target = TargetManager.instance().mainTarget();\n    if (!target) {\n      return Promise.resolve([]);\n    }\n    return target.networkAgent().invoke_getCertificate({origin}).then(\n        certificate => (certificate && certificate.tableNames) || []);\n  }\n\n  /**\n   * @param {string} url\n   * @return {!Promise<!{success: boolean, content: string, errorDescription: !Host.ResourceLoader.LoadErrorDescription}>}\n   */\n  async loadResource(url) {\n    /** @type {!Object<string, string>} */\n    const headers = {};\n\n    const currentUserAgent = this.currentUserAgent();\n    if (currentUserAgent) {\n      headers['User-Agent'] = currentUserAgent;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('cacheDisabled').get()) {\n      headers['Cache-Control'] = 'no-cache';\n    }\n\n    return new Promise(\n        resolve => Host.ResourceLoader.load(url, headers, (success, _responseHeaders, content, errorDescription) => {\n          resolve({success, content, errorDescription});\n        }));\n  }\n}\n\n/** @enum {symbol} */\nMultitargetNetworkManager.Events = {\n  BlockedPatternsChanged: Symbol('BlockedPatternsChanged'),\n  ConditionsChanged: Symbol('ConditionsChanged'),\n  UserAgentChanged: Symbol('UserAgentChanged'),\n  InterceptorsChanged: Symbol('InterceptorsChanged')\n};\n\nexport class InterceptedRequest {\n  /**\n   * @param {!ProtocolProxyApi.NetworkApi} networkAgent\n   * @param {!Protocol.Network.InterceptionId} interceptionId\n   * @param {!Protocol.Network.Request} request\n   * @param {!Protocol.Page.FrameId} frameId\n   * @param {!Protocol.Network.ResourceType} resourceType\n   * @param {boolean} isNavigationRequest\n   * @param {boolean=} isDownload\n   * @param {string=} redirectUrl\n   * @param {!Protocol.Network.AuthChallenge=} authChallenge\n   * @param {!Protocol.Network.ErrorReason=} responseErrorReason\n   * @param {number=} responseStatusCode\n   * @param {!Protocol.Network.Headers=} responseHeaders\n   * @param {!Protocol.Network.RequestId=} requestId\n   */\n  constructor(\n      networkAgent, interceptionId, request, frameId, resourceType, isNavigationRequest, isDownload, redirectUrl,\n      authChallenge, responseErrorReason, responseStatusCode, responseHeaders, requestId) {\n    this._networkAgent = networkAgent;\n    this._interceptionId = interceptionId;\n    this._hasResponded = false;\n    this.request = request;\n    this.frameId = frameId;\n    this.resourceType = resourceType;\n    this.isNavigationRequest = isNavigationRequest;\n    this.isDownload = Boolean(isDownload);\n    this.redirectUrl = redirectUrl;\n    this.authChallenge = authChallenge;\n    this.responseErrorReason = responseErrorReason;\n    this.responseStatusCode = responseStatusCode;\n    this.responseHeaders = responseHeaders;\n    this.requestId = requestId;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasResponded() {\n    return this._hasResponded;\n  }\n\n  /**\n   * @param {!Blob} contentBlob\n   */\n  async continueRequestWithContent(contentBlob) {\n    this._hasResponded = true;\n    const headers = [\n      'HTTP/1.1 200 OK',\n      'Date: ' + (new Date()).toUTCString(),\n      'Server: Chrome Devtools Request Interceptor',\n      'Connection: closed',\n      'Content-Length: ' + contentBlob.size,\n      'Content-Type: ' + contentBlob.type || 'text/x-unknown',\n    ];\n    const encodedResponse = await blobToBase64(new Blob([headers.join('\\r\\n'), '\\r\\n\\r\\n', contentBlob]));\n    this._networkAgent.invoke_continueInterceptedRequest(\n        {interceptionId: this._interceptionId, rawResponse: encodedResponse});\n\n    /**\n     * @param {!Blob} blob\n     * @return {!Promise<string>}\n     */\n    async function blobToBase64(blob) {\n      const reader = new FileReader();\n      const fileContentsLoadedPromise = new Promise(resolve => {\n        reader.onloadend = resolve;\n      });\n      reader.readAsDataURL(blob);\n      await fileContentsLoadedPromise;\n      if (reader.error) {\n        console.error('Could not convert blob to base64.', reader.error);\n        return '';\n      }\n      const result = reader.result;\n      if (result === undefined || result === null || typeof result !== 'string') {\n        console.error('Could not convert blob to base64.');\n        return '';\n      }\n      return result.substring(result.indexOf(',') + 1);\n    }\n  }\n\n  continueRequestWithoutChange() {\n    console.assert(!this._hasResponded);\n    this._hasResponded = true;\n    this._networkAgent.invoke_continueInterceptedRequest({interceptionId: this._interceptionId});\n  }\n\n  /**\n   * @param {!Protocol.Network.ErrorReason} errorReason\n   */\n  continueRequestWithError(errorReason) {\n    console.assert(!this._hasResponded);\n    this._hasResponded = true;\n    this._networkAgent.invoke_continueInterceptedRequest({interceptionId: this._interceptionId, errorReason});\n  }\n\n  /**\n   * @return {!Promise<!ContentData>}\n   */\n  async responseBody() {\n    const response =\n        await this._networkAgent.invoke_getResponseBodyForInterception({interceptionId: this._interceptionId});\n    const error = response.getError() || null;\n    return {error: error, content: error ? null : response.body, encoded: response.base64Encoded};\n  }\n}\n\n/**\n * Helper class to match requests created from requestWillBeSent with\n * requestWillBeSentExtraInfo and responseReceivedExtraInfo when they have the\n * same requestId due to redirects.\n */\nclass RedirectExtraInfoBuilder {\n  /**\n   * @param {function():void} deleteCallback\n   */\n  constructor(deleteCallback) {\n    /** @type {!Array<!NetworkRequest>} */\n    this._requests = [];\n    /** @type {!Array<?ExtraRequestInfo>} */\n    this._requestExtraInfos = [];\n    /** @type {!Array<?ExtraResponseInfo>} */\n    this._responseExtraInfos = [];\n    /** @type {boolean} */\n    this._finished = false;\n    /** @type {boolean} */\n    this._hasExtraInfo = false;\n    /** @type {function():void} */\n    this._deleteCallback = deleteCallback;\n  }\n\n  /**\n   * @param {!NetworkRequest} req\n   */\n  addRequest(req) {\n    this._requests.push(req);\n    this._sync(this._requests.length - 1);\n  }\n\n  /**\n   * @param {!ExtraRequestInfo} info\n   */\n  addRequestExtraInfo(info) {\n    this._hasExtraInfo = true;\n    this._requestExtraInfos.push(info);\n    this._sync(this._requestExtraInfos.length - 1);\n  }\n\n  /**\n   * @param {!ExtraResponseInfo} info\n   */\n  addResponseExtraInfo(info) {\n    this._responseExtraInfos.push(info);\n    this._sync(this._responseExtraInfos.length - 1);\n  }\n\n  finished() {\n    this._finished = true;\n    this._deleteIfComplete();\n  }\n\n  /**\n   * @param {number} index\n   */\n  _sync(index) {\n    const req = this._requests[index];\n    if (!req) {\n      return;\n    }\n\n    const requestExtraInfo = this._requestExtraInfos[index];\n    if (requestExtraInfo) {\n      req.addExtraRequestInfo(requestExtraInfo);\n      this._requestExtraInfos[index] = null;\n    }\n\n    const responseExtraInfo = this._responseExtraInfos[index];\n    if (responseExtraInfo) {\n      req.addExtraResponseInfo(responseExtraInfo);\n      this._responseExtraInfos[index] = null;\n    }\n\n    this._deleteIfComplete();\n  }\n\n  _deleteIfComplete() {\n    if (!this._finished) {\n      return;\n    }\n\n    if (this._hasExtraInfo) {\n      // if we haven't gotten the last responseExtraInfo event, we have to wait for it.\n      const lastItem = this._requests[this._requests.length - 1];\n      if (lastItem && !lastItem.hasExtraResponseInfo()) {\n        return;\n      }\n    }\n\n    this._deleteCallback();\n  }\n}\n\nSDKModel.register(NetworkManager, Capability.Network, true);\n\n/**\n * @typedef {{\n  *   download: number,\n  *   upload: number,\n  *   latency: number,\n  *   title: string,\n  * }}\n  */\n// @ts-ignore typedef\nexport let Conditions;\n\n/** @typedef {{url: string, enabled: boolean}} */\n// @ts-ignore typedef\nexport let BlockedPattern;\n\n/** @typedef {{message: string, requestId: string, warning: boolean}} */\n// @ts-ignore typedef\nexport let Message;\n\n/** @typedef {!{urlPattern: string, interceptionStage: !Protocol.Network.InterceptionStage}} */\n// @ts-ignore typedef\nexport let InterceptionPattern;\n\n/** @typedef {!function(!InterceptedRequest):!Promise<void>} */\n// @ts-ignore typedef\nexport let RequestInterceptor;\n\n/** @typedef {!{url: string, frameId: string, loaderId: string, resourceType: Protocol.Network.ResourceType, mimeType: string, lastModified: ?Date}} */\n// @ts-ignore typedef\nexport let RequestUpdateDroppedEventData;\n"]}