{"version":3,"file":"MixedContentIssue.js","sourceRoot":"","sources":["../../../../../front_end/sdk/MixedContentIssue.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,EAAE,EAAC,MAAM,qBAAqB,CAAC,CAAE,iDAAiD;AAE1F,OAAO,EAAC,KAAK,EAAE,aAAa,EAAE,SAAS,EAA2B,MAAM,YAAY,CAAC,CAAE,qCAAqC;AAG5H,MAAM,OAAO,iBAAkB,SAAQ,KAAK;IAC1C;;;OAGG;IACH,YAAY,YAAY,EAAE,WAAW;QACnC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,eAAe,CAAC,gBAAgB;QACrC,OAAO,kBAAkB,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,gBAAgB,CAAC;IACtE,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC9B,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACrC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,aAAa;QACX,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,aAAa,CAAC,YAAY,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO;YACL,IAAI,EAAE,qCAAqC;YAC3C,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,SAAS,CAAC,cAAc;YACnC,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,wCAAwC,EAAE,SAAS,EAAE,EAAE,CAAA,0BAA0B,EAAC,CAAC;SACnG,CAAC;IACJ,CAAC;IAED;;MAEE;IACF,UAAU;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;CACF;AAED,mCAAmC;AACnC,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAAC;IACjC,CAAC,qBAAqB,EAAE,EAAE,CAAA,SAAS,CAAC;IACpC,CAAC,mCAAmC,EAAE,EAAE,CAAA,wBAAwB,CAAC;IACjE,CAAC,qBAAqB,EAAE,EAAE,CAAA,QAAQ,CAAC;CACpC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ls} from '../common/common.js';  // eslint-disable-line rulesdir/es_modules_import\n\nimport {Issue, IssueCategory, IssueKind, MarkdownIssueDescription} from './Issue.js';  // eslint-disable-line no-unused-vars\nimport {IssuesModel} from './IssuesModel.js';  // eslint-disable-line no-unused-vars\n\nexport class MixedContentIssue extends Issue {\n  /**\n   * @param {!Protocol.Audits.MixedContentIssueDetails} issueDetails\n   * @param {!IssuesModel} issuesModel\n   */\n  constructor(issueDetails, issuesModel) {\n    super(Protocol.Audits.InspectorIssueCode.MixedContentIssue, issuesModel);\n    this._issueDetails = issueDetails;\n  }\n\n  /**\n   * @param {string} resolutionStatus\n   * @returns {!string}\n   */\n  static translateStatus(resolutionStatus) {\n    return mixedContentStatus.get(resolutionStatus) || resolutionStatus;\n  }\n\n  /**\n   * @override\n   * @returns {!Iterable<Protocol.Audits.AffectedRequest>}\n   */\n  requests() {\n    if (this._issueDetails.request) {\n      return [this._issueDetails.request];\n    }\n    return [];\n  }\n\n  /**\n   * @override\n   * @returns {!Iterable<!Protocol.Audits.MixedContentIssueDetails>}\n   */\n  mixedContents() {\n    return [this._issueDetails];\n  }\n\n  /**\n   * @override\n   * @return {!IssueCategory}\n   */\n  getCategory() {\n    return IssueCategory.MixedContent;\n  }\n\n  /**\n   * @override\n   * @returns {!MarkdownIssueDescription}\n   */\n  getDescription() {\n    return {\n      file: 'issues/descriptions/mixedContent.md',\n      substitutions: undefined,\n      issueKind: IssueKind.BreakingChange,\n      links: [{link: 'https://web.dev/what-is-mixed-content/', linkTitle: ls`Preventing mixed content`}],\n    };\n  }\n\n  /**\n  * @override\n  */\n  primaryKey() {\n    return JSON.stringify(this._issueDetails);\n  }\n}\n\n/** @type {!Map<string, string>} */\nconst mixedContentStatus = new Map([\n  ['MixedContentBlocked', ls`blocked`],\n  ['MixedContentAutomaticallyUpgraded', ls`automatically upgraded`],\n  ['MixedContentWarning', ls`warned`],\n]);\n"]}