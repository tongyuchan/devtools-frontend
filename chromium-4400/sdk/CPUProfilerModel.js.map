{"version":3,"file":"CPUProfilerModel.js","sourceRoot":"","sources":["../../../../../front_end/sdk/CPUProfilerModel.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as Root from '../root/root.js';\n\nimport {DebuggerModel, Location} from './DebuggerModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';              // eslint-disable-line no-unused-vars\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @implements {ProtocolProxyApi.ProfilerDispatcher}\n */\nexport class CPUProfilerModel extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    this._isRecording = false;\n    this._nextAnonymousConsoleProfileNumber = 1;\n    this._anonymousConsoleProfileIdToTitle = new Map();\n    this._profilerAgent = target.profilerAgent();\n    /** @type {?function(number, string, !Array<!Protocol.Profiler.ScriptCoverage>):void} */\n    this._preciseCoverageDeltaUpdateCallback = null;\n    target.registerProfilerDispatcher(this);\n    this._profilerAgent.invoke_enable();\n    this._debuggerModel = /** @type {!DebuggerModel} */ (target.model(DebuggerModel));\n  }\n\n  /**\n   * @return {!RuntimeModel}\n   */\n  runtimeModel() {\n    return this._debuggerModel.runtimeModel();\n  }\n\n  /**\n   * @return {!DebuggerModel}\n   */\n  debuggerModel() {\n    return this._debuggerModel;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Profiler.ConsoleProfileStartedEvent} event\n   */\n  consoleProfileStarted({id, location, title}) {\n    if (!title) {\n      title = Common.UIString.UIString('Profile %d', this._nextAnonymousConsoleProfileNumber++);\n      this._anonymousConsoleProfileIdToTitle.set(id, title);\n    }\n    this._dispatchProfileEvent(Events.ConsoleProfileStarted, id, location, title);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Profiler.ConsoleProfileFinishedEvent} event\n   */\n  consoleProfileFinished({id, location, profile, title}) {\n    if (!title) {\n      title = this._anonymousConsoleProfileIdToTitle.get(id);\n      this._anonymousConsoleProfileIdToTitle.delete(id);\n    }\n    // Make sure ProfilesPanel is initialized and CPUProfileType is created.\n    Root.Runtime.Runtime.instance().loadModulePromise('profiler').then(() => {\n      this._dispatchProfileEvent(Events.ConsoleProfileFinished, id, location, title, profile);\n    });\n  }\n\n  /**\n   * @param {symbol} eventName\n   * @param {string} id\n   * @param {!Protocol.Debugger.Location} scriptLocation\n   * @param {string=} title\n   * @param {!Protocol.Profiler.Profile=} cpuProfile\n   */\n  _dispatchProfileEvent(eventName, id, scriptLocation, title, cpuProfile) {\n    const debuggerLocation = Location.fromPayload(this._debuggerModel, scriptLocation);\n    const globalId = this.target().id() + '.' + id;\n    const data = /** @type {!EventData} */ (\n        {id: globalId, scriptLocation: debuggerLocation, cpuProfile: cpuProfile, title: title, cpuProfilerModel: this});\n    this.dispatchEventToListeners(eventName, data);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isRecordingProfile() {\n    return this._isRecording;\n  }\n\n  /**\n   * @return {!Promise<?>}\n   */\n  startRecording() {\n    this._isRecording = true;\n    const intervalUs = 100;\n    this._profilerAgent.invoke_setSamplingInterval({interval: intervalUs});\n    return this._profilerAgent.invoke_start();\n  }\n\n  /**\n   * @return {!Promise<?Protocol.Profiler.Profile>}\n   */\n  stopRecording() {\n    this._isRecording = false;\n    return this._profilerAgent.invoke_stop().then(response => response.profile || null);\n  }\n\n  /**\n   * @param {boolean} jsCoveragePerBlock - Collect per Block coverage if `true`, per function coverage otherwise.\n   * @param {?function(number, string, !Array<!Protocol.Profiler.ScriptCoverage>):void} preciseCoverageDeltaUpdateCallback - Callback for coverage updates initiated from the back-end\n   * @return {!Promise<?>}\n   */\n  startPreciseCoverage(jsCoveragePerBlock, preciseCoverageDeltaUpdateCallback) {\n    const callCount = false;\n    this._preciseCoverageDeltaUpdateCallback = preciseCoverageDeltaUpdateCallback;\n    const allowUpdatesTriggeredByBackend = true;\n    return this._profilerAgent.invoke_startPreciseCoverage(\n        {callCount, detailed: jsCoveragePerBlock, allowTriggeredUpdates: allowUpdatesTriggeredByBackend});\n  }\n\n  /**\n   * @return {!Promise<{timestamp:number, coverage:!Array<!Protocol.Profiler.ScriptCoverage>}>}\n   */\n  async takePreciseCoverage() {\n    const r = await this._profilerAgent.invoke_takePreciseCoverage();\n    const timestamp = (r && r.timestamp) || 0;\n    const coverage = (r && r.result) || [];\n    return {timestamp, coverage};\n  }\n\n  /**\n   * @return {!Promise<?>}\n   */\n  stopPreciseCoverage() {\n    this._preciseCoverageDeltaUpdateCallback = null;\n    return this._profilerAgent.invoke_stopPreciseCoverage();\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Profiler.PreciseCoverageDeltaUpdateEvent} event\n   */\n  preciseCoverageDeltaUpdate({timestamp, occassion, result}) {\n    if (this._preciseCoverageDeltaUpdateCallback) {\n      this._preciseCoverageDeltaUpdateCallback(timestamp, occassion, result);\n    }\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  ConsoleProfileStarted: Symbol('ConsoleProfileStarted'),\n  ConsoleProfileFinished: Symbol('ConsoleProfileFinished')\n};\n\nSDKModel.register(CPUProfilerModel, Capability.JS, true);\n\n/** @typedef {!{id: string, scriptLocation: !Location, title: string, cpuProfile: (!Protocol.Profiler.Profile|undefined), cpuProfilerModel: !CPUProfilerModel}} */\n// @ts-ignore typedef\nexport let EventData;\n"]}