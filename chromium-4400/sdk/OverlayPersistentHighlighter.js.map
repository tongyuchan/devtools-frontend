{"version":3,"file":"OverlayPersistentHighlighter.js","sourceRoot":"","sources":["../../../../../front_end/sdk/OverlayPersistentHighlighter.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport {OverlayColorGenerator} from './OverlayColorGenerator.js';\n\nexport class OverlayPersistentHighlighter {\n  /**\n   * @param {!OverlayModel} model\n   * @param {boolean} flexEnabled\n   */\n  constructor(model, flexEnabled = true) {\n    this._model = model;\n\n    /** @type {!Map<number, !Protocol.Overlay.GridHighlightConfig>} */\n    this._gridHighlights = new Map();\n\n    /** @type {!Map<number, !Protocol.Overlay.FlexContainerHighlightConfig>} */\n    this._flexHighlights = new Map();\n\n    /** @type {!Map<number, !Common.Color.Color>} */\n    this._colors = new Map();\n\n    this._gridColorGenerator = new OverlayColorGenerator();\n    this._flexColorGenerator = new OverlayColorGenerator();\n    this._flexEnabled = flexEnabled;\n\n    /** @type {!Common.Settings.Setting<*>} */\n    this._showGridLineLabelsSetting = Common.Settings.Settings.instance().moduleSetting('showGridLineLabels');\n    this._showGridLineLabelsSetting.addChangeListener(this._onSettingChange, this);\n    /** @type {!Common.Settings.Setting<*>} */\n    this._extendGridLinesSetting = Common.Settings.Settings.instance().moduleSetting('extendGridLines');\n    this._extendGridLinesSetting.addChangeListener(this._onSettingChange, this);\n    /** @type {!Common.Settings.Setting<*>} */\n    this._showGridAreasSetting = Common.Settings.Settings.instance().moduleSetting('showGridAreas');\n    this._showGridAreasSetting.addChangeListener(this._onSettingChange, this);\n    /** @type {!Common.Settings.Setting<*>} */\n    this._showGridTrackSizesSetting = Common.Settings.Settings.instance().moduleSetting('showGridTrackSizes');\n    this._showGridTrackSizesSetting.addChangeListener(this._onSettingChange, this);\n  }\n\n  /**\n   * @private\n   */\n  _onSettingChange() {\n    this.resetOverlay();\n  }\n\n  /**\n   * @private\n   * @param {number} nodeId\n   * @return {!Protocol.Overlay.GridHighlightConfig}\n   */\n  _buildGridHighlightConfig(nodeId) {\n    const mainColor = this.colorOfGrid(nodeId);\n    const background = mainColor.setAlpha(0.1);\n    const gapBackground = mainColor.setAlpha(0.3);\n    const gapHatch = mainColor.setAlpha(0.8);\n\n    const showGridExtensionLines = /** @type {boolean} */ (this._extendGridLinesSetting.get());\n    const showPositiveLineNumbers = this._showGridLineLabelsSetting.get() === 'lineNumbers';\n    const showNegativeLineNumbers = showPositiveLineNumbers;\n    const showLineNames = this._showGridLineLabelsSetting.get() === 'lineNames';\n    return {\n      rowGapColor: gapBackground.toProtocolRGBA(),\n      rowHatchColor: gapHatch.toProtocolRGBA(),\n      columnGapColor: gapBackground.toProtocolRGBA(),\n      columnHatchColor: gapHatch.toProtocolRGBA(),\n      gridBorderColor: mainColor.toProtocolRGBA(),\n      gridBorderDash: false,\n      rowLineColor: mainColor.toProtocolRGBA(),\n      columnLineColor: mainColor.toProtocolRGBA(),\n      rowLineDash: true,\n      columnLineDash: true,\n      showGridExtensionLines,\n      showPositiveLineNumbers,\n      showNegativeLineNumbers,\n      showLineNames,\n      showAreaNames: /** @type {boolean} */ (this._showGridAreasSetting.get()),\n      showTrackSizes: /** @type {boolean} */ (this._showGridTrackSizesSetting.get()),\n      areaBorderColor: mainColor.toProtocolRGBA(),\n      gridBackgroundColor: background.toProtocolRGBA(),\n    };\n  }\n\n  /**\n   * @private\n   * @param {number} nodeId\n   * @return {!Protocol.Overlay.FlexContainerHighlightConfig}\n   */\n  _buildFlexContainerHighlightConfig(nodeId) {\n    const mainColor = this.colorOfFlex(nodeId);\n    return {\n      containerBorder: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      itemSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dotted},\n      lineSeparator: {color: mainColor.toProtocolRGBA(), pattern: Protocol.Overlay.LineStylePattern.Dashed},\n      mainDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()},\n      crossDistributedSpace: {hatchColor: mainColor.toProtocolRGBA()}\n    };\n  }\n\n  /**\n   * @param {number} nodeId\n   */\n  highlightGridInOverlay(nodeId) {\n    this._gridHighlights.set(nodeId, this._buildGridHighlightConfig(nodeId));\n    this._updateHighlightsInOverlay();\n  }\n\n  /**\n   * @param {number} nodeId\n   * @return {boolean}\n   */\n  isGridHighlighted(nodeId) {\n    return this._gridHighlights.has(nodeId);\n  }\n\n  /**\n   * @param {number} nodeId\n   * @return {!Common.Color.Color}\n   */\n  colorOfGrid(nodeId) {\n    let color = this._colors.get(nodeId);\n    if (!color) {\n      color = this._gridColorGenerator.next();\n      this._colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  /**\n   * @param {number} nodeId\n   * @param {!Common.Color.Color} color\n   */\n  setColorOfGrid(nodeId, color) {\n    this._colors.set(nodeId, color);\n  }\n\n  /**\n   * @param {number} nodeId\n   */\n  hideGridInOverlay(nodeId) {\n    if (this._gridHighlights.has(nodeId)) {\n      this._gridHighlights.delete(nodeId);\n      this._updateHighlightsInOverlay();\n    }\n  }\n\n  /**\n   * @param {number} nodeId\n   */\n  highlightFlexInOverlay(nodeId) {\n    this._flexHighlights.set(nodeId, this._buildFlexContainerHighlightConfig(nodeId));\n    this._updateHighlightsInOverlay();\n  }\n\n  /**\n   * @param {number} nodeId\n   * @return {boolean}\n   */\n  isFlexHighlighted(nodeId) {\n    return this._flexHighlights.has(nodeId);\n  }\n\n  /**\n   * @param {number} nodeId\n   * @return {!Common.Color.Color}\n   */\n  colorOfFlex(nodeId) {\n    let color = this._colors.get(nodeId);\n    if (!color) {\n      color = this._flexColorGenerator.next();\n      this._colors.set(nodeId, color);\n    }\n\n    return color;\n  }\n\n  /**\n   * @param {number} nodeId\n   * @param {!Common.Color.Color} color\n   */\n  setColorOfFlex(nodeId, color) {\n    this._colors.set(nodeId, color);\n  }\n\n  /**\n   * @param {number} nodeId\n   */\n  hideFlexInOverlay(nodeId) {\n    if (this._flexHighlights.has(nodeId)) {\n      this._flexHighlights.delete(nodeId);\n      this._updateHighlightsInOverlay();\n    }\n  }\n\n  hideAllInOverlay() {\n    this._flexHighlights.clear();\n    this._gridHighlights.clear();\n    this._updateHighlightsInOverlay();\n  }\n\n  refreshHighlights() {\n    const gridsNeedUpdate = this._updateHighlightsForDeletedNodes(this._gridHighlights);\n    const flexboxesNeedUpdate = this._updateHighlightsForDeletedNodes(this._flexHighlights);\n    if (flexboxesNeedUpdate || gridsNeedUpdate) {\n      this._updateHighlightsInOverlay();\n    }\n  }\n\n  /**\n   *\n   * @param {!Map<number, !Protocol.Overlay.GridHighlightConfig>|!Map<number, !Protocol.Overlay.FlexContainerHighlightConfig>} highlights\n   * @return {boolean} whether there were changes to highlights\n   */\n  _updateHighlightsForDeletedNodes(highlights) {\n    let needsUpdate = false;\n    for (const nodeId of highlights.keys()) {\n      if (this._model.getDOMModel().nodeForId(nodeId) === null) {\n        highlights.delete(nodeId);\n        needsUpdate = true;\n      }\n    }\n    return needsUpdate;\n  }\n\n  resetOverlay() {\n    for (const nodeId of this._gridHighlights.keys()) {\n      this._gridHighlights.set(nodeId, this._buildGridHighlightConfig(nodeId));\n    }\n    for (const nodeId of this._flexHighlights.keys()) {\n      this._flexHighlights.set(nodeId, this._buildFlexContainerHighlightConfig(nodeId));\n    }\n    this._updateHighlightsInOverlay();\n  }\n\n  /**\n   * @private\n   */\n  _updateHighlightsInOverlay() {\n    const hasNodesToHighlight = this._gridHighlights.size > 0 || this._flexHighlights.size > 0;\n    this._model.setShowViewportSizeOnResize(!hasNodesToHighlight);\n    this._updateGridHighlightsInOverlay();\n    this._updateFlexHighlightsInOverlay();\n  }\n\n  /**\n   * @private\n   */\n  _updateGridHighlightsInOverlay() {\n    const overlayModel = this._model;\n    const gridNodeHighlightConfigs = [];\n    for (const [nodeId, gridHighlightConfig] of this._gridHighlights.entries()) {\n      gridNodeHighlightConfigs.push({nodeId, gridHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowGridOverlays({gridNodeHighlightConfigs});\n  }\n\n  /**\n   * @private\n   */\n  _updateFlexHighlightsInOverlay() {\n    if (!this._flexEnabled) {\n      return;\n    }\n    const overlayModel = this._model;\n    const flexNodeHighlightConfigs = [];\n    for (const [nodeId, flexContainerHighlightConfig] of this._flexHighlights.entries()) {\n      flexNodeHighlightConfigs.push({nodeId, flexContainerHighlightConfig});\n    }\n    overlayModel.target().overlayAgent().invoke_setShowFlexOverlays({flexNodeHighlightConfigs});\n  }\n}\n\n/**\n * @interface\n */\nexport class DOMModel {\n  /**\n   * @param {number} nodeId\n   */\n  nodeForId(nodeId) {\n  }\n}\n/**\n * @interface\n */\nexport class OverlayAgent {\n  /**\n   *\n   * @param {!{gridNodeHighlightConfigs: !Array<!{nodeId: number, gridHighlightConfig: !Protocol.Overlay.GridHighlightConfig}>}} param\n   */\n  invoke_setShowGridOverlays(param) {\n  }\n\n  /**\n   *\n   * @param {!{flexNodeHighlightConfigs: !Array<!{nodeId: number, flexContainerHighlightConfig: !Protocol.Overlay.FlexContainerHighlightConfig}>}} param\n   */\n  invoke_setShowFlexOverlays(param) {\n  }\n}\n\n/**\n * @interface\n */\nexport class Target {\n  /**\n   * @return {!OverlayAgent}\n   */\n  overlayAgent() {\n    throw new Error('Not implemented');\n  }\n}\n\n/**\n * @interface\n */\nexport class OverlayModel {\n  /**\n   * @return {!DOMModel}\n   */\n  getDOMModel() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @return {!Target}\n   */\n  target() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setShowViewportSizeOnResize(value) {\n  }\n}\n"]}