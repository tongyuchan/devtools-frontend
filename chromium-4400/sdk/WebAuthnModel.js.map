{"version":3,"file":"WebAuthnModel.js","sourceRoot":"","sources":["../../../../../front_end/sdk/WebAuthnModel.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAS,MAAM,eAAe,CAAC,CAAE,qCAAqC;AAElG,MAAM,OAAO,aAAc,SAAQ,QAAQ;IACzC;;MAEE;IACF,YAAY,MAAM;QAChB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;IACvC,CAAC;IAED;;;OAGG;IACH,wBAAwB,CAAC,MAAM;QAC7B,IAAI,MAAM,EAAE;YACV,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CAAC,OAAO;QAC5B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,8BAA8B,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAC7E,OAAO,QAAQ,CAAC,eAAe,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,eAAe;QACvC,MAAM,IAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC,EAAC,eAAe,EAAC,CAAC,CAAC;IACzE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,8BAA8B,CAAC,eAAe,EAAE,OAAO;QAC3D,MAAM,IAAI,CAAC,MAAM,CAAC,qCAAqC,CAAC,EAAC,eAAe,EAAE,OAAO,EAAC,CAAC,CAAC;IACtF,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc,CAAC,eAAe;QAClC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC,eAAe,EAAC,CAAC,CAAC;QAC5E,OAAO,QAAQ,CAAC,WAAW,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,YAAY;QAClD,MAAM,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAC,eAAe,EAAE,YAAY,EAAC,CAAC,CAAC;IAC7E,CAAC;CACF;AAED,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\nexport class WebAuthnModel extends SDKModel {\n  /**\n  * @param {!Target} target\n  */\n  constructor(target) {\n    super(target);\n    this._agent = target.webAuthnAgent();\n  }\n\n  /**\n   * @param {boolean} enable\n   * @return {!Promise<!Object>}\n   */\n  setVirtualAuthEnvEnabled(enable) {\n    if (enable) {\n      return this._agent.invoke_enable();\n    }\n    return this._agent.invoke_disable();\n  }\n\n  /**\n   * @param {!Protocol.WebAuthn.VirtualAuthenticatorOptions} options\n   * @return {!Promise<!Protocol.WebAuthn.AuthenticatorId>}\n   */\n  async addAuthenticator(options) {\n    const response = await this._agent.invoke_addVirtualAuthenticator({options});\n    return response.authenticatorId;\n  }\n\n  /**\n   * @param {!Protocol.WebAuthn.AuthenticatorId} authenticatorId\n   */\n  async removeAuthenticator(authenticatorId) {\n    await this._agent.invoke_removeVirtualAuthenticator({authenticatorId});\n  }\n\n  /**\n   * @param {!Protocol.WebAuthn.AuthenticatorId} authenticatorId\n   * @param {boolean} enabled\n   */\n  async setAutomaticPresenceSimulation(authenticatorId, enabled) {\n    await this._agent.invoke_setAutomaticPresenceSimulation({authenticatorId, enabled});\n  }\n\n  /**\n   * @param {!Protocol.WebAuthn.AuthenticatorId} authenticatorId\n   * @return {!Promise<!Array<!Protocol.WebAuthn.Credential>>}\n   */\n  async getCredentials(authenticatorId) {\n    const response = await this._agent.invoke_getCredentials({authenticatorId});\n    return response.credentials;\n  }\n\n  /**\n   * @param {!Protocol.WebAuthn.AuthenticatorId} authenticatorId\n   * @param {string} credentialId\n   */\n  async removeCredential(authenticatorId, credentialId) {\n    await this._agent.invoke_removeCredential({authenticatorId, credentialId});\n  }\n}\n\nSDKModel.register(WebAuthnModel, Capability.WebAuthn, false);\n"]}