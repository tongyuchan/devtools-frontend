{"version":3,"file":"TracingManager.js","sourceRoot":"","sources":["../../../../../front_end/sdk/TracingManager.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\nimport {ObjectSnapshot} from './TracingModel.js';            // eslint-disable-line no-unused-vars\n\nexport class TracingManager extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    this._tracingAgent = target.tracingAgent();\n    target.registerTracingDispatcher(new TracingDispatcher(this));\n\n    /** @type {?TracingManagerClient} */\n    this._activeClient = null;\n    /** @type {?number} */\n    this._eventBufferSize = 0;\n    this._eventsRetrieved = 0;\n  }\n\n  /**\n   * @param {number=} usage\n   * @param {number=} eventCount\n   * @param {number=} percentFull\n   */\n  _bufferUsage(usage, eventCount, percentFull) {\n    this._eventBufferSize = eventCount === undefined ? null : eventCount;\n    if (this._activeClient) {\n      this._activeClient.tracingBufferUsage(usage || percentFull || 0);\n    }\n  }\n\n  /**\n   * @param {!Array.<!EventPayload>} events\n   */\n  _eventsCollected(events) {\n    if (!this._activeClient) {\n      return;\n    }\n    this._activeClient.traceEventsCollected(events);\n    this._eventsRetrieved += events.length;\n    if (!this._eventBufferSize) {\n      this._activeClient.eventsRetrievalProgress(0);\n      return;\n    }\n\n    if (this._eventsRetrieved > this._eventBufferSize) {\n      this._eventsRetrieved = this._eventBufferSize;\n    }\n    this._activeClient.eventsRetrievalProgress(this._eventsRetrieved / this._eventBufferSize);\n  }\n\n  _tracingComplete() {\n    this._eventBufferSize = 0;\n    this._eventsRetrieved = 0;\n    if (this._activeClient) {\n      this._activeClient.tracingComplete();\n      this._activeClient = null;\n    }\n    this._finishing = false;\n  }\n\n  // TODO(petermarshall): Use the traceConfig argument instead of deprecated\n  // categories + options.\n  /**\n   * @param {!TracingManagerClient} client\n   * @param {string} categoryFilter\n   * @param {string} options\n   * @return {!Promise<!Object>}\n   */\n  async start(client, categoryFilter, options) {\n    if (this._activeClient) {\n      throw new Error('Tracing is already started');\n    }\n    const bufferUsageReportingIntervalMs = 500;\n    this._activeClient = client;\n    const args = {\n      bufferUsageReportingInterval: bufferUsageReportingIntervalMs,\n      categories: categoryFilter,\n      options: options,\n      transferMode: Protocol.Tracing.StartRequestTransferMode.ReportEvents,\n    };\n    const response = await this._tracingAgent.invoke_start(args);\n    if (response.getError()) {\n      this._activeClient = null;\n    }\n    return response;\n  }\n\n  stop() {\n    if (!this._activeClient) {\n      throw new Error('Tracing is not started');\n    }\n    if (this._finishing) {\n      throw new Error('Tracing is already being stopped');\n    }\n    this._finishing = true;\n    this._tracingAgent.invoke_end();\n  }\n}\n\n/**\n * @interface\n */\nexport class TracingManagerClient {\n  /**\n   * @param {!Array.<!EventPayload>} events\n   */\n  traceEventsCollected(events) {\n  }\n\n  tracingComplete() {\n  }\n  /**\n   * @param {number} usage\n   */\n  tracingBufferUsage(usage) {\n  }\n  /**\n   * @param {number} progress\n   */\n  eventsRetrievalProgress(progress) {\n  }\n}\n\n/**\n * @implements {ProtocolProxyApi.TracingDispatcher}\n */\nclass TracingDispatcher {\n  /**\n   * @param {!TracingManager} tracingManager\n   */\n  constructor(tracingManager) {\n    this._tracingManager = tracingManager;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Tracing.BufferUsageEvent} event\n   */\n  bufferUsage({value, eventCount, percentFull}) {\n    this._tracingManager._bufferUsage(value, eventCount, percentFull);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Tracing.DataCollectedEvent} event\n   */\n  dataCollected({value}) {\n    this._tracingManager._eventsCollected(value);\n  }\n\n  /**\n   * @override\n   */\n  tracingComplete() {\n    this._tracingManager._tracingComplete();\n  }\n}\n\nSDKModel.register(TracingManager, Capability.Tracing, false);\n\n/** @typedef {!{\n        cat: (string|undefined),\n        pid: number,\n        tid: number,\n        ts: number,\n        ph: string,\n        name: string,\n        args: !{\n          sort_index: number,\n          name: string,\n          snapshot: ObjectSnapshot,\n          data: ?Object\n        },\n        dur: number,\n        id: string,\n        id2: (!{global: (string|undefined), local: (string|undefined)}|undefined),\n        scope: string,\n        bind_id: string,\n        s: string\n    }}\n */\n// @ts-ignore typedef\nexport let EventPayload;\n"]}