{"version":3,"file":"ServiceWorkerManager.js","sourceRoot":"","sources":["../../../../../front_end/sdk/ServiceWorkerManager.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\n\nimport {ls} from '../platform/platform.js';\n\nimport {Events as RuntimeModelEvents, ExecutionContext, RuntimeModel} from './RuntimeModel.js';  // eslint-disable-line no-unused-vars\nimport {Capability, SDKModel, Target, TargetManager, Type} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\nexport class ServiceWorkerManager extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    target.registerServiceWorkerDispatcher(new ServiceWorkerDispatcher(this));\n    this._lastAnonymousTargetId = 0;\n    this._agent = target.serviceWorkerAgent();\n    /** @type {!Map.<string, !ServiceWorkerRegistration>} */\n    this._registrations = new Map();\n    /** @type {boolean} */\n    this._enabled = false;\n    this.enable();\n    /** @type {!Common.Settings.Setting<boolean>} */\n    this._forceUpdateSetting = Common.Settings.Settings.instance().createSetting('serviceWorkerUpdateOnReload', false);\n    if (this._forceUpdateSetting.get()) {\n      this._forceUpdateSettingChanged();\n    }\n    this._forceUpdateSetting.addChangeListener(this._forceUpdateSettingChanged, this);\n    new ServiceWorkerContextNamer(target, this);\n\n    /** Status of service worker network requests panel */\n    this.serviceWorkerNetworkRequestsPanelStatus = {\n      isOpen: false,\n      openedAt: 0,\n    };\n  }\n\n  async enable() {\n    if (this._enabled) {\n      return;\n    }\n    this._enabled = true;\n    await this._agent.invoke_enable();\n  }\n\n  async disable() {\n    if (!this._enabled) {\n      return;\n    }\n    this._enabled = false;\n    this._registrations.clear();\n    await this._agent.invoke_enable();\n  }\n\n  /**\n   * @return {!Map.<string, !ServiceWorkerRegistration>}\n   */\n  registrations() {\n    return this._registrations;\n  }\n\n  /**\n   * @param {!Array<string>} urls\n   * @return {boolean}\n   */\n  hasRegistrationForURLs(urls) {\n    for (const registration of this._registrations.values()) {\n      if (urls.filter(url => url && url.startsWith(registration.scopeURL)).length === urls.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {string} versionId\n   * @return {?ServiceWorkerVersion}\n   */\n  findVersion(versionId) {\n    for (const registration of this.registrations().values()) {\n      const version = registration.versions.get(versionId);\n      if (version) {\n        return version;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} registrationId\n   */\n  deleteRegistration(registrationId) {\n    const registration = this._registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    if (registration._isRedundant()) {\n      this._registrations.delete(registrationId);\n      this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      return;\n    }\n    registration._deleting = true;\n    for (const version of registration.versions.values()) {\n      this.stopWorker(version.id);\n    }\n    this._unregister(registration.scopeURL);\n  }\n\n  /**\n   * @param {string} registrationId\n   */\n  async updateRegistration(registrationId) {\n    const registration = this._registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    await this._agent.invoke_updateRegistration({scopeURL: registration.scopeURL});\n  }\n\n  /**\n   * @param {string} registrationId\n   * @param {string} data\n   */\n  async deliverPushMessage(registrationId, data) {\n    const registration = this._registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this._agent.invoke_deliverPushMessage({origin, registrationId, data});\n  }\n\n  /**\n   * @param {string} registrationId\n   * @param {string} tag\n   * @param {boolean} lastChance\n   */\n  async dispatchSyncEvent(registrationId, tag, lastChance) {\n    const registration = this._registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this._agent.invoke_dispatchSyncEvent({origin, registrationId, tag, lastChance});\n  }\n\n  /**\n   * @param {string} registrationId\n   * @param {string} tag\n   */\n  async dispatchPeriodicSyncEvent(registrationId, tag) {\n    const registration = this._registrations.get(registrationId);\n    if (!registration) {\n      return;\n    }\n    const origin = Common.ParsedURL.ParsedURL.extractOrigin(registration.scopeURL);\n    await this._agent.invoke_dispatchPeriodicSyncEvent({origin, registrationId, tag});\n  }\n\n  /**\n   * @param {string} scopeURL\n   */\n  async _unregister(scopeURL) {\n    await this._agent.invoke_unregister({scopeURL});\n  }\n\n  /**\n   * @param {string} scopeURL\n   */\n  async startWorker(scopeURL) {\n    await this._agent.invoke_startWorker({scopeURL});\n  }\n\n  /**\n   * @param {string} scopeURL\n   */\n  async skipWaiting(scopeURL) {\n    await this._agent.invoke_skipWaiting({scopeURL});\n  }\n\n  /**\n   * @param {string} versionId\n   */\n  async stopWorker(versionId) {\n    await this._agent.invoke_stopWorker({versionId});\n  }\n\n  /**\n   * @param {string} versionId\n   */\n  async inspectWorker(versionId) {\n    await this._agent.invoke_inspectWorker({versionId});\n  }\n\n  /**\n   * @param {!Array.<!Protocol.ServiceWorker.ServiceWorkerRegistration>} registrations\n   */\n  _workerRegistrationUpdated(registrations) {\n    for (const payload of registrations) {\n      let registration = this._registrations.get(payload.registrationId);\n      if (!registration) {\n        registration = new ServiceWorkerRegistration(payload);\n        this._registrations.set(payload.registrationId, registration);\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n        continue;\n      }\n      registration._update(payload);\n\n      if (registration._shouldBeRemoved()) {\n        this._registrations.delete(registration.id);\n        this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      } else {\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array.<!Protocol.ServiceWorker.ServiceWorkerVersion>} versions\n   */\n  _workerVersionUpdated(versions) {\n    /** @type {!Set.<!ServiceWorkerRegistration>} */\n    const registrations = new Set();\n    for (const payload of versions) {\n      const registration = this._registrations.get(payload.registrationId);\n      if (!registration) {\n        continue;\n      }\n      registration._updateVersion(payload);\n      registrations.add(registration);\n    }\n    for (const registration of registrations) {\n      if (registration._shouldBeRemoved()) {\n        this._registrations.delete(registration.id);\n        this.dispatchEventToListeners(Events.RegistrationDeleted, registration);\n      } else {\n        this.dispatchEventToListeners(Events.RegistrationUpdated, registration);\n      }\n    }\n  }\n\n  /**\n   * @param {!Protocol.ServiceWorker.ServiceWorkerErrorMessage} payload\n   */\n  _workerErrorReported(payload) {\n    const registration = this._registrations.get(payload.registrationId);\n    if (!registration) {\n      return;\n    }\n    registration.errors.push(payload);\n    this.dispatchEventToListeners(Events.RegistrationErrorAdded, {registration: registration, error: payload});\n  }\n\n  /**\n   * @return {!Common.Settings.Setting<boolean>}\n   */\n  forceUpdateOnReloadSetting() {\n    return this._forceUpdateSetting;\n  }\n\n  _forceUpdateSettingChanged() {\n    const forceUpdateOnPageLoad = this._forceUpdateSetting.get();\n    this._agent.invoke_setForceUpdateOnPageLoad({forceUpdateOnPageLoad});\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  RegistrationUpdated: Symbol('RegistrationUpdated'),\n  RegistrationErrorAdded: Symbol('RegistrationErrorAdded'),\n  RegistrationDeleted: Symbol('RegistrationDeleted')\n};\n\n/**\n * @implements {ProtocolProxyApi.ServiceWorkerDispatcher}\n */\nclass ServiceWorkerDispatcher {\n  /**\n   * @param {!ServiceWorkerManager} manager\n   */\n  constructor(manager) {\n    this._manager = manager;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.ServiceWorker.WorkerRegistrationUpdatedEvent} event\n   */\n  workerRegistrationUpdated({registrations}) {\n    this._manager._workerRegistrationUpdated(registrations);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.ServiceWorker.WorkerVersionUpdatedEvent} event\n   */\n  workerVersionUpdated({versions}) {\n    this._manager._workerVersionUpdated(versions);\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.ServiceWorker.WorkerErrorReportedEvent} event\n   */\n  workerErrorReported({errorMessage}) {\n    this._manager._workerErrorReported(errorMessage);\n  }\n}\n\n/**\n * For every version, we keep a history of ServiceWorkerVersionState. Every time\n * a version is updated we will add a new state at the head of the history chain.\n * This history tells us information such as what the current state is, or when\n * the version becomes installed.\n */\nexport class ServiceWorkerVersionState {\n  /**\n   *\n   * @param {!Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus} runningStatus\n   * @param {!Protocol.ServiceWorker.ServiceWorkerVersionStatus} status\n   * @param {?ServiceWorkerVersionState} previousState\n   * @param {number} timestamp\n   */\n  constructor(runningStatus, status, previousState, timestamp) {\n    this.runningStatus = runningStatus;\n    this.status = status;\n    /** @type {number} */\n    this.last_updated_timestamp = timestamp;\n    this.previousState = previousState;\n  }\n}\n\nexport class ServiceWorkerVersion {\n  /**\n   * @param {!ServiceWorkerRegistration} registration\n   * @param {!Protocol.ServiceWorker.ServiceWorkerVersion} payload\n   */\n  constructor(registration, payload) {\n    /** @type {string} */ this.id;\n    /** @type {string} */ this.scriptURL;\n    /** @type {!Common.ParsedURL.ParsedURL} */ this.parsedURL;\n    /** @type {string} */ this.securityOrigin;\n    /** @type {number|undefined} */ this.scriptLastModified;\n    /** @type {number|undefined} */ this.scriptResponseTime;\n    /** @type {!Array<!Protocol.Target.TargetID>} */ this.controlledClients;\n    /** @type {?Protocol.Target.TargetID} */ this.targetId;\n    /** @type {!ServiceWorkerVersionState} */ this.currentState;\n    this.registration = registration;\n    this._update(payload);\n  }\n\n  /**\n   * @param {!Protocol.ServiceWorker.ServiceWorkerVersion} payload\n   */\n  _update(payload) {\n    this.id = payload.versionId;\n    this.scriptURL = payload.scriptURL;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scriptURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.currentState =\n        new ServiceWorkerVersionState(payload.runningStatus, payload.status, this.currentState, Date.now());\n    this.scriptLastModified = payload.scriptLastModified;\n    this.scriptResponseTime = payload.scriptResponseTime;\n    if (payload.controlledClients) {\n      this.controlledClients = payload.controlledClients.slice();\n    } else {\n      this.controlledClients = [];\n    }\n    this.targetId = payload.targetId || null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isStartable() {\n    return !this.registration.isDeleted && this.isActivated() && this.isStopped();\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isStoppedAndRedundant() {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped &&\n        this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isStopped() {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isStarting() {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isRunning() {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isStopping() {\n    return this.runningStatus === Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isNew() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isInstalling() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isInstalled() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isActivating() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isActivated() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isRedundant() {\n    return this.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant;\n  }\n\n  /**\n   * @returns {!Protocol.ServiceWorker.ServiceWorkerVersionStatus}\n   */\n  get status() {\n    return this.currentState.status;\n  }\n\n  /**\n   * @returns {!Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus}\n   */\n  get runningStatus() {\n    return this.currentState.runningStatus;\n  }\n\n  /**\n   * @return {string}\n   */\n  mode() {\n    if (this.isNew() || this.isInstalling()) {\n      return ServiceWorkerVersion.Modes.Installing;\n    }\n    if (this.isInstalled()) {\n      return ServiceWorkerVersion.Modes.Waiting;\n    }\n    if (this.isActivating() || this.isActivated()) {\n      return ServiceWorkerVersion.Modes.Active;\n    }\n    return ServiceWorkerVersion.Modes.Redundant;\n  }\n}\n\n/**\n * @type {!Object<string, string>}\n */\nServiceWorkerVersion.RunningStatus = {\n  [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running]: ls`running`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting]: ls`starting`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopped]: ls`stopped`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Stopping]: ls`stopping`,\n};\n\n/**\n * @type {!Object<string, string>}\n */\nServiceWorkerVersion.Status = {\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated]: ls`activated`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating]: ls`activating`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed]: ls`installed`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing]: ls`installing`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.New]: ls`new`,\n  [Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant]: ls`redundant`,\n};\n\n/**\n * @enum {string}\n */\nServiceWorkerVersion.Modes = {\n  Installing: 'installing',\n  Waiting: 'waiting',\n  Active: 'active',\n  Redundant: 'redundant'\n};\n\nexport class ServiceWorkerRegistration {\n  /**\n   * @param {!Protocol.ServiceWorker.ServiceWorkerRegistration} payload\n   */\n  constructor(payload) {\n    /** @type {symbol} */ this._fingerprint;\n    /** @type {string} */ this.id;\n    /** @type {string} */ this.scopeURL;\n    /** @type {string} */ this.securityOrigin;\n    /** @type {boolean} */ this.isDeleted;\n    this._update(payload);\n    /** @type {!Map.<string, !ServiceWorkerVersion>} */\n    this.versions = new Map();\n    this._deleting = false;\n    /** @type {!Array<!Protocol.ServiceWorker.ServiceWorkerErrorMessage>} */\n    this.errors = [];\n  }\n\n  /**\n   * @param {!Protocol.ServiceWorker.ServiceWorkerRegistration} payload\n   */\n  _update(payload) {\n    this._fingerprint = Symbol('fingerprint');\n    this.id = payload.registrationId;\n    this.scopeURL = payload.scopeURL;\n    const parsedURL = new Common.ParsedURL.ParsedURL(payload.scopeURL);\n    this.securityOrigin = parsedURL.securityOrigin();\n    this.isDeleted = payload.isDeleted;\n  }\n\n  /**\n   * @return {symbol}\n   */\n  fingerprint() {\n    return this._fingerprint;\n  }\n\n  /**\n   * @return {!Map<string, !ServiceWorkerVersion>}\n   */\n  versionsByMode() {\n    /** @type {!Map<string, !ServiceWorkerVersion>} */\n    const result = new Map();\n    for (const version of this.versions.values()) {\n      result.set(version.mode(), version);\n    }\n    return result;\n  }\n\n  /**\n   * @param {!Protocol.ServiceWorker.ServiceWorkerVersion} payload\n   * @return {!ServiceWorkerVersion}\n   */\n  _updateVersion(payload) {\n    this._fingerprint = Symbol('fingerprint');\n    let version = this.versions.get(payload.versionId);\n    if (!version) {\n      version = new ServiceWorkerVersion(this, payload);\n      this.versions.set(payload.versionId, version);\n      return version;\n    }\n    version._update(payload);\n    return version;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  _isRedundant() {\n    for (const version of this.versions.values()) {\n      if (!version.isStoppedAndRedundant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  _shouldBeRemoved() {\n    return this._isRedundant() && (!this.errors.length || this._deleting);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  canBeRemoved() {\n    return this.isDeleted || this._deleting;\n  }\n\n\n  clearErrors() {\n    this._fingerprint = Symbol('fingerprint');\n    this.errors = [];\n  }\n}\n\nclass ServiceWorkerContextNamer {\n  /**\n   * @param {!Target} target\n   * @param {!ServiceWorkerManager} serviceWorkerManager\n   */\n  constructor(target, serviceWorkerManager) {\n    this._target = target;\n    this._serviceWorkerManager = serviceWorkerManager;\n    /** @type {!Map<string, !ServiceWorkerVersion>} */\n    this._versionByTargetId = new Map();\n    serviceWorkerManager.addEventListener(Events.RegistrationUpdated, this._registrationsUpdated, this);\n    serviceWorkerManager.addEventListener(Events.RegistrationDeleted, this._registrationsUpdated, this);\n    TargetManager.instance().addModelListener(\n        RuntimeModel, RuntimeModelEvents.ExecutionContextCreated, this._executionContextCreated, this);\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _registrationsUpdated(event) {\n    this._versionByTargetId.clear();\n    const registrations = this._serviceWorkerManager.registrations().values();\n    for (const registration of registrations) {\n      for (const version of registration.versions.values()) {\n        if (version.targetId) {\n          this._versionByTargetId.set(version.targetId, version);\n        }\n      }\n    }\n    this._updateAllContextLabels();\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _executionContextCreated(event) {\n    const executionContext = /** @type {!ExecutionContext} */ (event.data);\n    const serviceWorkerTargetId = this._serviceWorkerTargetId(executionContext.target());\n    if (!serviceWorkerTargetId) {\n      return;\n    }\n    this._updateContextLabel(executionContext, this._versionByTargetId.get(serviceWorkerTargetId) || null);\n  }\n\n  /**\n   * @param {!Target} target\n   * @return {?string}\n   */\n  _serviceWorkerTargetId(target) {\n    if (target.parentTarget() !== this._target || target.type() !== Type.ServiceWorker) {\n      return null;\n    }\n    return target.id();\n  }\n\n  _updateAllContextLabels() {\n    for (const target of TargetManager.instance().targets()) {\n      const serviceWorkerTargetId = this._serviceWorkerTargetId(target);\n      if (!serviceWorkerTargetId) {\n        continue;\n      }\n      const version = this._versionByTargetId.get(serviceWorkerTargetId) || null;\n      const runtimeModel = target.model(RuntimeModel);\n      const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n      for (const context of executionContexts) {\n        this._updateContextLabel(context, version);\n      }\n    }\n  }\n\n  /**\n   * @param {!ExecutionContext} context\n   * @param {?ServiceWorkerVersion} version\n   */\n  _updateContextLabel(context, version) {\n    if (!version) {\n      context.setLabel('');\n      return;\n    }\n    const parsedUrl = Common.ParsedURL.ParsedURL.fromString(context.origin);\n    const label = parsedUrl ? parsedUrl.lastPathComponentWithFragment() : context.name;\n    const localizedStatus = ServiceWorkerVersion.Status[version.status];\n    context.setLabel(ls`${label} #${version.id} (${localizedStatus})`);\n  }\n}\n\nSDKModel.register(ServiceWorkerManager, Capability.ServiceWorker, true);\n"]}