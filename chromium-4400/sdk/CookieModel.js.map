{"version":3,"file":"CookieModel.js","sourceRoot":"","sources":["../../../../../front_end/sdk/CookieModel.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport {Attributes, Cookie} from './Cookie.js';  // eslint-disable-line no-unused-vars\nimport {Resource} from './Resource.js';          // eslint-disable-line no-unused-vars\nimport {ResourceTreeModel} from './ResourceTreeModel.js';\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\nexport class CookieModel extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n\n    /** Array<!Cookie> */\n    this._blockedCookies = new Map();\n    this._cookieToBlockedReasons = new Map();\n  }\n\n  /**\n   * @param {!Cookie} cookie\n   * @param {?Array<!BlockedReason>} blockedReasons\n   */\n  addBlockedCookie(cookie, blockedReasons) {\n    const key = cookie.key();\n    const previousCookie = this._blockedCookies.get(key);\n    this._blockedCookies.set(key, cookie);\n    this._cookieToBlockedReasons.set(cookie, blockedReasons);\n    if (previousCookie) {\n      this._cookieToBlockedReasons.delete(key);\n    }\n  }\n\n  getCookieToBlockedReasonsMap() {\n    return this._cookieToBlockedReasons;\n  }\n\n  /**\n   * @param {!Array<string>} urls\n   * @return {!Promise<!Array<!Cookie>>}\n   */\n  async getCookies(urls) {\n    const response = await this.target().networkAgent().invoke_getCookies({urls});\n    if (response.getError()) {\n      return [];\n    }\n    const normalCookies = response.cookies.map(Cookie.fromProtocolCookie);\n    return normalCookies.concat(Array.from(this._blockedCookies.values()));\n  }\n\n  /**\n   * @param {!Cookie} cookie\n   * @return {!Promise<void>}\n   */\n  async deleteCookie(cookie) {\n    await this.deleteCookies([cookie]);\n  }\n\n  /**\n   * @param {string=} domain\n   * @param {string=} securityOrigin\n   * @return {!Promise<void>}\n   */\n  async clear(domain, securityOrigin) {\n    const cookies = await this.getCookiesForDomain(domain || null);\n    if (securityOrigin) {\n      const cookiesToDelete = cookies.filter(cookie => {\n        return securityOrigin.endsWith(cookie.domain());\n      });\n      await this.deleteCookies(cookiesToDelete);\n    } else {\n      await this.deleteCookies(cookies);\n    }\n  }\n\n  /**\n   * @param {!Cookie} cookie\n   * @return {!Promise<boolean>}\n   */\n  async saveCookie(cookie) {\n    let domain = cookie.domain();\n    if (!domain.startsWith('.')) {\n      domain = '';\n    }\n    let expires = undefined;\n    if (cookie.expires()) {\n      expires = Math.floor(Date.parse(`${cookie.expires()}`) / 1000);\n    }\n    const protocolCookie = {\n      name: cookie.name(),\n      value: cookie.value(),\n      url: cookie.url() || undefined,\n      domain,\n      path: cookie.path(),\n      secure: cookie.secure(),\n      httpOnly: cookie.httpOnly(),\n      sameSite: cookie.sameSite(),\n      expires,\n      priority: cookie.priority()\n    };\n    const response = await this.target().networkAgent().invoke_setCookie(protocolCookie);\n    if (response.getError()) {\n      return false;\n    }\n    return response.success;\n  }\n\n  /**\n   * Returns cookies needed by current page's frames whose security origins are |domain|.\n   * @param {?string} domain\n   * @return {!Promise<!Array<!Cookie>>}\n   */\n  getCookiesForDomain(domain) {\n    const resourceURLs = [];\n    /**\n     * @param {!Resource} resource\n     * @return {boolean}\n     */\n    function populateResourceURLs(resource) {\n      const documentURL = Common.ParsedURL.ParsedURL.fromString(resource.documentURL);\n      if (documentURL && (!domain || documentURL.securityOrigin() === domain)) {\n        resourceURLs.push(resource.url);\n      }\n      return false;\n    }\n    const resourceTreeModel = this.target().model(ResourceTreeModel);\n    if (resourceTreeModel) {\n      // In case the current frame was unreachable, add it's cookies\n      // because they might help to debug why the frame was unreachable.\n      if (resourceTreeModel.mainFrame && resourceTreeModel.mainFrame.unreachableUrl()) {\n        resourceURLs.push(resourceTreeModel.mainFrame.unreachableUrl());\n      }\n\n      resourceTreeModel.forAllResources(populateResourceURLs);\n    }\n    return this.getCookies(resourceURLs);\n  }\n\n  /**\n   * @param {!Array<!Cookie>} cookies\n   * @return {!Promise<void>}\n   */\n  async deleteCookies(cookies) {\n    const networkAgent = this.target().networkAgent();\n    this._blockedCookies.clear();\n    this._cookieToBlockedReasons.clear();\n    await Promise.all(cookies.map(\n        cookie => networkAgent.invoke_deleteCookies(\n            {name: cookie.name(), url: undefined, domain: cookie.domain(), path: cookie.path()})));\n  }\n}\n\nSDKModel.register(CookieModel, Capability.Network, false);\n\n/** @typedef {!{uiString: string, attribute: ?Attributes}} */\n// @ts-ignore typedef\nexport let BlockedReason;\n"]}