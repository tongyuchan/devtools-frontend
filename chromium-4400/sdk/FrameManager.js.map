{"version":3,"file":"FrameManager.js","sourceRoot":"","sources":["../../../../../front_end/sdk/FrameManager.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport {Resource} from './Resource.js';  // eslint-disable-line no-unused-vars\nimport {Events as ResourceTreeModelEvents, ResourceTreeFrame, ResourceTreeModel} from './ResourceTreeModel.js';  // eslint-disable-line no-unused-vars\nimport {SDKModelObserver, TargetManager} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\n/** @type {?FrameManager} */\nlet frameManagerInstance = null;\n\n/**\n * The FrameManager is a central storage for all frames. It collects frames from all\n * ResourceTreeModel-instances (one per target), so that frames can be found by id\n * without needing to know their target.\n * @implements {SDKModelObserver<!ResourceTreeModel>}\n */\nexport class FrameManager extends Common.ObjectWrapper.ObjectWrapper {\n  constructor() {\n    super();\n    /** @type {!WeakMap<!ResourceTreeModel, !Array<!Common.EventTarget.EventDescriptor>>} */\n    this._eventListeners = new WeakMap();\n    TargetManager.instance().observeModels(ResourceTreeModel, this);\n\n    // Maps frameIds to frames and a count of how many ResourceTreeModels contain this frame.\n    // (OOPIFs are first attached to a new target and then detached from their old target,\n    // therefore being contained in 2 models for a short period of time.)\n    /** @type {!Map<string, {frame: !ResourceTreeFrame, count: number}>} */\n    this._frames = new Map();\n\n    // Maps targetIds to a set of frameIds.\n    /** @type {!Map<string, !Set<string>>} */\n    this._framesForTarget = new Map();\n\n    /** @type {?ResourceTreeFrame} */\n    this._topFrame = null;\n  }\n\n  /**\n   * @param {{forceNew: boolean}} opts\n   * @return {!FrameManager}\n   */\n  static instance({forceNew} = {forceNew: false}) {\n    if (!frameManagerInstance || forceNew) {\n      frameManagerInstance = new FrameManager();\n    }\n    return frameManagerInstance;\n  }\n\n  /**\n   * @override\n   * @param {!ResourceTreeModel} resourceTreeModel\n   */\n  modelAdded(resourceTreeModel) {\n    const addListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameAdded, this._frameAdded, this);\n    const detachListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameDetached, this._frameDetached, this);\n    const navigatedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameNavigated, this._frameNavigated, this);\n    const resourceAddedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.ResourceAdded, this._resourceAdded, this);\n    this._eventListeners.set(\n        resourceTreeModel, [addListener, detachListener, navigatedListener, resourceAddedListener]);\n    this._framesForTarget.set(resourceTreeModel.target().id(), new Set());\n  }\n\n  /**\n   * @override\n   * @param {!ResourceTreeModel} resourceTreeModel\n   */\n  modelRemoved(resourceTreeModel) {\n    const listeners = this._eventListeners.get(resourceTreeModel);\n    if (listeners) {\n      Common.EventTarget.EventTarget.removeEventListeners(listeners);\n    }\n\n    // Iterate over this model's frames and decrease their count or remove them.\n    // (The ResourceTreeModel does not send FrameDetached events when a model\n    // is removed.)\n    const frameSet = this._framesForTarget.get(resourceTreeModel.target().id());\n    if (frameSet) {\n      for (const frameId of frameSet) {\n        this._decreaseOrRemoveFrame(frameId);\n      }\n    }\n    this._framesForTarget.delete(resourceTreeModel.target().id());\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _frameAdded(event) {\n    const frame = /** @type {!ResourceTreeFrame} */ (event.data);\n    const frameData = this._frames.get(frame.id);\n    // If the frame is already in the map, increase its count, otherwise add it to the map.\n    if (frameData) {\n      this._frames.set(frame.id, {frame, count: frameData.count + 1});\n    } else {\n      this._frames.set(frame.id, {frame, count: 1});\n    }\n    this._resetTopFrame();\n\n    // Add the frameId to the the targetId's set of frameIds.\n    const frameSet = this._framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.add(frame.id);\n    }\n\n    this.dispatchEventToListeners(Events.FrameAddedToTarget, {frame});\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _frameDetached(event) {\n    const frame = /** @type {!ResourceTreeFrame} */ (event.data);\n    // Decrease the frame's count or remove it entirely from the map.\n    this._decreaseOrRemoveFrame(frame.id);\n\n    // Remove the frameId from the target's set of frameIds.\n    const frameSet = this._framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.delete(frame.id);\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _frameNavigated(event) {\n    const frame = /** @type {!ResourceTreeFrame} */ (event.data);\n    this.dispatchEventToListeners(Events.FrameNavigated, {frame});\n    if (frame.isTopFrame()) {\n      this.dispatchEventToListeners(Events.TopFrameNavigated, {frame});\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _resourceAdded(event) {\n    const resource = /** @type {!Resource} */ (event.data);\n    this.dispatchEventToListeners(Events.ResourceAdded, {resource});\n  }\n\n  /**\n   * @param {string} frameId\n   */\n  _decreaseOrRemoveFrame(frameId) {\n    const frameData = this._frames.get(frameId);\n    if (frameData) {\n      if (frameData.count === 1) {\n        this._frames.delete(frameId);\n        this._resetTopFrame();\n        this.dispatchEventToListeners(Events.FrameRemoved, {frameId});\n      } else {\n        frameData.count--;\n      }\n    }\n  }\n\n  /**\n   * Looks for the top frame in `_frames` and sets `_topFrame` accordingly.\n   *\n   * Important: This method needs to be called everytime `_frames` is updated.\n   */\n  _resetTopFrame() {\n    const topFrames = this.getAllFrames().filter(frame => frame.isTopFrame());\n    this._topFrame = topFrames.length > 0 ? topFrames[0] : null;\n  }\n\n  /**\n   * Returns the ResourceTreeFrame with a given frameId.\n   * When a frame is being detached a new ResourceTreeFrame but with the same\n   * frameId is created. Consequently getFrame() will return a different\n   * ResourceTreeFrame after detachment. Callers of getFrame() should therefore\n   * immediately use the function return value and not store it for later use.\n   * @param {string} frameId\n   * @return {?ResourceTreeFrame}\n   */\n  getFrame(frameId) {\n    const frameData = this._frames.get(frameId);\n    if (frameData) {\n      return frameData.frame;\n    }\n    return null;\n  }\n\n  /**\n   * @return {!Array<!ResourceTreeFrame>}\n   */\n  getAllFrames() {\n    return Array.from(this._frames.values(), frameData => frameData.frame);\n  }\n\n  /**\n   * @return {?ResourceTreeFrame}\n   */\n  getTopFrame() {\n    return this._topFrame;\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  // The FrameAddedToTarget event is sent whenever a frame is added to a target.\n  // This means that for OOPIFs it is sent twice: once when it's added to a\n  // parent frame and a second time when it's added to its own frame.\n  FrameAddedToTarget: Symbol('FrameAddedToTarget'),\n  FrameNavigated: Symbol('FrameNavigated'),\n  // The FrameRemoved event is only sent when a frame has been detached from\n  // all targets.\n  FrameRemoved: Symbol('FrameRemoved'),\n  ResourceAdded: Symbol('ResourceAdded'),\n  TopFrameNavigated: Symbol('TopFrameNavigated'),\n};\n"]}