{"version":3,"file":"ExecutionContextSelector.js","sourceRoot":"","sources":["../../../../../front_end/main/ExecutionContextSelector.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AAGrC;;GAEG;AACH,MAAM,OAAO,wBAAwB;IACnC;;;OAGG;IACH,YAAY,aAAa,EAAE,OAAO;QAChC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;QACxG,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAEhF,aAAa,CAAC,gBAAgB,CAC1B,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,0BAA0B,EAC/G,IAAI,CAAC,CAAC;QACV,aAAa,CAAC,gBAAgB,CAC1B,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,yBAAyB,EAChF,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;QAC7C,aAAa,CAAC,gBAAgB,CAC1B,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,4BAA4B,EACnF,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,YAAY;QACrB,wEAAwE;QACxE,mCAAmC;QACnC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpC;;WAEG;QACH,SAAS,QAAQ;YACf,oEAAoE;YACpE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;aACrE;QACH,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,YAAY;QACvB,MAAM,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QACxF,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,YAAY,KAAK,YAAY,EAAE;YACpF,IAAI,CAAC,4BAA4B,EAAE,CAAC;SACrC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACzE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,YAAY,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,EAAE;YACxF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;SAClE;IACH,CAAC;IAED;;OAEG;IACH,wBAAwB,CAAC,KAAK;QAC5B,MAAM,UAAU,GAAG,iDAAiD,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBAC/B,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;aACrE;SACF;IACH,CAAC;IAED;;;OAGG;IACH,oBAAoB,CAAC,gBAAgB;QACnC,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7G,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAK;QAClB,MAAM,SAAS,GAAG,mCAAmC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAE/E,IAAI,CAAC,SAAS,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC,EAAE;YAC3E,OAAO;SACR;QAED,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACpE,MAAM,iBAAiB,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/E,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAC7B,OAAO;SACR;QAED,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;YAChE,IAAI,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrD,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;aACnC;SACF;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;YAChE,IAAI,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE;gBAChD,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;aACnC;SACF;QACD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,EAAE,UAAU,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAAC,gBAAgB;QACrC,IAAI,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,EAAE;YAC9G,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE;YAC5E,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,gBAAgB;QAChC,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;YAC5D,OAAO,KAAK,CAAC;SACd;QACD,IAAI,gBAAgB,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,EAAE;YAC5C,OAAO,KAAK,CAAC;SACd;QACD,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACnG,MAAM,KAAK,GAAG,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC1F,IAAI,KAAK,IAAI,KAAK,CAAC,UAAU,EAAE,EAAE;YAC/B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,0BAA0B,CAAC,KAAK;QAC9B,IAAI,CAAC,yBAAyB,CAAC,iDAAiD,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACH,4BAA4B,CAAC,KAAK;QAChC,MAAM,gBAAgB,GAAG,gDAAgD,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,KAAK,gBAAgB,EAAE;YAChF,IAAI,CAAC,4BAA4B,EAAE,CAAC;SACrC;IACH,CAAC;IAED;;OAEG;IACH,+BAA+B,CAAC,KAAK;QACnC,MAAM,YAAY,GAAG,6CAA6C,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChF,MAAM,iBAAiB,GAAG,YAAY,CAAC,iBAAiB,EAAE,CAAC;QAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjD,IAAI,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxD,MAAM;aACP;SACF;IACH,CAAC;IAED;;;OAGG;IACH,yBAAyB,CAAC,gBAAgB;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,EAAE;YAC7G,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;YAC7E,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;YACnC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,4BAA4B;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAChF,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;YAC5D,MAAM,iBAAiB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC/D,KAAK,MAAM,gBAAgB,IAAI,iBAAiB,EAAE;gBAChD,IAAI,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE;oBAC5C,UAAU,GAAG,gBAAgB,CAAC;oBAC9B,MAAM;iBACP;aACF;SACF;QACD,IAAI,CAAC,UAAU,EAAE;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE;gBAC5D,MAAM,iBAAiB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBAC/D,IAAI,iBAAiB,CAAC,MAAM,EAAE;oBAC5B,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAClC,MAAM;iBACP;aACF;SACF;QACD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACvE,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACrC,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.RuntimeModel.RuntimeModel>}\n */\nexport class ExecutionContextSelector {\n  /**\n   * @param {!SDK.SDKModel.TargetManager} targetManager\n   * @param {!UI.Context.Context} context\n   */\n  constructor(targetManager, context) {\n    context.addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this._executionContextChanged, this);\n    context.addFlavorChangeListener(SDK.SDKModel.Target, this._targetChanged, this);\n\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this._onExecutionContextCreated,\n        this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this._onExecutionContextDestroyed, this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextOrderChanged,\n        this._onExecutionContextOrderChanged, this);\n    this._targetManager = targetManager;\n    this._context = context;\n    targetManager.observeModels(SDK.RuntimeModel.RuntimeModel, this);\n  }\n\n  /**\n   * @override\n   * @param {!SDK.RuntimeModel.RuntimeModel} runtimeModel\n   */\n  modelAdded(runtimeModel) {\n    // Defer selecting default target since we need all clients to get their\n    // targetAdded notifications first.\n    queueMicrotask(deferred.bind(this));\n\n    /**\n     * @this {ExecutionContextSelector}\n     */\n    function deferred() {\n      // We always want the second context for the service worker targets.\n      if (!this._context.flavor(SDK.SDKModel.Target)) {\n        this._context.setFlavor(SDK.SDKModel.Target, runtimeModel.target());\n      }\n    }\n  }\n\n  /**\n   * @override\n   * @param {!SDK.RuntimeModel.RuntimeModel} runtimeModel\n   */\n  modelRemoved(runtimeModel) {\n    const currentExecutionContext = this._context.flavor(SDK.RuntimeModel.ExecutionContext);\n    if (currentExecutionContext && currentExecutionContext.runtimeModel === runtimeModel) {\n      this._currentExecutionContextGone();\n    }\n\n    const models = this._targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    if (this._context.flavor(SDK.SDKModel.Target) === runtimeModel.target() && models.length) {\n      this._context.setFlavor(SDK.SDKModel.Target, models[0].target());\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _executionContextChanged(event) {\n    const newContext = /** @type {?SDK.RuntimeModel.ExecutionContext} */ (event.data);\n    if (newContext) {\n      this._context.setFlavor(SDK.SDKModel.Target, newContext.target());\n      if (!this._ignoreContextChanged) {\n        this._lastSelectedContextId = this._contextPersistentId(newContext);\n      }\n    }\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.ExecutionContext} executionContext\n   * @return {string}\n   */\n  _contextPersistentId(executionContext) {\n    return executionContext.isDefault ? executionContext.target().name() + ':' + executionContext.frameId : '';\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _targetChanged(event) {\n    const newTarget = /** @type {?SDK.SDKModel.Target} */ (event.data);\n    const currentContext = this._context.flavor(SDK.RuntimeModel.ExecutionContext);\n\n    if (!newTarget || (currentContext && currentContext.target() === newTarget)) {\n      return;\n    }\n\n    const runtimeModel = newTarget.model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n    if (!executionContexts.length) {\n      return;\n    }\n\n    let newContext = null;\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this._shouldSwitchToContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this._isDefaultContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    this._ignoreContextChanged = true;\n    this._context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext || executionContexts[0]);\n    this._ignoreContextChanged = false;\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.ExecutionContext} executionContext\n   * @return {boolean}\n   */\n  _shouldSwitchToContext(executionContext) {\n    if (this._lastSelectedContextId && this._lastSelectedContextId === this._contextPersistentId(executionContext)) {\n      return true;\n    }\n    if (!this._lastSelectedContextId && this._isDefaultContext(executionContext)) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.ExecutionContext} executionContext\n   * @return {boolean}\n   */\n  _isDefaultContext(executionContext) {\n    if (!executionContext.isDefault || !executionContext.frameId) {\n      return false;\n    }\n    if (executionContext.target().parentTarget()) {\n      return false;\n    }\n    const resourceTreeModel = executionContext.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const frame = resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n    if (frame && frame.isTopFrame()) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onExecutionContextCreated(event) {\n    this._switchContextIfNecessary(/** @type {!SDK.RuntimeModel.ExecutionContext} */ (event.data));\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onExecutionContextDestroyed(event) {\n    const executionContext = /** @type {!SDK.RuntimeModel.ExecutionContext}*/ (event.data);\n    if (this._context.flavor(SDK.RuntimeModel.ExecutionContext) === executionContext) {\n      this._currentExecutionContextGone();\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onExecutionContextOrderChanged(event) {\n    const runtimeModel = /** @type {!SDK.RuntimeModel.RuntimeModel} */ (event.data);\n    const executionContexts = runtimeModel.executionContexts();\n    for (let i = 0; i < executionContexts.length; i++) {\n      if (this._switchContextIfNecessary(executionContexts[i])) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.ExecutionContext} executionContext\n   * @return {boolean}\n   */\n  _switchContextIfNecessary(executionContext) {\n    if (!this._context.flavor(SDK.RuntimeModel.ExecutionContext) || this._shouldSwitchToContext(executionContext)) {\n      this._ignoreContextChanged = true;\n      this._context.setFlavor(SDK.RuntimeModel.ExecutionContext, executionContext);\n      this._ignoreContextChanged = false;\n      return true;\n    }\n    return false;\n  }\n\n  _currentExecutionContextGone() {\n    const runtimeModels = this._targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    let newContext = null;\n    for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n      const executionContexts = runtimeModels[i].executionContexts();\n      for (const executionContext of executionContexts) {\n        if (this._isDefaultContext(executionContext)) {\n          newContext = executionContext;\n          break;\n        }\n      }\n    }\n    if (!newContext) {\n      for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n        const executionContexts = runtimeModels[i].executionContexts();\n        if (executionContexts.length) {\n          newContext = executionContexts[0];\n          break;\n        }\n      }\n    }\n    this._ignoreContextChanged = true;\n    this._context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext);\n    this._ignoreContextChanged = false;\n  }\n}\n"]}