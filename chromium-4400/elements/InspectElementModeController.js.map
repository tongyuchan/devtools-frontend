{"version":3,"file":"InspectElementModeController.js","sourceRoot":"","sources":["../../../../../front_end/elements/InspectElementModeController.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as Root from '../root/root.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\n\n/**\n * @type {!InspectElementModeController}\n */\nlet inspectElementModeController;\n\n\n/**\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.OverlayModel.OverlayModel>}\n */\nexport class InspectElementModeController {\n  constructor() {\n    this._toggleSearchAction = UI.ActionRegistry.ActionRegistry.instance().action('elements.toggle-element-search');\n    this._mode = Protocol.Overlay.InspectMode.None;\n    SDK.SDKModel.TargetManager.instance().addEventListener(\n        SDK.SDKModel.Events.SuspendStateChanged, this._suspendStateChanged, this);\n    SDK.SDKModel.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.ExitedInspectMode,\n        () => this._setMode(Protocol.Overlay.InspectMode.None));\n    SDK.OverlayModel.OverlayModel.setInspectNodeHandler(this._inspectNode.bind(this));\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.OverlayModel.OverlayModel, this);\n\n    this._showDetailedInspectTooltipSetting =\n        Common.Settings.Settings.instance().moduleSetting('showDetailedInspectTooltip');\n    this._showDetailedInspectTooltipSetting.addChangeListener(this._showDetailedInspectTooltipChanged.bind(this));\n\n    document.addEventListener('keydown', event => {\n      if (event.keyCode !== UI.KeyboardShortcut.Keys.Esc.code) {\n        return;\n      }\n      if (!this._isInInspectElementMode()) {\n        return;\n      }\n      this._setMode(Protocol.Overlay.InspectMode.None);\n      event.consume(true);\n    }, true);\n  }\n\n  /**\n   * @param {{forceNew: boolean}} opts\n   */\n  static instance({forceNew} = {forceNew: false}) {\n    if (!inspectElementModeController || forceNew) {\n      inspectElementModeController = new InspectElementModeController();\n    }\n\n    return inspectElementModeController;\n  }\n\n  /**\n   * @override\n   * @param {!SDK.OverlayModel.OverlayModel} overlayModel\n   */\n  modelAdded(overlayModel) {\n    // When DevTools are opening in the inspect element mode, the first target comes in\n    // much later than the InspectorFrontendAPI.enterInspectElementMode event.\n    if (this._mode === Protocol.Overlay.InspectMode.None) {\n      return;\n    }\n    overlayModel.setInspectMode(this._mode, this._showDetailedInspectTooltipSetting.get());\n  }\n\n  /**\n   * @override\n   * @param {!SDK.OverlayModel.OverlayModel} overlayModel\n   */\n  modelRemoved(overlayModel) {\n  }\n\n  /**\n   * @return {boolean}\n   */\n  _isInInspectElementMode() {\n    return this._mode !== Protocol.Overlay.InspectMode.None;\n  }\n\n  _toggleInspectMode() {\n    let mode;\n    if (this._isInInspectElementMode()) {\n      mode = Protocol.Overlay.InspectMode.None;\n    } else {\n      mode = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get() ?\n          Protocol.Overlay.InspectMode.SearchForUAShadowDOM :\n          Protocol.Overlay.InspectMode.SearchForNode;\n    }\n    this._setMode(mode);\n  }\n\n  _captureScreenshotMode() {\n    this._setMode(Protocol.Overlay.InspectMode.CaptureAreaScreenshot);\n  }\n\n  /**\n   * @param {!Protocol.Overlay.InspectMode} mode\n   */\n  _setMode(mode) {\n    if (SDK.SDKModel.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n    this._mode = mode;\n    for (const overlayModel of SDK.SDKModel.TargetManager.instance().models(SDK.OverlayModel.OverlayModel)) {\n      overlayModel.setInspectMode(mode, this._showDetailedInspectTooltipSetting.get());\n    }\n    if (this._toggleSearchAction) {\n      this._toggleSearchAction.setToggled(this._isInInspectElementMode());\n    }\n  }\n\n  _suspendStateChanged() {\n    if (!SDK.SDKModel.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n\n    this._mode = Protocol.Overlay.InspectMode.None;\n    if (this._toggleSearchAction) {\n      this._toggleSearchAction.setToggled(false);\n    }\n  }\n\n  /**\n   * @param {!SDK.DOMModel.DOMNode} node\n   */\n  _inspectNode(node) {\n    ElementsPanel.instance().revealAndSelectNode(node, true, true);\n  }\n\n  _showDetailedInspectTooltipChanged() {\n    this._setMode(this._mode);\n  }\n}\n\n/** @type {!ToggleSearchActionDelegate} */\nlet toggleSearchActionDelegateInstance;\n\n/**\n * @implements {UI.ActionRegistration.ActionDelegate}\n */\nexport class ToggleSearchActionDelegate {\n  /**\n   * @override\n   * @param {!UI.Context.Context} context\n   * @param {string} actionId\n   * @return {boolean}\n   */\n  handleAction(context, actionId) {\n    if (Root.Runtime.Runtime.queryParam('isSharedWorker')) {\n      return false;\n    }\n\n    inspectElementModeController = InspectElementModeController.instance();\n    if (!inspectElementModeController) {\n      return false;\n    }\n    if (actionId === 'elements.toggle-element-search') {\n      inspectElementModeController._toggleInspectMode();\n    } else if (actionId === 'elements.capture-area-screenshot') {\n      inspectElementModeController._captureScreenshotMode();\n    }\n    return true;\n  }\n\n  /**\n   * @param {{forceNew: ?boolean}=} opts\n   * @return {!ToggleSearchActionDelegate}\n   */\n  static instance(opts = {forceNew: null}) {\n    const {forceNew} = opts;\n    if (!toggleSearchActionDelegateInstance || forceNew) {\n      toggleSearchActionDelegateInstance = new ToggleSearchActionDelegate();\n    }\n\n    return toggleSearchActionDelegateInstance;\n  }\n}\n"]}