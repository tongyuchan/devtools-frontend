{"version":3,"file":"Adorner.js","sourceRoot":"","sources":["../../../../../front_end/elements/Adorner.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';  // eslint-disable-line no-unused-vars\nimport * as UI from '../ui/ui.js';\n\nconst ls = Common.ls;\n\n/**\n * @enum {string}\n * Use a normal object instead of making it null-prototyped because\n * Closure requires enum initialization to be an object literal.\n * Will be a proper enum class once this file becomes TypeScript.\n */\nexport const AdornerCategories = {\n  Security: 'Security',\n  Layout: 'Layout',\n  Default: 'Default',\n};\nObject.freeze(AdornerCategories);\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: inline-flex;\n    }\n\n    :host(.hidden) {\n      display: none;\n    }\n\n    :host(.clickable) {\n      cursor: pointer;\n    }\n\n    :host(:focus) slot {\n      border: var(--adorner-border-focus, 1px solid #1a73e8);\n    }\n\n    :host([aria-pressed=true]) slot {\n      color: var(--adorner-text-color-active, #ffffff);\n      background-color: var(--adorner-background-color-active, #1a73e8);\n    }\n\n    slot {\n      display: inline-flex;\n      box-sizing: border-box;\n      height: 13px;\n      line-height: 13px;\n      padding: 0 6px;\n      font-size: 8.5px;\n      color: var(--adorner-text-color, #3c4043);\n      background-color: var(--adorner-background-color, #f1f3f4);\n      border: var(--adorner-border, 1px solid #dadce0);\n      border-radius: var(--adorner-border-radius, 10px);\n    }\n\n    ::slotted(*) {\n      height: 10px;\n    }\n  </style>\n  <slot name=\"content\"></slot>\n`;\n\nexport class Adorner extends HTMLElement {\n  /**\n   *\n   * @param {!HTMLElement} content\n   * @param {string} name\n   * @param {!{category: (!AdornerCategories|undefined)}} options\n   * @return {!Adorner}\n   */\n  // @ts-ignore typedef TODO(changhaohan): properly type options once this is .ts\n  static create(content, name, options = {}) {\n    const {category = AdornerCategories.Default} = options;\n\n    const adorner = /** @type {!Adorner} */ (document.createElement('devtools-adorner'));\n    content.slot = 'content';\n    adorner.append(content);\n\n    adorner.name = name;\n    adorner.category = category;\n\n    return adorner;\n  }\n\n  constructor() {\n    super();\n\n    const shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n\n    this.name = '';\n    this.category = AdornerCategories.Default;\n    this._isToggle = false;\n    this._ariaLabelDefault = ls`adorner`;\n    this._ariaLabelActive = ls`adorner active`;\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback() {\n    if (!this.getAttribute('aria-label')) {\n      UI.ARIAUtils.setAccessibleName(this, ls`${this.name} adorner`);\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isActive() {\n    return this.getAttribute('aria-pressed') === 'true';\n  }\n\n  /**\n   * Toggle the active state of the adorner. Optionally pass `true` to force-set\n   * an active state; pass `false` to force-set an inactive state.\n   * @param {boolean=} forceActiveState\n   */\n  toggle(forceActiveState) {\n    if (!this._isToggle) {\n      return;\n    }\n    const shouldBecomeActive = forceActiveState === undefined ? !this.isActive() : forceActiveState;\n    UI.ARIAUtils.setPressed(this, shouldBecomeActive);\n    UI.ARIAUtils.setAccessibleName(this, shouldBecomeActive ? this._ariaLabelActive : this._ariaLabelDefault);\n  }\n\n  show() {\n    this.classList.remove('hidden');\n  }\n\n  hide() {\n    this.classList.add('hidden');\n  }\n\n  /**\n   * Make adorner interactive by responding to click events with the provided action\n   * and simulating ARIA-capable toggle button behavior.\n   * @param {!EventListener} action\n   * @param {!{isToggle: (boolean|undefined), shouldPropagateOnKeydown: (boolean|undefined), ariaLabelDefault: (!Platform.UIString.LocalizedString|undefined), ariaLabelActive: (!Platform.UIString.LocalizedString|undefined)}} options\n   */\n  // @ts-ignore typedef TODO(changhaohan): properly type options once this is .ts\n  addInteraction(action, options = {}) {\n    const {isToggle = false, shouldPropagateOnKeydown = false, ariaLabelDefault, ariaLabelActive} = options;\n\n    this._isToggle = isToggle;\n\n    if (ariaLabelDefault) {\n      this._ariaLabelDefault = ariaLabelDefault;\n      UI.ARIAUtils.setAccessibleName(this, ariaLabelDefault);\n    }\n\n    if (isToggle) {\n      this.addEventListener('click', () => {\n        this.toggle();\n      });\n      if (ariaLabelActive) {\n        this._ariaLabelActive = ariaLabelActive;\n      }\n      this.toggle(false /* initialize inactive state */);\n    }\n\n    this.addEventListener('click', action);\n\n    // Simulate an ARIA-capable toggle button\n    this.classList.add('clickable');\n    UI.ARIAUtils.markAsButton(this);\n    this.tabIndex = 0;\n    this.addEventListener('keydown', event => {\n      if (event.code === 'Enter' || event.code === 'Space') {\n        this.click();\n        if (!shouldPropagateOnKeydown) {\n          event.stopPropagation();\n        }\n      }\n    });\n  }\n}\n\nself.customElements.define('devtools-adorner', Adorner);\n"]}