{"version":3,"file":"AccessibilityTree.js","sourceRoot":"","sources":["../../../../../front_end/elements/AccessibilityTree.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAE/D,OAAO,EAAC,eAAe,EAAC,MAAM,6BAA6B,CAAC;AAO5D,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IAAlD;;QACmB,WAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACpD,SAAI,GAA8B,IAAI,CAAC;IAuCjD,CAAC;IArCC,IAAI,IAAI,CAAC,IAA2B;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAC1G,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,eAAe,EAAE,CAAC;QAC1D,OAAO,MAAM,IAAI,IAAI,CAAC;IACxB,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC9C,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO;aACR;YAED,mBAAmB;YACnB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAA;6CACY;gBACnC,MAAM,EAAE,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC;aACb;;OAE7B,CAAC;YACF,kBAAkB;YAClB,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE;IACtD,cAAc,CAAC,MAAM,CAAC,6BAA6B,EAAE,iBAAiB,CAAC,CAAC;CACzE","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../sdk/sdk.js';\nimport * as LitHtml from '../third_party/lit-html/lit-html.js';\n\nimport {SDKNodeToAXNode} from './AccessibilityTreeUtils.js';\nimport type {AccessibilityNodeData} from './AccessibilityNode.js';\n\nexport interface AccessibilityTreeData {\n  node: SDK.DOMModel.DOMNode|null;\n}\n\nexport class AccessibilityTree extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private node: SDK.DOMModel.DOMNode|null = null;\n\n  set data(data: AccessibilityTreeData) {\n    this.node = data.node;\n    this.shadow.host.setAttribute('role', 'tree');\n    this.render();\n  }\n\n  async refreshAccessibilityTree(): Promise<SDK.AccessibilityModel.AccessibilityNode|null> {\n    if (!this.node) {\n      return null;\n    }\n\n    const accessibilityModel = this.node.domModel().target().model(SDK.AccessibilityModel.AccessibilityModel);\n    if (!accessibilityModel) {\n      return null;\n    }\n\n    const result = await accessibilityModel.requestRootNode();\n    return result || null;\n  }\n\n  private render(): void {\n    this.refreshAccessibilityTree().then(rootNode => {\n      if (!rootNode) {\n        return;\n      }\n\n      // clang-format off\n      const output = LitHtml.html`\n        <devtools-accessibility-node .data=${{\n          axNode: SDKNodeToAXNode(null, rootNode),\n          } as AccessibilityNodeData}>\n        </devtools-accessibility-node>\n      `;\n      // clang-format on\n      LitHtml.render(output, this.shadow);\n    });\n  }\n}\n\nif (!customElements.get('devtools-accessibility-tree')) {\n  customElements.define('devtools-accessibility-tree', AccessibilityTree);\n}\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-accessibility-tree': AccessibilityTree;\n  }\n}\n"]}