{"version":3,"file":"CSSPropertyIconResolver.js","sourceRoot":"","sources":["../../../../../front_end/elements/CSSPropertyIconResolver.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst writingModesAffectingFlexDirection = new Set([\n  'tb',\n  'tb-rl',\n  'vertical-lr',\n  'vertical-rl',\n]);\n\n/** @enum {string} */\nexport const PhysicalFlexDirection = {\n  LEFT_TO_RIGHT: 'left-to-right',\n  RIGHT_TO_LEFT: 'right-to-left',\n  BOTTOM_TO_TOP: 'bottom-to-top',\n  TOP_TO_BOTTOM: 'top-to-bottom',\n};\n\n/**\n * @param {!PhysicalFlexDirection} direction\n * @return {!PhysicalFlexDirection}\n */\nexport function reverseDirection(direction) {\n  if (direction === PhysicalFlexDirection.LEFT_TO_RIGHT) {\n    return PhysicalFlexDirection.RIGHT_TO_LEFT;\n  }\n  if (direction === PhysicalFlexDirection.RIGHT_TO_LEFT) {\n    return PhysicalFlexDirection.LEFT_TO_RIGHT;\n  }\n  if (direction === PhysicalFlexDirection.TOP_TO_BOTTOM) {\n    return PhysicalFlexDirection.BOTTOM_TO_TOP;\n  }\n  if (direction === PhysicalFlexDirection.BOTTOM_TO_TOP) {\n    return PhysicalFlexDirection.TOP_TO_BOTTOM;\n  }\n  throw new Error('Unknown PhysicalFlexDirection');\n}\n\n/**\n * @param {!Object.<string, !PhysicalFlexDirection>} directions\n * @return {!Object.<string, !PhysicalFlexDirection>}\n */\nfunction extendWithReverseDirections(directions) {\n  return {\n    ...directions,\n    'row-reverse': reverseDirection(directions.row),\n    'column-reverse': reverseDirection(directions.column),\n  };\n}\n\n/**\n * Returns absolute directions for row and column values of flex-direction\n * taking into account the direction and writing-mode attributes.\n *\n * @param {!Map<string, string>} computedStyles\n * @return {!Object.<string, !PhysicalFlexDirection>}\n */\nexport function getPhysicalFlexDirections(computedStyles) {\n  const isRtl = computedStyles.get('direction') === 'rtl';\n  const writingMode = computedStyles.get('writing-mode');\n  const isVertical = writingMode && writingModesAffectingFlexDirection.has(writingMode);\n\n  if (isVertical) {\n    return extendWithReverseDirections({\n      row: isRtl ? PhysicalFlexDirection.BOTTOM_TO_TOP : PhysicalFlexDirection.TOP_TO_BOTTOM,\n      column: writingMode === 'vertical-lr' ? PhysicalFlexDirection.LEFT_TO_RIGHT : PhysicalFlexDirection.RIGHT_TO_LEFT\n    });\n  }\n\n  return extendWithReverseDirections({\n    row: isRtl ? PhysicalFlexDirection.RIGHT_TO_LEFT : PhysicalFlexDirection.LEFT_TO_RIGHT,\n    column: PhysicalFlexDirection.TOP_TO_BOTTOM,\n  });\n}\n\n/**\n * Rotates the flex direction icon in such way that it indicates\n * the desired `direction` and the arrow in the icon is always at the bottom\n * or at the right.\n *\n * By default, the icon is pointing top-down with the arrow on the right-hand side.\n *\n * @param {!PhysicalFlexDirection} direction\n * @return {!IconInfo}\n */\nexport function rotateFlexDirectionIcon(direction) {\n  // Default to LTR.\n  let flipX = true;\n  let flipY = false;\n  let rotate = -90;\n\n  if (direction === PhysicalFlexDirection.RIGHT_TO_LEFT) {\n    rotate = 90;\n    flipY = false;\n    flipX = false;\n  } else if (direction === PhysicalFlexDirection.TOP_TO_BOTTOM) {\n    rotate = 0;\n    flipX = false;\n    flipY = false;\n  } else if (direction === PhysicalFlexDirection.BOTTOM_TO_TOP) {\n    rotate = 0;\n    flipX = false;\n    flipY = true;\n  }\n\n  return {\n    iconName: 'flex-direction-icon',\n    rotate: rotate,\n    scaleX: flipX ? -1 : 1,\n    scaleY: flipY ? -1 : 1,\n  };\n}\n\n/**\n * @param {string} iconName\n * @param {!PhysicalFlexDirection} direction\n * @return {!IconInfo}\n */\nexport function rotateAlignContentIcon(iconName, direction) {\n  return {\n    iconName,\n    rotate: direction === PhysicalFlexDirection.RIGHT_TO_LEFT ?\n        90 :\n        (direction === PhysicalFlexDirection.LEFT_TO_RIGHT ? -90 : 0),\n    scaleX: 1,\n    scaleY: 1,\n  };\n}\n\n/**\n * @param {string} iconName\n * @param {!PhysicalFlexDirection} direction\n * @return {!IconInfo}\n */\nexport function rotateJustifyContentIcon(iconName, direction) {\n  return {\n    iconName,\n    rotate: direction === PhysicalFlexDirection.TOP_TO_BOTTOM ?\n        90 :\n        (direction === PhysicalFlexDirection.BOTTOM_TO_TOP ? -90 : 0),\n    scaleX: direction === PhysicalFlexDirection.RIGHT_TO_LEFT ? -1 : 1,\n    scaleY: 1,\n  };\n}\n\n/**\n * @param {string} iconName\n * @param {!PhysicalFlexDirection} direction\n * @return {!IconInfo}\n */\nexport function rotateAlignItemsIcon(iconName, direction) {\n  return {\n    iconName,\n    rotate: direction === PhysicalFlexDirection.RIGHT_TO_LEFT ?\n        90 :\n        (direction === PhysicalFlexDirection.LEFT_TO_RIGHT ? -90 : 0),\n    scaleX: 1,\n    scaleY: 1,\n  };\n}\n\n/**\n *\n * @param {string} value\n * @return {function(!Map<string, string>):!IconInfo}\n */\nfunction flexDirectionIcon(value) {\n  /**\n   * @param {!Map<string, string>} computedStyles\n   * @return {!IconInfo}\n   */\n  function getIcon(computedStyles) {\n    const directions = getPhysicalFlexDirections(computedStyles);\n    return rotateFlexDirectionIcon(directions[value]);\n  }\n  return getIcon;\n}\n\n/**\n *\n * @param {string} iconName\n * @return {function(!Map<string, string>):!IconInfo}\n */\nfunction flexAlignContentIcon(iconName) {\n  /**\n   * @param {!Map<string, string>} computedStyles\n   * @return {!IconInfo}\n   */\n  function getIcon(computedStyles) {\n    const directions = getPhysicalFlexDirections(computedStyles);\n    /**\n     * @type {!Map<string, !PhysicalFlexDirection>}\n     */\n    const flexDirectionToPhysicalDirection = new Map([\n      ['column', directions.row],\n      ['row', directions.column],\n      ['column-reverse', directions.row],\n      ['row-reverse', directions.column],\n    ]);\n    const computedFlexDirection = computedStyles.get('flex-direction') || 'row';\n    const iconDirection = flexDirectionToPhysicalDirection.get(computedFlexDirection);\n    if (!iconDirection) {\n      throw new Error('Unknown direction for flex-align icon');\n    }\n    return rotateAlignContentIcon(iconName, iconDirection);\n  }\n  return getIcon;\n}\n\n/**\n *\n * @param {string} iconName\n * @return {function(!Map<string, string>):!IconInfo}\n */\nfunction flexJustifyContentIcon(iconName) {\n  /**\n   * @param {!Map<string, string>} computedStyles\n   * @return {!IconInfo}\n   */\n  function getIcon(computedStyles) {\n    const directions = getPhysicalFlexDirections(computedStyles);\n    return rotateJustifyContentIcon(iconName, directions[computedStyles.get('flex-direction') || 'row']);\n  }\n  return getIcon;\n}\n\n/**\n *\n * @param {string} iconName\n * @return {function(!Map<string, string>):!IconInfo}\n */\nfunction flexAlignItemsIcon(iconName) {\n  /**\n   * @param {!Map<string, string>} computedStyles\n   * @return {!IconInfo}\n   */\n  function getIcon(computedStyles) {\n    const directions = getPhysicalFlexDirections(computedStyles);\n    /**\n     * @type {!Map<string, !PhysicalFlexDirection>}\n     */\n    const flexDirectionToPhysicalDirection = new Map([\n      ['column', directions.row],\n      ['row', directions.column],\n      ['column-reverse', directions.row],\n      ['row-reverse', directions.column],\n    ]);\n    const computedFlexDirection = computedStyles.get('flex-direction') || 'row';\n    const iconDirection = flexDirectionToPhysicalDirection.get(computedFlexDirection);\n    if (!iconDirection) {\n      throw new Error('Unknown direction for flex-align icon');\n    }\n    return rotateAlignItemsIcon(iconName, iconDirection);\n  }\n  return getIcon;\n}\n\n/**\n * The baseline icon contains the letter A to indicate that we're aligning based on where the text baseline is.\n * Therefore we're not rotating this icon like the others, as this would become confusing. Plus baseline alignment\n * is likely only really useful in horizontal flow cases.\n *\n * @return {!IconInfo}\n */\nfunction baselineIcon() {\n  return {\n    iconName: 'baseline-icon',\n    rotate: 0,\n    scaleX: 1,\n    scaleY: 1,\n  };\n}\n\n/**\n *\n * @param {string} iconName\n * @return {function(!Map<string, string>,!Map<string, string>)}):!IconInfo}\n */\nfunction flexAlignSelfIcon(iconName) {\n  /**\n   * @param {!Map<string, string>} computedStyles\n   * @param {!Map<string, string>} parentComputedStyles\n   * @return {!IconInfo}\n   */\n  function getIcon(computedStyles, parentComputedStyles) {\n    return flexAlignItemsIcon(iconName)(parentComputedStyles);\n  }\n  return getIcon;\n}\n\n/**\n * @type {!Map<string, function(!Map<string, string>, !Map<string, string>):!IconInfo>}\n */\nconst textToIconResolver = new Map([\n  ['flex-direction: row', flexDirectionIcon('row')],\n  ['flex-direction: column', flexDirectionIcon('column')],\n  ['flex-direction: column-reverse', flexDirectionIcon('column-reverse')],\n  ['flex-direction: row-reverse', flexDirectionIcon('row-reverse')],\n  ['flex-direction: initial', flexDirectionIcon('row')],\n  ['flex-direction: unset', flexDirectionIcon('row')],\n  ['flex-direction: revert', flexDirectionIcon('row')],\n  ['align-content: center', flexAlignContentIcon('flex-align-content-center-icon')],\n  ['align-content: space-around', flexAlignContentIcon('flex-align-content-space-around-icon')],\n  ['align-content: space-between', flexAlignContentIcon('flex-align-content-space-between-icon')],\n  ['align-content: stretch', flexAlignContentIcon('flex-align-content-stretch-icon')],\n  ['align-content: space-evenly', flexAlignContentIcon('flex-align-content-space-evenly-icon')],\n  ['align-content: flex-end', flexAlignContentIcon('flex-align-content-end-icon')],\n  ['align-content: flex-start', flexAlignContentIcon('flex-align-content-start-icon')],\n  // TODO(crbug.com/1139945): Start & end should be enabled once Chromium supports them for flexbox.\n  // ['align-content: start', flexAlignContentIcon('flex-align-content-start-icon')],\n  // ['align-content: end', flexAlignContentIcon('flex-align-content-end-icon')],\n  ['align-content: normal', flexAlignContentIcon('flex-align-content-stretch-icon')],\n  ['align-content: revert', flexAlignContentIcon('flex-align-content-stretch-icon')],\n  ['align-content: unset', flexAlignContentIcon('flex-align-content-stretch-icon')],\n  ['align-content: initial', flexAlignContentIcon('flex-align-content-stretch-icon')],\n  ['justify-content: center', flexJustifyContentIcon('flex-justify-content-center-icon')],\n  ['justify-content: space-around', flexJustifyContentIcon('flex-justify-content-space-around-icon')],\n  ['justify-content: space-between', flexJustifyContentIcon('flex-justify-content-space-between-icon')],\n  ['justify-content: space-evenly', flexJustifyContentIcon('flex-justify-content-space-evenly-icon')],\n  ['justify-content: flex-end', flexJustifyContentIcon('flex-justify-content-flex-end-icon')],\n  ['justify-content: flex-start', flexJustifyContentIcon('flex-justify-content-flex-start-icon')],\n  ['align-items: stretch', flexAlignItemsIcon('flex-align-items-stretch-icon')],\n  ['align-items: flex-end', flexAlignItemsIcon('flex-align-items-flex-end-icon')],\n  ['align-items: flex-start', flexAlignItemsIcon('flex-align-items-flex-start-icon')],\n  ['align-items: center', flexAlignItemsIcon('flex-align-items-center-icon')],\n  ['align-items: baseline', baselineIcon],\n  ['align-content: baseline', baselineIcon],\n  ['align-self: baseline', baselineIcon],\n  ['align-self: center', flexAlignSelfIcon('flex-align-self-center-icon')],\n  ['align-self: flex-start', flexAlignSelfIcon('flex-align-self-flex-start-icon')],\n  ['align-self: flex-end', flexAlignSelfIcon('flex-align-self-flex-end-icon')],\n  ['align-self: stretch', flexAlignSelfIcon('flex-align-self-stretch-icon')],\n]);\n\n/**\n * @param {string} text\n * @param {?Map<string, string>} computedStyles\n * @param {?Map<string, string>=} parentComputedStyles\n * @return {?IconInfo}\n */\nexport function findIcon(text, computedStyles, parentComputedStyles) {\n  const resolver = textToIconResolver.get(text);\n  if (resolver) {\n    return resolver(computedStyles || new Map(), parentComputedStyles || new Map());\n  }\n  return null;\n}\n\n/**\n * @typedef {{\n *  iconName: string,\n *  rotate: number,\n *  scaleX: number,\n *  scaleY: number,\n * }}\n */\n// @ts-ignore typedef\nexport let IconInfo;\n"]}