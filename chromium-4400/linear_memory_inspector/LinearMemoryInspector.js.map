{"version":3,"file":"LinearMemoryInspector.js","sourceRoot":"","sources":["../../../../../front_end/linear_memory_inspector/LinearMemoryInspector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './LinearMemoryNavigator.js';\nimport './LinearMemoryValueInterpreter.js';\nimport './LinearMemoryViewer.js';\n\nimport * as Common from '../common/common.js';\nimport * as LitHtml from '../third_party/lit-html/lit-html.js';\n\nconst ls = Common.ls;\nconst {render, html} = LitHtml;\n\nimport {Mode, AddressInputChangedEvent, HistoryNavigationEvent, LinearMemoryNavigatorData, Navigation, PageNavigationEvent} from './LinearMemoryNavigator.js';\nimport type {EndiannessChangedEvent, LinearMemoryValueInterpreterData, ValueTypeToggledEvent} from './LinearMemoryValueInterpreter.js';\nimport type {ByteSelectedEvent, LinearMemoryViewerData, ResizeEvent} from './LinearMemoryViewer.js';\nimport {VALUE_INTEPRETER_MAX_NUM_BYTES, ValueType, Endianness} from './ValueInterpreterDisplayUtils.js';\nimport {formatAddress, parseAddress} from './LinearMemoryInspectorUtils.js';\n\n// If the LinearMemoryInspector only receives a portion\n// of the original Uint8Array to show, it requires information\n// on the 1. memoryOffset (at which index this portion starts),\n// and on the 2. outerMemoryLength (length of the original Uint8Array).\nexport interface LinearMemoryInspectorData {\n  memory: Uint8Array;\n  address: number;\n  memoryOffset: number;\n  outerMemoryLength: number;\n}\n\nclass AddressHistoryEntry implements Common.SimpleHistoryManager.HistoryEntry {\n  private address = 0;\n  private callback;\n\n  constructor(address: number, callback: (x: number) => void) {\n    if (address < 0) {\n      throw new Error('Address should be a greater or equal to zero');\n    }\n    this.address = address;\n    this.callback = callback;\n  }\n\n  valid(): boolean {\n    return true;\n  }\n\n  reveal(): void {\n    this.callback(this.address);\n  }\n}\n\nexport class MemoryRequestEvent extends Event {\n  data: {start: number, end: number, address: number};\n\n  constructor(start: number, end: number, address: number) {\n    super('memory-request');\n    this.data = {start, end, address};\n  }\n}\n\nexport class AddressChangedEvent extends Event {\n  data: number;\n\n  constructor(address: number) {\n    super('address-changed');\n    this.data = address;\n  }\n}\n\nexport class LinearMemoryInspector extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private readonly history = new Common.SimpleHistoryManager.SimpleHistoryManager(10);\n\n  private memory = new Uint8Array();\n  private memoryOffset = 0;\n  private outerMemoryLength = 0;\n\n  private address = 0;\n\n  private currentNavigatorMode = Mode.Submitted;\n  private currentNavigatorAddressLine = `${this.address}`;\n\n  private numBytesPerPage = 4;\n\n  private valueTypes: Set<ValueType> = new Set([ValueType.Int8, ValueType.Float32]);\n  private endianness: Endianness = Endianness.Little;\n\n  set data(data: LinearMemoryInspectorData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    this.memory = data.memory;\n    this.address = data.address;\n    this.memoryOffset = data.memoryOffset;\n    this.outerMemoryLength = data.outerMemoryLength;\n    this.dispatchEvent(new AddressChangedEvent(this.address));\n    this.render();\n  }\n\n  private render(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n\n    const navigatorAddressToShow =\n        this.currentNavigatorMode === Mode.Submitted ? formatAddress(this.address) : this.currentNavigatorAddressLine;\n    const navigatorAddressIsValid = this.isValidAddress(navigatorAddressToShow);\n\n    const invalidAddressMsg =\n        ls`Address has to be a number between ${formatAddress(0)} and ${formatAddress(this.outerMemoryLength)}`;\n    const errorMsg = navigatorAddressIsValid ? undefined : invalidAddressMsg;\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>\n        :host {\n          flex: auto;\n          display: flex;\n        }\n\n        .view {\n          width: 100%;\n          display: flex;\n          flex: 1;\n          flex-direction: column;\n          font-family: monospace;\n          padding: 9px 12px 9px 7px;\n        }\n\n        devtools-linear-memory-inspector-navigator + devtools-linear-memory-inspector-viewer {\n          margin-top: 12px;\n        }\n\n        .value-interpreter {\n          display: flex;\n        }\n      </style>\n      <div class=\"view\">\n        <devtools-linear-memory-inspector-navigator\n          .data=${{address: navigatorAddressToShow, valid: navigatorAddressIsValid, mode: this.currentNavigatorMode, error: errorMsg} as LinearMemoryNavigatorData}\n          @refresh-requested=${this.onRefreshRequest}\n          @address-input-changed=${this.onAddressChange}\n          @page-navigation=${this.navigatePage}\n          @history-navigation=${this.navigateHistory}></devtools-linear-memory-inspector-navigator>\n        <devtools-linear-memory-inspector-viewer\n          .data=${{memory: this.memory.slice(start - this.memoryOffset, end - this.memoryOffset), address: this.address, memoryOffset: start, focus: this.currentNavigatorMode === Mode.Submitted} as LinearMemoryViewerData}\n          @byte-selected=${this.onByteSelected}\n          @resize=${this.resize}>\n        </devtools-linear-memory-inspector-viewer>\n      </div>\n      <div class=\"value-interpreter\">\n        <devtools-linear-memory-inspector-interpreter\n          .data=${{\n            value: this.memory.slice(this.address - this.memoryOffset, this.address + VALUE_INTEPRETER_MAX_NUM_BYTES).buffer,\n            valueTypes: this.valueTypes,\n            endianness: this.endianness } as LinearMemoryValueInterpreterData}\n          @value-type-toggled=${this.onValueTypeToggled}\n          @endianness-changed=${this.onEndiannessChanged}>\n        </devtools-linear-memory-inspector-interpreter/>\n      </div>\n      `, this.shadow, {\n      eventContext: this,\n    });\n    // clang-format on\n  }\n\n  private onRefreshRequest(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n    this.dispatchEvent(new MemoryRequestEvent(start, end, this.address));\n  }\n\n  private onByteSelected(e: ByteSelectedEvent): void {\n    this.currentNavigatorMode = Mode.Submitted;\n    const addressInRange = Math.max(0, Math.min(e.data, this.outerMemoryLength - 1));\n    this.jumpToAddress(addressInRange);\n  }\n\n  private onEndiannessChanged(e: EndiannessChangedEvent): void {\n    this.endianness = e.data;\n    this.render();\n  }\n\n  private isValidAddress(address: string): boolean {\n    const newAddress = parseAddress(address);\n    return newAddress !== undefined && newAddress >= 0 && newAddress < this.outerMemoryLength;\n  }\n\n  private onAddressChange(e: AddressInputChangedEvent): void {\n    const {address, mode} = e.data;\n    const isValid = this.isValidAddress(address);\n    const newAddress = parseAddress(address);\n    this.currentNavigatorAddressLine = address;\n\n    if (newAddress !== undefined && isValid) {\n      this.currentNavigatorMode = mode;\n      this.jumpToAddress(newAddress);\n      return;\n    }\n\n    if (mode === Mode.Submitted && !isValid) {\n      this.currentNavigatorMode = Mode.InvalidSubmit;\n    } else {\n      this.currentNavigatorMode = Mode.Edit;\n    }\n\n    this.render();\n  }\n\n  private onValueTypeToggled(e: ValueTypeToggledEvent): void {\n    const {type, checked} = e.data;\n    if (checked) {\n      this.valueTypes.add(type);\n    } else {\n      this.valueTypes.delete(type);\n    }\n    this.render();\n  }\n\n  private navigateHistory(e: HistoryNavigationEvent): boolean {\n    return e.data === Navigation.Forward ? this.history.rollover() : this.history.rollback();\n  }\n\n  private navigatePage(e: PageNavigationEvent): void {\n    const newAddress =\n        e.data === Navigation.Forward ? this.address + this.numBytesPerPage : this.address - this.numBytesPerPage;\n    const addressInRange = Math.max(0, Math.min(newAddress, this.outerMemoryLength - 1));\n    this.jumpToAddress(addressInRange);\n  }\n\n  private jumpToAddress(address: number): void {\n    if (address < 0 || address >= this.outerMemoryLength) {\n      console.warn(`Specified address is out of bounds: ${address}`);\n      return;\n    }\n    const historyEntry = new AddressHistoryEntry(address, () => this.jumpToAddress(address));\n    this.history.push(historyEntry);\n    this.address = address;\n    this.dispatchEvent(new AddressChangedEvent(this.address));\n    this.update();\n  }\n\n  private getPageRangeForAddress(address: number, numBytesPerPage: number): {start: number, end: number} {\n    const pageNumber = Math.floor(address / numBytesPerPage);\n    const pageStartAddress = pageNumber * numBytesPerPage;\n    const pageEndAddress = Math.min(pageStartAddress + numBytesPerPage, this.outerMemoryLength);\n    return {start: pageStartAddress, end: pageEndAddress};\n  }\n\n  private resize(event: ResizeEvent): void {\n    this.numBytesPerPage = event.data;\n    this.update();\n  }\n\n  private update(): void {\n    const {start, end} = this.getPageRangeForAddress(this.address, this.numBytesPerPage);\n    if (start < this.memoryOffset || end > this.memoryOffset + this.memory.length) {\n      this.dispatchEvent(new MemoryRequestEvent(start, end, this.address));\n    } else {\n      this.render();\n    }\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-inspector', LinearMemoryInspector);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-inspector': LinearMemoryInspector;\n  }\n}\n"]}