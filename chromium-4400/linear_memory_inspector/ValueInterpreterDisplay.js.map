{"version":3,"file":"ValueInterpreterDisplay.js","sourceRoot":"","sources":["../../../../../front_end/linear_memory_inspector/ValueInterpreterDisplay.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as LitHtml from '../third_party/lit-html/lit-html.js';\n\nimport {Endianness, format, isNumber, isValidMode, ValueType, ValueTypeMode, valueTypeModeToLocalizedString, valueTypeToLocalizedString} from './ValueInterpreterDisplayUtils.js';\n\nimport ls = Common.ls;\nconst {render, html} = LitHtml;\n\nconst DEFAULT_MODE_MAPPING = new Map([\n  [ValueType.Int8, ValueTypeMode.Decimal],\n  [ValueType.Int16, ValueTypeMode.Decimal],\n  [ValueType.Int32, ValueTypeMode.Decimal],\n  [ValueType.Int64, ValueTypeMode.Decimal],\n  [ValueType.Float32, ValueTypeMode.Decimal],\n  [ValueType.Float64, ValueTypeMode.Decimal],\n  [ValueType.String, ValueTypeMode.None],\n]);\n\nconst SORTED_VALUE_TYPES = Array.from(DEFAULT_MODE_MAPPING.keys());\n\nexport interface ValueDisplayData {\n  buffer: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n}\n\nexport class ValueInterpreterDisplay extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private endianness = Endianness.Little;\n  private buffer = new ArrayBuffer(0);\n  private valueTypes: Set<ValueType> = new Set();\n  private valueTypeModeConfig: Map<ValueType, ValueTypeMode> = DEFAULT_MODE_MAPPING;\n\n  set data(data: ValueDisplayData) {\n    this.buffer = data.buffer;\n    this.endianness = data.endianness;\n    this.valueTypes = data.valueTypes;\n    this.valueTypeModeConfig = DEFAULT_MODE_MAPPING;\n\n    if (data.valueTypeModes) {\n      data.valueTypeModes.forEach((mode, valueType) => {\n        if (isValidMode(valueType, mode)) {\n          this.valueTypeModeConfig.set(valueType, mode);\n        }\n      });\n    }\n\n    this.render();\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>\n        :host {\n          flex: auto;\n          display: flex;\n        }\n\n        .mode-type {\n          color: var(--text-highlight-color);\n        }\n\n        .value-types {\n          width: 100%;\n          display: grid;\n          grid-template-columns: auto auto 1fr;\n          grid-column-gap: 24px;\n          grid-row-gap: 4px;\n          overflow: hidden;\n          padding-left: 12px;\n          padding-right: 12px;\n        }\n\n        .value-type-cell-multiple-values {\n          gap: 5px;\n        }\n\n        .value-type-cell {\n          height: 21px;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          overflow: hidden;\n          display: flex;\n        }\n\n        .value-type-cell-no-mode {\n          grid-column: 1 / 3;\n        }\n\n      </style>\n      <div class=\"value-types\">\n        ${SORTED_VALUE_TYPES.map(type => this.valueTypes.has(type) ? this.showValue(type) : '')}\n      </div>\n    `, this.shadow, {eventContext: this},\n    );\n    // clang-format on\n  }\n\n  private showValue(type: ValueType): LitHtml.TemplateResult {\n    const mode = this.valueTypeModeConfig.get(type);\n    if (!mode) {\n      throw new Error(`No mode found for type ${type}`);\n    }\n    const localizedType = valueTypeToLocalizedString(type);\n    const localizedMode = valueTypeModeToLocalizedString(mode);\n\n    const unsignedValue = this.parse({type, signed: false});\n    const signedValue = this.parse({type, signed: true});\n    const showSignedAndUnsigned = signedValue !== unsignedValue;\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      ${isNumber(type) ?\n        html`\n          <span class=\"value-type-cell\">${localizedType}</span>\n          <span class=\"mode-type value-type-cell\">${localizedMode}</span>` :\n        html`\n          <span class=\"value-type-cell-no-mode value-type-cell\">${localizedType}</span>`}\n\n        ${showSignedAndUnsigned ?\n        html`\n          <div class=\"value-type-cell-multiple-values value-type-cell\">\n            <span data-value=\"true\" title=${ls`Unsigned value`}>${unsignedValue}</span>\n            <span>/<span>\n            <span data-value=\"true\" title=${ls`Signed value`}>${signedValue}</span>\n          </div>` :\n        html`\n          <span class=\"value-type-cell\" data-value=\"true\">${unsignedValue}</span>`}\n    `;\n    // clang-format on\n  }\n\n  private parse(data: {type: ValueType, signed?: boolean}): string {\n    const mode = this.valueTypeModeConfig.get(data.type);\n    if (!mode) {\n      console.error(`No known way of showing value for ${data.type}`);\n      return 'N/A';\n    }\n\n    return format(\n        {buffer: this.buffer, type: data.type, endianness: this.endianness, signed: data.signed || false, mode});\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter-display', ValueInterpreterDisplay);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-display': ValueInterpreterDisplay;\n  }\n}\n"]}