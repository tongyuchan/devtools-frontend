{"version":3,"file":"LinearMemoryInspectorController.js","sourceRoot":"","sources":["../../../../../front_end/linear_memory_inspector/LinearMemoryInspectorController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {LinearMemoryInspectorPaneImpl} from './LinearMemoryInspectorPane.js';\n\nconst LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP = 'linear-memory-inspector';\nconst MEMORY_TRANSFER_MIN_CHUNK_SIZE = 1000;\nexport const ACCEPTED_MEMORY_TYPES = ['webassemblymemory', 'typedarray', 'dataview', 'arraybuffer'];\n\nlet controllerInstance: LinearMemoryInspectorController;\n\nexport interface LazyUint8Array {\n  getRange(start: number, end: number): Promise<Uint8Array>;\n  length(): number;\n}\n\nexport class RemoteArrayWrapper implements LazyUint8Array {\n  private remoteArray: SDK.RemoteObject.RemoteArray;\n\n  constructor(array: SDK.RemoteObject.RemoteArray) {\n    this.remoteArray = array;\n  }\n\n  length(): number {\n    return this.remoteArray.length();\n  }\n\n  async getRange(start: number, end: number): Promise<Uint8Array> {\n    const newEnd = Math.min(end, this.remoteArray.length());\n    if (start < 0 || start > newEnd) {\n      console.error(`Requesting invalid range of memory: (${start}, ${end})`);\n      return Promise.resolve(new Uint8Array(0));\n    }\n    const array = await this.extractByteArray(start, newEnd);\n    return new Uint8Array(array);\n  }\n\n  private async extractByteArray(start: number, end: number): Promise<number[]> {\n    const promises = [];\n    for (let i = start; i < end; ++i) {\n      // TODO(kimanh): encode requested range in base64 string.\n      promises.push(this.remoteArray.at(i).then(x => x.value));\n    }\n    return await Promise.all(promises);\n  }\n}\n\nexport async function getUint8ArrayFromObject(obj: SDK.RemoteObject.RemoteObject):\n    Promise<SDK.RemoteObject.RemoteObject> {\n  const response = await obj.runtimeModel()._agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return new Uint8Array(this instanceof ArrayBuffer || this instanceof SharedArrayBuffer ? this : this.buffer); }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing Uint8Array could not be retrieved: ${error}`);\n  }\n  return obj.runtimeModel().createRemoteObject(response.result);\n}\n\nexport async function getBufferFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<SDK.RemoteObject.RemoteObject> {\n  const response = await obj.runtimeModel()._agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return this instanceof ArrayBuffer || this instanceof SharedArrayBuffer ? this : this.buffer; }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing ArrayBuffer could not be retrieved: ${error}`);\n  }\n  return obj.runtimeModel().createRemoteObject(response.result);\n}\n\nexport async function getBufferIdFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<string> {\n  const bufferObj = await getBufferFromObject(obj);\n  const properties = await bufferObj.getOwnProperties(false);\n  const idProperty = properties.internalProperties?.find(prop => prop.name === '[[ArrayBufferData]]');\n  const id = idProperty?.value?.value;\n  if (!id) {\n    throw new Error('Unable to find backing store id for array buffer');\n  }\n  return id;\n}\n\nexport class LinearMemoryInspectorController extends SDK.SDKModel.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  private paneInstance = LinearMemoryInspectorPaneImpl.instance();\n  private bufferIdToRemoteObject: Map<string, SDK.RemoteObject.RemoteObject> = new Map();\n\n  private constructor() {\n    super();\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.SDKModel.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.onGlobalObjectClear, this);\n    this.paneInstance.addEventListener('view-closed', this.viewClosed.bind(this));\n\n    SDK.SDKModel.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.onDebuggerPause, this);\n  }\n\n  static instance(): LinearMemoryInspectorController {\n    if (controllerInstance) {\n      return controllerInstance;\n    }\n    controllerInstance = new LinearMemoryInspectorController();\n    return controllerInstance;\n  }\n\n  static async getMemoryForAddress(memoryWrapper: LazyUint8Array, address: number):\n      Promise<{memory: Uint8Array, offset: number}> {\n    // Provide a chunk of memory that covers the address to show and some before and after\n    // as 1. the address shown is not necessarily at the beginning of a page and\n    // 2. to allow for fewer memory requests.\n    const memoryChunkStart = Math.max(0, address - MEMORY_TRANSFER_MIN_CHUNK_SIZE / 2);\n    const memoryChunkEnd = memoryChunkStart + MEMORY_TRANSFER_MIN_CHUNK_SIZE;\n    const memory = await memoryWrapper.getRange(memoryChunkStart, memoryChunkEnd);\n    return {memory: memory, offset: memoryChunkStart};\n  }\n\n  static async getMemoryRange(memoryWrapper: LazyUint8Array, start: number, end: number): Promise<Uint8Array> {\n    // Check that the requested start is within bounds.\n    // If the requested end is larger than the actual\n    // memory, it will be automatically capped when\n    // requesting the range.\n    if (start < 0 || start > end || start >= memoryWrapper.length()) {\n      throw new Error('Requested range is out of bounds.');\n    }\n    const chunkEnd = Math.max(end, start + MEMORY_TRANSFER_MIN_CHUNK_SIZE);\n    return await memoryWrapper.getRange(start, chunkEnd);\n  }\n\n  async openInspectorView(obj: SDK.RemoteObject.RemoteObject, address: number): Promise<void> {\n    const bufferId = await getBufferIdFromObject(obj);\n\n    if (this.bufferIdToRemoteObject.has(bufferId)) {\n      this.paneInstance.reveal(bufferId);\n      UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n      return;\n    }\n\n    const callFrame = UI.Context.Context.instance().flavor(SDK.DebuggerModel.CallFrame);\n    if (!callFrame) {\n      throw new Error(`Cannot find call frame for ${obj.description}.`);\n    }\n    const uiSourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(callFrame.script.sourceURL);\n\n    if (!uiSourceCode) {\n      throw new Error(`Cannot find source code object for source url: ${callFrame.script.sourceURL}`);\n    }\n    const title = uiSourceCode.displayName();\n    const objBoundToLMI = await getUint8ArrayFromObject(obj);\n\n    this.bufferIdToRemoteObject.set(bufferId, objBoundToLMI);\n    const remoteArray = new SDK.RemoteObject.RemoteArray(objBoundToLMI);\n    const arrayWrapper = new RemoteArrayWrapper(remoteArray);\n\n    this.paneInstance.create(bufferId, title, arrayWrapper, address);\n    UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n  }\n\n  modelRemoved(model: SDK.RuntimeModel.RuntimeModel): void {\n    for (const [bufferId, remoteObject] of this.bufferIdToRemoteObject) {\n      if (model === remoteObject.runtimeModel()) {\n        this.bufferIdToRemoteObject.delete(bufferId);\n        this.paneInstance.close(bufferId);\n      }\n    }\n  }\n\n  private onDebuggerPause(event: Common.EventTarget.EventTargetEvent): void {\n    const debuggerModel = event.data as SDK.DebuggerModel.DebuggerModel;\n    for (const [bufferId, remoteObject] of this.bufferIdToRemoteObject) {\n      if (debuggerModel.runtimeModel() === remoteObject.runtimeModel()) {\n        this.paneInstance.refreshView(bufferId);\n      }\n    }\n  }\n\n  private onGlobalObjectClear(event: Common.EventTarget.EventTargetEvent): void {\n    const debuggerModel = event.data as SDK.DebuggerModel.DebuggerModel;\n    this.modelRemoved(debuggerModel.runtimeModel());\n  }\n\n  private viewClosed(event: Common.EventTarget.EventTargetEvent): void {\n    const bufferId = event.data;\n    const remoteObj = this.bufferIdToRemoteObject.get(bufferId);\n    if (remoteObj) {\n      remoteObj.release();\n    }\n    this.bufferIdToRemoteObject.delete(event.data);\n  }\n}\n"]}