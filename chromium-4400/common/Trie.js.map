{"version":3,"file":"Trie.js","sourceRoot":"","sources":["../../../../../front_end/common/Trie.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class Trie {\n  constructor() {\n    /** @type {number} */\n    this._size;\n    /** @type {number} */\n    this._root = 0;\n    /** @type {!Array<!Object<string, number>>} */\n    this._edges;\n    /** @type {!Array<boolean>} */\n    this._isWord;\n    /** @type {!Array<number>} */\n    this._wordsInSubtree;\n    /** @type {!Array<number>} */\n    this._freeNodes;\n\n    this.clear();\n  }\n\n  /**\n   * @param {string} word\n   */\n  add(word) {\n    let node = this._root;\n    ++this._wordsInSubtree[this._root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      let next = this._edges[node][edge];\n      if (!next) {\n        if (this._freeNodes.length) {\n          // No need to reset any fields since they were properly cleaned up in remove().\n          next = /** @type {number} */ (this._freeNodes.pop());\n        } else {\n          next = this._size++;\n          this._isWord.push(false);\n          this._wordsInSubtree.push(0);\n          this._edges.push(/** @type {?} */ ({__proto__: null}));\n        }\n        this._edges[node][edge] = next;\n      }\n      ++this._wordsInSubtree[next];\n      node = next;\n    }\n    this._isWord[node] = true;\n  }\n\n  /**\n   * @param {string} word\n   * @return {boolean}\n   */\n  remove(word) {\n    if (!this.has(word)) {\n      return false;\n    }\n    let node = this._root;\n    --this._wordsInSubtree[this._root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      const next = this._edges[node][edge];\n      if (!--this._wordsInSubtree[next]) {\n        delete this._edges[node][edge];\n        this._freeNodes.push(next);\n      }\n      node = next;\n    }\n    this._isWord[node] = false;\n    return true;\n  }\n\n  /**\n   * @param {string} word\n   * @return {boolean}\n   */\n  has(word) {\n    let node = this._root;\n    for (let i = 0; i < word.length; ++i) {\n      node = this._edges[node][word[i]];\n      if (!node) {\n        return false;\n      }\n    }\n    return this._isWord[node];\n  }\n\n  /**\n   * @param {string=} prefix\n   * @return {!Array<string>}\n   */\n  words(prefix) {\n    prefix = prefix || '';\n    let node = this._root;\n    for (let i = 0; i < prefix.length; ++i) {\n      node = this._edges[node][prefix[i]];\n      if (!node) {\n        return [];\n      }\n    }\n    /** @type {!Array<string>} */\n    const results = [];\n    this._dfs(node, prefix, results);\n    return results;\n  }\n\n  /**\n   * @param {number} node\n   * @param {string} prefix\n   * @param {!Array<string>} results\n   */\n  _dfs(node, prefix, results) {\n    if (this._isWord[node]) {\n      results.push(prefix);\n    }\n    const edges = this._edges[node];\n    for (const edge in edges) {\n      this._dfs(edges[edge], prefix + edge, results);\n    }\n  }\n\n  /**\n   * @param {string} word\n   * @param {boolean} fullWordOnly\n   * @return {string}\n   */\n  longestPrefix(word, fullWordOnly) {\n    let node = this._root;\n    let wordIndex = 0;\n    for (let i = 0; i < word.length; ++i) {\n      node = this._edges[node][word[i]];\n      if (!node) {\n        break;\n      }\n      if (!fullWordOnly || this._isWord[node]) {\n        wordIndex = i + 1;\n      }\n    }\n    return word.substring(0, wordIndex);\n  }\n\n  clear() {\n    this._size = 1;\n    this._root = 0;\n    /** @type {!Array<!Object<string, number>>} */\n    this._edges = [/** @type {?} */ ({__proto__: null})];\n    /** @type {!Array<boolean>} */\n    this._isWord = [false];\n    /** @type {!Array<number>} */\n    this._wordsInSubtree = [0];\n    /** @type {!Array<number>} */\n    this._freeNodes = [];\n  }\n}\n"]}