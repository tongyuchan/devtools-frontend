{"version":3,"file":"Revealer.js","sourceRoot":"","sources":["../../../../../front_end/common/Revealer.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAExC;;GAEG;AACH,MAAM,OAAO,QAAQ;IACnB;;;;OAIG;IACH,MAAM,CAAC,MAAM,EAAE,SAAS;QACtB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF;AAED;;;;GAIG;AACH,MAAM,CAAC,IAAI,MAAM,GAAG,UAAS,UAAU,EAAE,SAAS;IAChD,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,GAAG,UAAU,CAAC,CAAC,CAAC;KACjE;IACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;SACjC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC;SAClC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAE7E;;;OAGG;IACH,SAAS,MAAM,CAAC,SAAS;QACvB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACzC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SACpF;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,SAAS;IACxC,MAAM,GAAG,SAAS,CAAC;AACrB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,UAAS,UAAU;IAClD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAClF,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IACD,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC;AAC/C,CAAC,CAAC","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../root/root.js';\n\n/**\n * @interface\n */\nexport class Revealer {\n  /**\n   * @param {!Object} object\n   * @param {boolean=} omitFocus\n   * @return {!Promise<void>}\n   */\n  reveal(object, omitFocus) {\n    throw new Error('not implemented');\n  }\n}\n\n/**\n * @param {?Object} revealable\n * @param {boolean=} omitFocus\n * @return {!Promise.<void>}\n */\nexport let reveal = function(revealable, omitFocus) {\n  if (!revealable) {\n    return Promise.reject(new Error('Can\\'t reveal ' + revealable));\n  }\n  return Root.Runtime.Runtime.instance()\n      .allInstances(Revealer, revealable)\n      .then(revealers => reveal(/** @type {!Array<!Revealer>} */ (revealers)));\n\n  /**\n   * @param {!Array.<!Revealer>} revealers\n   * @return {!Promise.<void>}\n   */\n  function reveal(revealers) {\n    const promises = [];\n    for (let i = 0; i < revealers.length; ++i) {\n      promises.push(revealers[i].reveal(/** @type {!Object} */ (revealable), omitFocus));\n    }\n    return Promise.race(promises);\n  }\n};\n\n/**\n * @param {function(?Object, boolean=):!Promise.<undefined>} newReveal\n */\nexport function setRevealForTest(newReveal) {\n  reveal = newReveal;\n}\n\n/**\n * @param {?Object} revealable\n * @return {?string}\n */\nexport const revealDestination = function(revealable) {\n  const extension = Root.Runtime.Runtime.instance().extension(Revealer, revealable);\n  if (!extension) {\n    return null;\n  }\n  return extension.descriptor()['destination'];\n};\n"]}