{"version":3,"file":"Console.js","sourceRoot":"","sources":["../../../../../front_end/common/Console.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,eAAe,CAAC;AAErC;;GAEG;AACH,IAAI,eAAe,CAAC;AAEpB,MAAM,OAAO,OAAQ,SAAQ,aAAa;IACxC;;;;OAIG;IACH;QACE,KAAK,EAAE,CAAC;QACR,gCAAgC;QAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAC,GAAG,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5C,IAAI,CAAC,eAAe,IAAI,QAAQ,EAAE;YAChC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;SACjC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI;QAC1B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,IAAI,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,GAAG,CAAC,IAAI;QACN,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;CACF;AAED,qBAAqB;AACrB,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,YAAY,EAAE,MAAM,CAAC,cAAc,CAAC;CACrC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,MAAM,OAAO,OAAO;IAClB;;;;;OAKG;IACH,YAAY,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\n/**\n * @type {!Console}\n */\nlet consoleInstance;\n\nexport class Console extends ObjectWrapper {\n  /**\n   * Instantiable via the instance() factory below.\n   *\n   * @private\n   */\n  constructor() {\n    super();\n    /** @type {!Array.<!Message>} */\n    this._messages = [];\n  }\n\n  /**\n   * @param {{forceNew: boolean}} opts\n   */\n  static instance({forceNew} = {forceNew: false}) {\n    if (!consoleInstance || forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  /**\n   * @param {string} text\n   * @param {!MessageLevel} level\n   * @param {boolean=} show\n   */\n  addMessage(text, level, show) {\n    const message = new Message(text, level || MessageLevel.Info, Date.now(), show || false);\n    this._messages.push(message);\n    this.dispatchEventToListeners(Events.MessageAdded, message);\n  }\n\n  /**\n   * @param {string} text\n   */\n  log(text) {\n    this.addMessage(text, MessageLevel.Info);\n  }\n\n  /**\n   * @param {string} text\n   */\n  warn(text) {\n    this.addMessage(text, MessageLevel.Warning);\n  }\n\n  /**\n   * @param {string} text\n   */\n  error(text) {\n    this.addMessage(text, MessageLevel.Error, true);\n  }\n\n  /**\n   * @return {!Array.<!Message>}\n   */\n  messages() {\n    return this._messages;\n  }\n\n  show() {\n    this.showPromise();\n  }\n\n  /**\n   * @return {!Promise.<void>}\n   */\n  showPromise() {\n    return reveal(this);\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  MessageAdded: Symbol('messageAdded')\n};\n\n/**\n * @enum {string}\n */\nexport const MessageLevel = {\n  Info: 'info',\n  Warning: 'warning',\n  Error: 'error'\n};\n\nexport class Message {\n  /**\n   * @param {string} text\n   * @param {!MessageLevel} level\n   * @param {number} timestamp\n   * @param {boolean} show\n   */\n  constructor(text, level, timestamp, show) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n  }\n}\n"]}