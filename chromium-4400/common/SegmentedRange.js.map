{"version":3,"file":"SegmentedRange.js","sourceRoot":"","sources":["../../../../../front_end/common/SegmentedRange.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nexport class Segment {\n  /**\n   * @param {number} begin\n   * @param {number} end\n   * @param {*} data\n   */\n  constructor(begin, end, data) {\n    if (begin > end) {\n      throw new Error('Invalid segment');\n    }\n    this.begin = begin;\n    this.end = end;\n    this.data = data;\n  }\n\n  /**\n   * @param {!Segment} that\n   * @return {boolean}\n   */\n  intersects(that) {\n    return this.begin < that.end && that.begin < this.end;\n  }\n}\n\nexport class SegmentedRange {\n  /**\n   * @param {(function(!Segment, !Segment): ?Segment)=} mergeCallback\n   */\n  constructor(mergeCallback) {\n    /** @type {!Array<!Segment>} */\n    this._segments = [];\n    this._mergeCallback = mergeCallback;\n  }\n\n  /**\n   * @param {!Segment} newSegment\n   */\n  append(newSegment) {\n    // 1. Find the proper insertion point for new segment\n    let startIndex = Platform.ArrayUtilities.lowerBound(this._segments, newSegment, (a, b) => a.begin - b.begin);\n    let endIndex = startIndex;\n    let merged = null;\n    if (startIndex > 0) {\n      // 2. Try mering the preceding segment\n      const precedingSegment = this._segments[startIndex - 1];\n      merged = this._tryMerge(precedingSegment, newSegment);\n      if (merged) {\n        --startIndex;\n        newSegment = merged;\n      } else if (this._segments[startIndex - 1].end >= newSegment.begin) {\n        // 2a. If merge failed and segments overlap, adjust preceding segment.\n        // If an old segment entirely contains new one, split it in two.\n        if (newSegment.end < precedingSegment.end) {\n          this._segments.splice(\n              startIndex, 0, new Segment(newSegment.end, precedingSegment.end, precedingSegment.data));\n        }\n        precedingSegment.end = newSegment.begin;\n      }\n    }\n    // 3. Consume all segments that are entirely covered by the new one.\n    while (endIndex < this._segments.length && this._segments[endIndex].end <= newSegment.end) {\n      ++endIndex;\n    }\n    // 4. Merge or adjust the succeeding segment if it overlaps.\n    if (endIndex < this._segments.length) {\n      merged = this._tryMerge(newSegment, this._segments[endIndex]);\n      if (merged) {\n        endIndex++;\n        newSegment = merged;\n      } else if (newSegment.intersects(this._segments[endIndex])) {\n        this._segments[endIndex].begin = newSegment.end;\n      }\n    }\n    this._segments.splice(startIndex, endIndex - startIndex, newSegment);\n  }\n\n  /**\n   * @param {!SegmentedRange} that\n   */\n  appendRange(that) {\n    that.segments().forEach(segment => this.append(segment));\n  }\n\n  /**\n   * @return {!Array<!Segment>}\n   */\n  segments() {\n    return this._segments;\n  }\n\n  /**\n   * @param {!Segment} first\n   * @param {!Segment} second\n   * @return {?Segment}\n   */\n  _tryMerge(first, second) {\n    const merged = this._mergeCallback && this._mergeCallback(first, second);\n    if (!merged) {\n      return null;\n    }\n    merged.begin = first.begin;\n    merged.end = Math.max(first.end, second.end);\n    return merged;\n  }\n}\n"]}