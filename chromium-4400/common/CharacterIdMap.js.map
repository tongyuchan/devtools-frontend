{"version":3,"file":"CharacterIdMap.js","sourceRoot":"","sources":["../../../../../front_end/common/CharacterIdMap.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B;;GAEG;AACH,MAAM,OAAO,cAAc;IACzB;QACE,8BAA8B;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;QACrC,8BAA8B;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,MAAM;QACX,IAAI,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,EAAE;YACd,IAAI,IAAI,CAAC,SAAS,IAAI,MAAM,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;YACD,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAChD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACjD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,SAAS;QAChB,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvD,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @template T\n */\nexport class CharacterIdMap {\n  constructor() {\n    /** @type {!Map<T, string>} */\n    this._elementToCharacter = new Map();\n    /** @type {!Map<string, T>} */\n    this._characterToElement = new Map();\n    this._charCode = 33;\n  }\n\n  /**\n   * @param {T} object\n   * @return {string}\n   */\n  toChar(object) {\n    let character = this._elementToCharacter.get(object);\n    if (!character) {\n      if (this._charCode >= 0xFFFF) {\n        throw new Error('CharacterIdMap ran out of capacity!');\n      }\n      character = String.fromCharCode(this._charCode++);\n      this._elementToCharacter.set(object, character);\n      this._characterToElement.set(character, object);\n    }\n    return character;\n  }\n\n  /**\n   * @param {string} character\n   * @return {?T}\n   */\n  fromChar(character) {\n    const object = this._characterToElement.get(character);\n    if (object === undefined) {\n      return null;\n    }\n    return object;\n  }\n}\n"]}