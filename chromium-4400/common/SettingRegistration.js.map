{"version":3,"file":"SettingRegistration.js","sourceRoot":"","sources":["../../../../../front_end/common/SettingRegistration.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,EAAE,EAAC,MAAM,yBAAyB,CAAC;AAC3C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAIxC,MAAM,kBAAkB,GAA+B,EAAE,CAAC;AAC1D,MAAM,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;AAGzC,MAAM,UAAU,wBAAwB,CAAC,YAAiC;IACxE,MAAM,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;IAC7C,IAAI,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,2BAA2B,WAAW,GAAG,CAAC,CAAC;KAC5D;IACD,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,qBAAqB;IACnC,OAAO,kBAAkB,CAAC,MAAM,CAC5B,OAAO,CAAC,EAAE,CACN,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAC,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAC,CAAC,CAAC,CAAC;AACpH,CAAC;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,QAAQ,EAAE,EAAE,CAAA,UAAU;IACtB,UAAU,EAAE,EAAE,CAAA,YAAY;IAC1B,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,WAAW,EAAE,EAAE,CAAA,aAAa;IAC5B,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,WAAW,EAAE,EAAE,CAAA,aAAa;IAC5B,QAAQ,EAAE,EAAE,CAAA,UAAU;IACtB,MAAM,EAAE,EAAE,CAAA,QAAQ;IAClB,SAAS,EAAE,EAAE,CAAA,WAAW;IACxB,IAAI,EAAE,EAAE,CAAA,MAAM;IACd,MAAM,EAAE,EAAE,CAAA,QAAQ;IAClB,SAAS,EAAE,EAAE,CAAA,WAAW;IACxB,MAAM,EAAE,EAAE,CAAA,QAAQ;CACnB,CAAC;AAIF,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,SAAS;CACnB,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport {ls} from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {SettingStorageType} from './Settings.js';\n\nconst registeredSettings: Array<SettingRegistration> = [];\nconst settingNameSet = new Set<string>();\n\n\nexport function registerSettingExtension(registration: SettingRegistration): void {\n  const settingName = registration.settingName;\n  if (settingNameSet.has(settingName)) {\n    throw new Error(`Duplicate setting name '${settingName}'`);\n  }\n  settingNameSet.add(settingName);\n  registeredSettings.push(registration);\n}\n\nexport function getRegisteredSettings(): Array<SettingRegistration> {\n  return registeredSettings.filter(\n      setting =>\n          Root.Runtime.Runtime.isDescriptorEnabled({experiment: setting.experiment, condition: setting.condition}));\n}\n\nexport const SettingCategoryObject = {\n  ELEMENTS: ls`Elements`,\n  APPEARANCE: ls`Appearance`,\n  SOURCES: ls`Sources`,\n  NETWORK: ls`Network`,\n  PERFORMANCE: ls`Performance`,\n  CONSOLE: ls`Console`,\n  PERSISTENCE: ls`Persistence`,\n  DEBUGGER: ls`Debugger`,\n  GLOBAL: ls`Global`,\n  RENDERING: ls`Rendering`,\n  GRID: ls`Grid`,\n  MOBILE: ls`Mobile`,\n  EMULATION: ls`Emulation`,\n  MEMORY: ls`Memory`,\n};\n\nexport type SettingCategory = typeof SettingCategoryObject[keyof typeof SettingCategoryObject];\n\nexport const SettingTypeObject = {\n  ARRAY: 'array',\n  REGEX: 'regex',\n  ENUM: 'enum',\n  BOOLEAN: 'boolean',\n};\n\nexport type SettingType = typeof SettingTypeObject[keyof typeof SettingTypeObject];\n\nexport interface RegExpSettingItem {\n  pattern: string;\n  disabled?: boolean;\n}\n\nexport interface SettingRegistration {\n  /**\n   * The category with which the setting is displayed in the UI.\n   */\n  category?: SettingCategory;\n  /**\n   * Used to sort on screen the settings that belong to the same category.\n   */\n  order?: number;\n  /**\n   * The title with which the setting is shown on screen.\n   */\n  title?: () => Platform.UIString.LocalizedString;\n  /**\n   * The title with which the setting is shown on screen, if the platform running DevTools is 'mac'.\n   * If not set, the 'title' field will be used instead.\n   */\n  titleMac?: () => Platform.UIString.LocalizedString;\n  /**\n   * The identifier of the setting.\n   */\n  settingName: string;\n  /**\n   * Determines how the possible values of the setting are expressed.\n   *\n   * - If the setting can only be enabled and disabled use BOOLEAN\n   * - If the setting has a list of possible values use ENUM\n   * - If each setting value is a set of objects use ARRAY\n   * - If the setting value is a regular expression use REGEX\n   */\n  settingType: SettingType;\n  /**\n   * The value set by default to the setting.\n   */\n  defaultValue: unknown;\n  /**\n   * Words used to find a setting in the Command Menu.\n   */\n  tags?: Array<() => Platform.UIString.LocalizedString>;\n  /**\n   * The possible values the setting can have, each with a description composed of a title and an optional text.\n   */\n  options?: Array<SettingExtensionOption>;\n  /**\n   * Whether DevTools must be reloaded for a change in the setting to take effect.\n   */\n  reloadRequired?: boolean;\n  /**\n   * Determines if the setting value is stored in the global, local or session storage.\n   */\n  storageType?: SettingStorageType;\n  /**\n   * A condition that, when present in the queryParamsObject of Runtime, constraints the value\n   * of the setting to be changed only if the user set it.\n   */\n  userActionCondition?: string;\n  /**\n   * The name of the experiment a setting is associated with. Enabling and disabling the declared\n   * experiment will enable and disable the setting respectively.\n   */\n  experiment?: Root.Runtime.ExperimentName;\n  /**\n   * A condition represented as a string the setting's availability depends on. Conditions come\n   * from the queryParamsObject defined in Runtime and just as the experiment field, they determine the availability\n   * of the setting. A condition can be negated by prepending a ‘!’ to the value of the condition\n   * property and in that case the behaviour of the setting's availability will be inverted.\n   */\n  condition?: Root.Runtime.ConditionName;\n}\ninterface LocalizedSettingExtensionOption {\n  value: boolean|string;\n  title: () => Platform.UIString.LocalizedString;\n  text?: () => Platform.UIString.LocalizedString;\n  raw?: false;\n}\ninterface RawSettingExtensionOption {\n  value: boolean|string;\n  title: () => Platform.UIString.LocalizedString;\n  /**\n   * Text used to describe the option. Must be localized if 'raw' is false.\n   */\n  text?: string;\n  raw: true;\n}\nexport type SettingExtensionOption = LocalizedSettingExtensionOption|RawSettingExtensionOption;\n"]}