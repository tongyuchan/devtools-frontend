{"version":3,"file":"ColorUtils.js","sourceRoot":"","sources":["../../../../../front_end/common/ColorUtils.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Combine the two given colors according to alpha blending.\n * @param {!Array<number>} fgRGBA\n * @param {!Array<number>} bgRGBA\n * @return {!Array<number>}\n */\nexport function blendColors(fgRGBA, bgRGBA) {\n  const alpha = fgRGBA[3];\n  return [\n    ((1 - alpha) * bgRGBA[0]) + (alpha * fgRGBA[0]),\n    ((1 - alpha) * bgRGBA[1]) + (alpha * fgRGBA[1]),\n    ((1 - alpha) * bgRGBA[2]) + (alpha * fgRGBA[2]),\n    alpha + (bgRGBA[3] * (1 - alpha)),\n  ];\n}\n\n/**\n * @param {!Array<number>} rgba\n * @return {!Array<number>}\n */\nexport function rgbaToHsla([r, g, b, a]) {\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const diff = max - min;\n  const sum = max + min;\n\n  let h;\n  if (min === max) {\n    h = 0;\n  } else if (r === max) {\n    h = ((1 / 6 * (g - b) / diff) + 1) % 1;\n  } else if (g === max) {\n    h = (1 / 6 * (b - r) / diff) + 1 / 3;\n  } else {\n    h = (1 / 6 * (r - g) / diff) + 2 / 3;\n  }\n\n  const l = 0.5 * sum;\n\n  let s;\n  if (l === 0) {\n    s = 0;\n  } else if (l === 1) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = diff / sum;\n  } else {\n    s = diff / (2 - sum);\n  }\n\n  return [h, s, l, a];\n}\n\n/**\n* Calculate the luminance of this color using the WCAG algorithm.\n* See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n* @param {!Array<number>} rgba\n* @return {number}\n*/\nexport function luminance([rSRGB, gSRGB, bSRGB]) {\n  const r = rSRGB <= 0.03928 ? rSRGB / 12.92 : Math.pow(((rSRGB + 0.055) / 1.055), 2.4);\n  const g = gSRGB <= 0.03928 ? gSRGB / 12.92 : Math.pow(((gSRGB + 0.055) / 1.055), 2.4);\n  const b = bSRGB <= 0.03928 ? bSRGB / 12.92 : Math.pow(((bSRGB + 0.055) / 1.055), 2.4);\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the ratio to 1, for example for two two colors with a contrast ratio of 21:1, this function will return 21.\n * See http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n * @param {!Array<number>} fgRGBA\n * @param {!Array<number>} bgRGBA\n * @return {number}\n */\nexport function contrastRatio(fgRGBA, bgRGBA) {\n  const blendedFg = blendColors(fgRGBA, bgRGBA);\n  const fgLuminance = luminance(blendedFg);\n  const bgLuminance = luminance(bgRGBA);\n  const contrastRatio = (Math.max(fgLuminance, bgLuminance) + 0.05) / (Math.min(fgLuminance, bgLuminance) + 0.05);\n  return contrastRatio;\n}\n\n// Constants for basic APCA version.\n// See https://github.com/Myndex/SAPC-APCA\nconst sRGBtrc = 2.218;\nconst normBgExp = 0.38;\nconst normFgExp = 0.43;\nconst revBgExp = 0.5;\nconst revFgExp = 0.43;\nconst blkThrs = 0.02;\nconst blkClmp = 1.33;\nconst scaleBoW = 161.8;\nconst scaleWoB = 161.8;\n\n/**\n* Calculate relative luminance of a color.\n* See https://github.com/Myndex/SAPC-APCA\n* @param {!Array<number>} rgba\n* @return {number}\n*/\nexport function luminanceAPCA([rSRGB, gSRGB, bSRGB]) {\n  const r = Math.pow(rSRGB, sRGBtrc);\n  const g = Math.pow(gSRGB, sRGBtrc);\n  const b = Math.pow(bSRGB, sRGBtrc);\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * Calculate the contrast ratio between a foreground and a background color.\n * Returns the percentage of the predicted visual contrast.\n * See https://github.com/Myndex/SAPC-APCA\n *\n * @param {!Array<number>} fgRGBA\n * @param {!Array<number>} bgRGBA\n * @return {number}\n */\nexport function contrastRatioAPCA(fgRGBA, bgRGBA) {\n  return contrastRatioByLuminanceAPCA(luminanceAPCA(fgRGBA), luminanceAPCA(bgRGBA));\n}\n\n/**\n * @param {number} fgLuminance\n * @param {number} bgLuminance\n */\nexport function contrastRatioByLuminanceAPCA(fgLuminance, bgLuminance) {\n  if (bgLuminance >= fgLuminance) {  // Black text on white.\n    fgLuminance =\n        (fgLuminance > blkThrs) ? fgLuminance : fgLuminance + Math.pow(Math.abs(fgLuminance - blkThrs), blkClmp);\n    return (Math.pow(bgLuminance, normBgExp) - Math.pow(fgLuminance, normFgExp)) * scaleBoW;\n  }\n  // White text on black.\n  bgLuminance =\n      (bgLuminance > blkThrs) ? bgLuminance : (bgLuminance + Math.pow(Math.abs(bgLuminance - blkThrs), blkClmp));\n  return (Math.pow(bgLuminance, revBgExp) - Math.pow(fgLuminance, revFgExp)) * scaleWoB;\n}\n\n/**\n * Compute a desired luminance given a given luminance and a desired contrast\n * percentage according to APCA.\n * @param {number} luminance The given luminance.\n * @param {number} contrast The desired contrast percentage.\n * @param {boolean} lighter Whether the desired luminance is lighter or darker\n * than the given luminance. If no luminance can be found which meets this\n * requirement, a luminance which meets the inverse requirement will be\n * returned.\n * @return {number} The desired luminance.\n */\nexport function desiredLuminanceAPCA(luminance, contrast, lighter) {\n  function computeLuminance() {\n    if (!lighter) {  // Black text on white.\n      return Math.pow(Math.pow(luminance, normBgExp) - contrast / scaleBoW, 1 / normFgExp);\n    }\n    // White text on black.\n    luminance = (luminance > blkThrs) ? luminance : (luminance + Math.pow(Math.abs(luminance - blkThrs), blkClmp));\n    return Math.pow(contrast / scaleWoB + Math.pow(luminance, revBgExp), 1 / revFgExp);\n  }\n  let desiredLuminance = computeLuminance();\n  if (desiredLuminance < 0 || desiredLuminance > 1) {\n    lighter = !lighter;\n    desiredLuminance = computeLuminance();\n  }\n  return desiredLuminance;\n}\n\n// clang-format off\nconst contrastAPCALookupTable = [\n  // See https://github.com/Myndex/SAPC-APCA\n  // font size in px | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 weights\n  [12, -1, -1, -1, 120, 100, 90, 80, 80, 80],\n  [14, -1, -1, -1, 100, 90, 80, 75, 75, 75],\n  [16, -1, -1, 120, 90, 80, 75, 70, 70, 70],\n  [18, -1, -1, 110, 80, 75, 70, 67, 65, 65],\n  [20, -1, -1, 100, 78, 72, 67, 65, 60, 60],\n  [22, -1, -1, 90, 77, 71, 65, 62, 57, 57],\n  [24, -1, 120, 80, 75, 70, 65, 60, 55, 55],\n  [26, -1, 110, 79, 72, 67, 62, 59, 54, 54],\n  [28, -1, 100, 77, 70, 65, 60, 57, 53, 53],\n  [32, -1, 90, 76, 67, 62, 57, 53, 50, 48],\n  [36, 120, 80, 75, 65, 60, 55, 50, 48, 48],\n  [42, 110, 77, 73, 62, 57, 52, 48, 46, 42],\n  [48, 100, 75, 70, 60, 55, 50, 45, 42, 40],\n  [60, 90, 73, 65, 57, 52, 46, 42, 40, 40],\n  [72, 70, 60, 55, 50, 45, 40, 40, 40, 40],\n  [96, 80, 60, 55, 50, 45, 40, 40, 40, 40],\n  [120, 60, 55, 50, 47, 43, 40, 40, 40, 40],\n];\n// clang-format on\n\ncontrastAPCALookupTable.reverse();\n\n/**\n * @param {string} fontSize\n * @param {string} fontWeight\n * @return {?number}\n */\nexport function getAPCAThreshold(fontSize, fontWeight) {\n  const size = parseFloat(fontSize.replace('px', ''));\n  const weight = parseFloat(fontWeight);\n\n  // Go over the table backwards to find the first matching font size and then the weight.\n  // Fonts larger than 96px, use the thresholds for 96px.\n  // Fonts smaller than 12px, don't get any threshold meaning the font size needs to be increased.\n  for (const [rowSize, ...rowWeights] of contrastAPCALookupTable) {\n    if (size >= rowSize) {\n      for (const [idx, keywordWeight] of [900, 800, 700, 600, 500, 400, 300, 200, 100].entries()) {\n        if (weight >= keywordWeight) {\n          const threshold = rowWeights[rowWeights.length - 1 - idx];\n          return threshold === -1 ? null : threshold;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * @param {string} fontSize\n * @param {string} fontWeight\n * @return {boolean}\n */\nexport function isLargeFont(fontSize, fontWeight) {\n  const boldWeights = ['bold', 'bolder', '600', '700', '800', '900'];\n\n  const fontSizePx = parseFloat(fontSize.replace('px', ''));\n  const isBold = (boldWeights.indexOf(fontWeight) !== -1);\n\n  const fontSizePt = fontSizePx * 72 / 96;\n  if (isBold) {\n    return fontSizePt >= 14;\n  }\n  return fontSizePt >= 18;\n}\n\nconst contrastThresholds = {\n  largeFont: {aa: 3.0, aaa: 4.5},\n  normalFont: {aa: 4.5, aaa: 7.0}\n};\n\n/**\n * @param {string} fontSize\n * @param {string} fontWeight\n * @return {!{aa: number, aaa: number}}\n */\nexport function getContrastThreshold(fontSize, fontWeight) {\n  if (isLargeFont(fontSize, fontWeight)) {\n    return contrastThresholds.largeFont;\n  }\n  return contrastThresholds.normalFont;\n}\n"]}