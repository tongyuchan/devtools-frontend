{"version":3,"file":"RequestResponseView.js","sourceRoot":"","sources":["../../../../../front_end/network/RequestResponseView.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';  // eslint-disable-line no-unused-vars\nimport * as SourceFrame from '../source_frame/source_frame.js';\nimport * as UI from '../ui/ui.js';\n\nexport class RequestResponseView extends UI.Widget.VBox {\n  /**\n   * @param {!SDK.NetworkRequest.NetworkRequest} request\n   */\n  constructor(request) {\n    super();\n    this.element.classList.add('request-view');\n    /** @protected */\n    this.request = request;\n    /** @type {?Promise<!UI.Widget.Widget>} */\n    this._contentViewPromise = null;\n  }\n\n  /**\n   * @param {!SDK.NetworkRequest.NetworkRequest} request\n   * @param {!SDK.NetworkRequest.ContentData} contentData\n   * @return {boolean}\n   */\n  static _hasTextContent(request, contentData) {\n    const mimeType = request.mimeType || '';\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = request.contentType();\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Image) {\n      return mimeType.startsWith('image/svg');\n    }\n    if (resourceType.isTextType()) {\n      return true;\n    }\n    if (contentData.error) {\n      return false;\n    }\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      return Boolean(contentData.content) && !contentData.encoded;\n    }\n    return false;\n  }\n\n  /**\n   * @protected\n   * @param {!SDK.NetworkRequest.NetworkRequest} request\n   * @return {!Promise<?UI.Widget.Widget>}\n   */\n  static async sourceViewForRequest(request) {\n    let sourceView = requestToSourceView.get(request);\n    if (sourceView !== undefined) {\n      return sourceView;\n    }\n\n    const contentData = await request.contentData();\n    if (!RequestResponseView._hasTextContent(request, contentData)) {\n      requestToSourceView.delete(request);\n      return null;\n    }\n\n    const highlighterType = request.resourceType().canonicalMimeType() || request.mimeType;\n    sourceView = SourceFrame.ResourceSourceFrame.ResourceSourceFrame.createSearchableView(request, highlighterType);\n    requestToSourceView.set(request, sourceView);\n    return sourceView;\n  }\n\n  /**\n   * @override\n   * @final\n   */\n  wasShown() {\n    this._doShowPreview();\n  }\n\n  /**\n   * @return {!Promise<!UI.Widget.Widget>}\n   */\n  _doShowPreview() {\n    if (!this._contentViewPromise) {\n      this._contentViewPromise = this.showPreview();\n    }\n    return this._contentViewPromise;\n  }\n\n  /**\n   * @protected\n   * @return {!Promise<!UI.Widget.Widget>}\n   */\n  async showPreview() {\n    const responseView = await this.createPreview();\n    responseView.show(this.element);\n    return responseView;\n  }\n\n  /**\n   * @protected\n   * @return {!Promise<!UI.Widget.Widget>}\n   */\n  async createPreview() {\n    const contentData = await this.request.contentData();\n    const sourceView = await RequestResponseView.sourceViewForRequest(this.request);\n    if ((!contentData.content || !sourceView) && !contentData.error) {\n      return new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString('This request has no response data available.'));\n    }\n    if (contentData.content && sourceView) {\n      return sourceView;\n    }\n    return new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString('Failed to load response data'));\n  }\n\n  /**\n   * @param {number} line\n   */\n  async revealLine(line) {\n    const view = await this._doShowPreview();\n    if (view instanceof SourceFrame.ResourceSourceFrame.SearchableContainer) {\n      view.revealPosition(line);\n    }\n  }\n}\n\n/** @type {!WeakMap<!SDK.NetworkRequest.NetworkRequest, !UI.Widget.Widget>} */\nconst requestToSourceView = new WeakMap();\n"]}