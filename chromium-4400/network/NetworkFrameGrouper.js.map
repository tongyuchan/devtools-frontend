{"version":3,"file":"NetworkFrameGrouper.js","sourceRoot":"","sources":["../../../../../front_end/network/NetworkFrameGrouper.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAE9C,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAElC,OAAO,EAAC,gBAAgB,EAAC,MAAM,0BAA0B,CAAC;AAG1D;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAC9B;;OAEG;IACH,YAAY,UAAU;QACpB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,8EAA8E;QAC9E,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,OAAO;QACzB,MAAM,KAAK,GAAG,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC/E,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,UAAU,EAAE,EAAE;YAChC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,SAAS,EAAE;YACb,OAAO,SAAS,CAAC;SAClB;QACD,SAAS,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACzC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;CACF;AAED,MAAM,OAAO,cAAe,SAAQ,gBAAgB;IAClD;;;OAGG;IACH,YAAY,UAAU,EAAE,KAAK;QAC3B,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,UAAU,CAAC;IACpG,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,2BAA2B,CAAC,IAAI,EAAE,QAAQ;QACnD,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACjC,MAAM,WAAW;QACb,iDAAiD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACrG,IAAI,WAAW,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,0BAA0B,CAAC,CAAC,CAAC;YAC/F,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACvC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;SACpE;IACH,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as DataGrid from '../data_grid/data_grid.js';  // eslint-disable-line no-unused-vars\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {NetworkGroupNode} from './NetworkDataGridNode.js';\nimport {GroupLookupInterface, NetworkLogView} from './NetworkLogView.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @implements {GroupLookupInterface}\n */\nexport class NetworkFrameGrouper {\n  /**\n   * @param {!NetworkLogView} parentView\n   */\n  constructor(parentView) {\n    this._parentView = parentView;\n    /** @type {!Map<!SDK.ResourceTreeModel.ResourceTreeFrame, !FrameGroupNode>} */\n    this._activeGroups = new Map();\n  }\n\n  /**\n   * @override\n   * @param {!SDK.NetworkRequest.NetworkRequest} request\n   * @return {?NetworkGroupNode}\n   */\n  groupNodeForRequest(request) {\n    const frame = SDK.ResourceTreeModel.ResourceTreeModel.frameForRequest(request);\n    if (!frame || frame.isTopFrame()) {\n      return null;\n    }\n    let groupNode = this._activeGroups.get(frame);\n    if (groupNode) {\n      return groupNode;\n    }\n    groupNode = new FrameGroupNode(this._parentView, frame);\n    this._activeGroups.set(frame, groupNode);\n    return groupNode;\n  }\n\n  /**\n   * @override\n   */\n  reset() {\n    this._activeGroups.clear();\n  }\n}\n\nexport class FrameGroupNode extends NetworkGroupNode {\n  /**\n   * @param {!NetworkLogView} parentView\n   * @param {!SDK.ResourceTreeModel.ResourceTreeFrame} frame\n   */\n  constructor(parentView, frame) {\n    super(parentView);\n    this._frame = frame;\n  }\n\n  /**\n   * @override\n   */\n  displayName() {\n    return new Common.ParsedURL.ParsedURL(this._frame.url).domain() || this._frame.name || '<iframe>';\n  }\n\n  /**\n   * @override\n   * @param {!Element} cell\n   * @param {string} columnId\n   */\n  renderCell(/** @type {!HTMLElement} */ cell, columnId) {\n    super.renderCell(cell, columnId);\n    const columnIndex =\n        /** @type {!DataGrid.DataGrid.DataGridImpl<?>} */ (this.dataGrid).indexOfVisibleColumn(columnId);\n    if (columnIndex === 0) {\n      const name = this.displayName();\n      cell.appendChild(UI.Icon.Icon.create('largeicon-navigator-frame', 'network-frame-group-icon'));\n      UI.UIUtils.createTextChild(cell, name);\n      UI.Tooltip.Tooltip.install(cell, name);\n      this.setCellAccessibleName(cell.textContent || '', cell, columnId);\n    }\n  }\n}\n"]}