{"version":3,"file":"LiveLocation.js","sourceRoot":"","sources":["../../../../../front_end/bindings/LiveLocation.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,iBAAiB;AACjB,MAAM,OAAO,YAAY;IACvB;;OAEG;IACH,MAAM;QACJ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,UAAU;QACR,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,OAAO;IACP,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAC/B;;;OAGG;IACH,YAAY,cAAc,EAAE,YAAY;QACtC,sDAAsD;QACtD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE9B,6BAA6B;QAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,OAAO;SACR;QACD,mEAAmE;QACnE,iEAAiE;QACjE,+DAA+D;QAC/D,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;SACrD;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,IAAI,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU;QACd,MAAM,iBAAiB,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc;QAClB,MAAM,iBAAiB,CAAC;IAC1B,CAAC;CACF;AAED,MAAM,OAAO,gBAAgB;IAC3B;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,QAAQ;QACX,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,QAAQ;QACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,UAAU;QACR,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YACtC,QAAQ,CAAC,OAAO,EAAE,CAAC;SACpB;IACH,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Workspace from '../workspace/workspace.js';  // eslint-disable-line no-unused-vars\n\n/** @interface */\nexport class LiveLocation {\n  /**\n   * @return {!Promise<void>}\n   */\n  update() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!Promise<?Workspace.UISourceCode.UILocation>}\n   */\n  uiLocation() {\n    throw new Error('not implemented');\n  }\n\n  dispose() {\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   */\n  isIgnoreListed() {\n    throw new Error('not implemented');\n  }\n}\n\n/**\n * @implements {LiveLocation}\n */\nexport class LiveLocationWithPool {\n  /**\n   * @param {function(!LiveLocation):!Promise<void>} updateDelegate\n   * @param {!LiveLocationPool} locationPool\n   */\n  constructor(updateDelegate, locationPool) {\n    /** @type {?function(!LiveLocation):!Promise<void>} */\n    this._updateDelegate = updateDelegate;\n    this._locationPool = locationPool;\n    this._locationPool._add(this);\n\n    /** @type {?Promise<void>} */\n    this._updatePromise = null;\n  }\n\n  /**\n   * @override\n   */\n  async update() {\n    if (!this._updateDelegate) {\n      return;\n    }\n    // The following is a basic scheduling algorithm, guaranteeing that\n    // {_updateDelegate} is always run atomically. That is, we always\n    // wait for an update to finish before we trigger the next run.\n    if (this._updatePromise) {\n      await this._updatePromise.then(() => this.update());\n    } else {\n      this._updatePromise = this._updateDelegate(this);\n      await this._updatePromise;\n      this._updatePromise = null;\n    }\n  }\n\n  /**\n   * @override\n   * @return {!Promise<?Workspace.UISourceCode.UILocation>}\n   */\n  async uiLocation() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @override\n   */\n  dispose() {\n    this._locationPool._delete(this);\n    this._updateDelegate = null;\n  }\n\n  /**\n   * @override\n   * @return {!Promise<boolean>}\n   */\n  async isIgnoreListed() {\n    throw 'Not implemented';\n  }\n}\n\nexport class LiveLocationPool {\n  constructor() {\n    this._locations = new Set();\n  }\n\n  /**\n   * @param {!LiveLocation} location\n   */\n  _add(location) {\n    this._locations.add(location);\n  }\n\n  /**\n   * @param {!LiveLocation} location\n   */\n  _delete(location) {\n    this._locations.delete(location);\n  }\n\n  disposeAll() {\n    for (const location of this._locations) {\n      location.dispose();\n    }\n  }\n}\n"]}