{"version":3,"file":"ResourceLoader.js","sourceRoot":"","sources":["../../../../../front_end/host/ResourceLoader.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport {ls} from '../platform/platform.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport {LoadNetworkResourceResult} from './InspectorFrontendHostAPI.js';  // eslint-disable-line no-unused-vars\n\nexport const ResourceLoader = {};\n\nlet _lastStreamId = 0;\n\n/** @type {!Object.<number, !Common.StringOutputStream.OutputStream>} */\nconst _boundStreams = {};\n\n/**\n * @param {!Common.StringOutputStream.OutputStream} stream\n * @return {number}\n */\nconst _bindOutputStream = function(stream) {\n  _boundStreams[++_lastStreamId] = stream;\n  return _lastStreamId;\n};\n\n/**\n * @param {number} id\n */\nconst _discardOutputStream = function(id) {\n  _boundStreams[id].close();\n  delete _boundStreams[id];\n};\n\n/**\n * @param {number} id\n * @param {string} chunk\n */\nexport const streamWrite = function(id, chunk) {\n  _boundStreams[id].write(chunk);\n};\n\n/** @typedef\n{{\n    statusCode: number,\n    netError: (number|undefined),\n    netErrorName: (string|undefined),\n    urlValid: (boolean|undefined),\n    message: (string|undefined)\n}} */\n// @ts-ignore typedef.\nexport let LoadErrorDescription;\n\n/**\n * @param {string} url\n * @param {?Object.<string, string>} headers\n * @param {function(boolean, !Object.<string, string>, string, !LoadErrorDescription):void} callback\n */\nexport let load = function(url, headers, callback) {\n  const stream = new Common.StringOutputStream.StringOutputStream();\n  loadAsStream(url, headers, stream, mycallback);\n\n  /**\n   * @param {boolean} success\n   * @param {!Object.<string, string>} headers\n   * @param {!LoadErrorDescription} errorDescription\n   */\n  function mycallback(success, headers, errorDescription) {\n    callback(success, headers, stream.data(), errorDescription);\n  }\n};\n\n/**\n * @param {function(string, ?Object<string, string>, function(boolean, !Object<string, string>, string, !LoadErrorDescription): void): void} newLoad\n */\nexport function setLoadForTest(newLoad) {\n  load = newLoad;\n}\n\n/**\n * @param {number} netError\n * Keep this function in sync with `net_error_list.h` on the Chromium side.\n * @returns {string}\n */\nfunction getNetErrorCategory(netError) {\n  if (netError > -100) {\n    return ls`System error`;\n  }\n  if (netError > -200) {\n    return ls`Connection error`;\n  }\n  if (netError > -300) {\n    return ls`Certificate error`;\n  }\n  if (netError > -400) {\n    return ls`HTTP error`;\n  }\n  if (netError > -500) {\n    return ls`Cache error`;\n  }\n  if (netError > -600) {\n    return ls`Signed Exchange error`;\n  }\n  if (netError > -700) {\n    return ls`FTP error`;\n  }\n  if (netError > -800) {\n    return ls`Certificate manager error`;\n  }\n  if (netError > -900) {\n    return ls`DNS resolver error`;\n  }\n  return ls`Unknown error`;\n}\n\n/**\n * @param {number} netError\n * @returns {boolean}\n */\nfunction isHTTPError(netError) {\n  return netError <= -300 && netError > -400;\n}\n\n/**\n *\n * @param {number|undefined} netError\n * @param {number|undefined} httpStatusCode\n * @param {string|undefined} netErrorName\n */\nexport function netErrorToMessage(netError, httpStatusCode, netErrorName) {\n  if (netError === undefined || netErrorName === undefined) {\n    return null;\n  }\n  if (netError !== 0) {\n    if (isHTTPError(netError)) {\n      return ls`HTTP error: status code ${httpStatusCode}, ${netErrorName}`;\n    }\n    const errorCategory = getNetErrorCategory(netError);\n    // We don't localize here, as `errorCategory` is already localized,\n    // and `netErrorName` is an error code like 'net::ERR_CERT_AUTHORITY_INVALID'.\n    return `${errorCategory}: ${netErrorName}`;\n  }\n  return null;\n}\n\n/**\n * @param {!LoadNetworkResourceResult} response\n * @returns {!{success:boolean, description: !LoadErrorDescription}}\n */\nfunction createErrorMessageFromResponse(response) {\n  const {statusCode, netError, netErrorName, urlValid, messageOverride} = response;\n  let message = '';\n  const success = statusCode >= 200 && statusCode < 300;\n  if (typeof messageOverride === 'string') {\n    message = messageOverride;\n  } else if (!success) {\n    if (typeof netError === 'undefined') {\n      if (urlValid === false) {\n        message = ls`Invalid URL`;\n      } else {\n        message = ls`Unknown error`;\n      }\n    } else {\n      const maybeMessage = netErrorToMessage(netError, statusCode, netErrorName);\n      if (maybeMessage) {\n        message = maybeMessage;\n      }\n    }\n  }\n  console.assert(success === (message.length === 0));\n  return {success, description: {statusCode, netError, netErrorName, urlValid, message}};\n}\n\n/**\n * @param {string} url\n * @return {!Promise<string>}\n */\nconst loadXHR = url => {\n  return new Promise((successCallback, failureCallback) => {\n    function onReadyStateChanged() {\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (xhr.status !== 200) {\n        xhr.onreadystatechange = null;\n        failureCallback(new Error(String(xhr.status)));\n        return;\n      }\n      xhr.onreadystatechange = null;\n      successCallback(xhr.responseText);\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.withCredentials = false;\n    xhr.open('GET', url, true);\n    xhr.onreadystatechange = onReadyStateChanged;\n    xhr.send(null);\n  });\n};\n\n/**\n * @param {string} url\n * @param {?Object.<string, string>} headers\n * @param {!Common.StringOutputStream.OutputStream} stream\n * @param {function(boolean, !Object.<string, string>, !LoadErrorDescription):void=} callback\n */\nexport const loadAsStream = function(url, headers, stream, callback) {\n  const streamId = _bindOutputStream(stream);\n  const parsedURL = new Common.ParsedURL.ParsedURL(url);\n  if (parsedURL.isDataURL()) {\n    loadXHR(url).then(dataURLDecodeSuccessful).catch(dataURLDecodeFailed);\n    return;\n  }\n\n  const rawHeaders = [];\n  if (headers) {\n    for (const key in headers) {\n      rawHeaders.push(key + ': ' + headers[key]);\n    }\n  }\n  InspectorFrontendHostInstance.loadNetworkResource(url, rawHeaders.join('\\r\\n'), streamId, finishedCallback);\n\n  /**\n   * @param {!LoadNetworkResourceResult} response\n   */\n  function finishedCallback(response) {\n    if (callback) {\n      const {success, description} = createErrorMessageFromResponse(response);\n      callback(success, response.headers || {}, description);\n    }\n    _discardOutputStream(streamId);\n  }\n\n  /**\n   * @param {string} text\n   */\n  function dataURLDecodeSuccessful(text) {\n    streamWrite(streamId, text);\n    finishedCallback(/** @type {!LoadNetworkResourceResult} */ ({statusCode: 200}));\n  }\n\n  /**\n   * @param {*} xhrStatus\n   */\n  function dataURLDecodeFailed(xhrStatus) {\n    /** @type {string} */\n    const messageOverride = ls`Decoding Data URL failed`;\n    finishedCallback(\n        /** @type {!LoadNetworkResourceResult} */ ({statusCode: 404, messageOverride}));\n  }\n};\n"]}