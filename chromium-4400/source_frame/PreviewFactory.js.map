{"version":3,"file":"PreviewFactory.js","sourceRoot":"","sources":["../../../../../front_end/source_frame/PreviewFactory.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAE9C,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAElC,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AACvC,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AACvC,OAAO,EAAC,mBAAmB,EAAC,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,MAAM,OAAO,cAAc;IACzB;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ;QAC3C,IAAI,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3E,IAAI,YAAY,KAAK,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE;YAC5D,YAAY,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;SACvC;QAED,QAAQ,YAAY,EAAE;YACpB,KAAK,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK;gBAC1C,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC3C,KAAK,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI;gBACzC,OAAO,IAAI,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC3C;QAED,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;QACxD,IAAI,eAAe,CAAC,OAAO,KAAK,IAAI,EAAE;YACpC,OAAO,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;YAC5B,OAAO,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;SACvF;QAED,IAAI,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;QACtC,IAAI,MAAM,QAAQ,CAAC,cAAc,EAAE,EAAE;YACnC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAChC;QAED,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACtD,IAAI,SAAS,EAAE;YACb,OAAO,OAAO,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;SAChD;QAED,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC;SACjB;QAED,IAAI,YAAY,CAAC,UAAU,EAAE,EAAE;YAC7B,MAAM,eAAe,GACjB,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,oBAAoB,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC,iBAAiB,EAAE,CAAC;YACnG,OAAO,mBAAmB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,eAAe,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACxG;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as TextUtils from '../text_utils/text_utils.js';  // eslint-disable-line no-unused-vars\nimport * as UI from '../ui/ui.js';\n\nimport {FontView} from './FontView.js';\nimport {ImageView} from './ImageView.js';\nimport {JSONView} from './JSONView.js';\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {XMLView} from './XMLView.js';\n\nexport class PreviewFactory {\n  /**\n   * @param {!TextUtils.ContentProvider.ContentProvider} provider\n   * @param {string} mimeType\n   * @returns {!Promise<?UI.Widget.Widget>}\n   */\n  static async createPreview(provider, mimeType) {\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = provider.contentType();\n    }\n\n    switch (resourceType) {\n      case Common.ResourceType.resourceTypes.Image:\n        return new ImageView(mimeType, provider);\n      case Common.ResourceType.resourceTypes.Font:\n        return new FontView(mimeType, provider);\n    }\n\n    const deferredContent = await provider.requestContent();\n    if (deferredContent.content === null) {\n      return new UI.EmptyWidget.EmptyWidget(deferredContent.error);\n    }\n    if (!deferredContent.content) {\n      return new UI.EmptyWidget.EmptyWidget(Common.UIString.UIString('Nothing to preview'));\n    }\n\n    let content = deferredContent.content;\n    if (await provider.contentEncoded()) {\n      content = window.atob(content);\n    }\n\n    const parsedXML = XMLView.parseXML(content, mimeType);\n    if (parsedXML) {\n      return XMLView.createSearchableView(parsedXML);\n    }\n\n    const jsonView = await JSONView.createView(content);\n    if (jsonView) {\n      return jsonView;\n    }\n\n    if (resourceType.isTextType()) {\n      const highlighterType =\n          mimeType.replace(/;.*/, '') /* remove charset */ || provider.contentType().canonicalMimeType();\n      return ResourceSourceFrame.createSearchableView(provider, highlighterType, true /* autoPrettyPrint */);\n    }\n\n    return null;\n  }\n}\n"]}