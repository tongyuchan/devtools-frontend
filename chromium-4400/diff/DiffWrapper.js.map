{"version":3,"file":"DiffWrapper.js","sourceRoot":"","sources":["../../../../../front_end/diff/DiffWrapper.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nexport const DiffWrapper = {\n  /**\n   * @param {string} text1\n   * @param {string} text2\n   * @param {boolean=} cleanup\n   * @return {!Array.<!{0: number, 1: string}>}\n   */\n  charDiff: function(text1, text2, cleanup) {\n    const differ = new diff_match_patch();\n    const diff = differ.diff_main(text1, text2);\n    if (cleanup) {\n      differ.diff_cleanupSemantic(diff);\n    }\n    return diff;\n  },\n\n  /**\n   * @param {!Array.<string>} lines1\n   * @param {!Array.<string>} lines2\n   * @return {!DiffArray}\n   */\n  lineDiff: function(lines1, lines2) {\n    /** @type {!Common.CharacterIdMap.CharacterIdMap<string>} */\n    const idMap = new Common.CharacterIdMap.CharacterIdMap();\n    const text1 = lines1.map(line => idMap.toChar(line)).join('');\n    const text2 = lines2.map(line => idMap.toChar(line)).join('');\n\n    const diff = DiffWrapper.charDiff(text1, text2);\n    const lineDiff = [];\n    for (let i = 0; i < diff.length; i++) {\n      const lines = [];\n      for (let j = 0; j < diff[i][1].length; j++) {\n        lines.push(idMap.fromChar(diff[i][1][j]) || '');\n      }\n\n      lineDiff.push({0: diff[i][0], 1: lines});\n    }\n    return lineDiff;\n  },\n\n  /**\n   * @param {!DiffArray} diff\n   * @return {!Array<!Array<number>>}\n   */\n  convertToEditDiff: function(diff) {\n    const normalized = [];\n    let added = 0;\n    let removed = 0;\n    for (let i = 0; i < diff.length; ++i) {\n      const token = diff[i];\n      if (token[0] === Operation.Equal) {\n        flush();\n        normalized.push([Operation.Equal, token[1].length]);\n      } else if (token[0] === Operation.Delete) {\n        removed += token[1].length;\n      } else {\n        added += token[1].length;\n      }\n    }\n    flush();\n    return normalized;\n\n    function flush() {\n      if (added && removed) {\n        const min = Math.min(added, removed);\n        normalized.push([Operation.Edit, min]);\n        added -= min;\n        removed -= min;\n      }\n      if (added || removed) {\n        const balance = added - removed;\n        const type = balance < 0 ? Operation.Delete : Operation.Insert;\n        normalized.push([type, Math.abs(balance)]);\n        added = 0;\n        removed = 0;\n      }\n    }\n  },\n\n  /**\n   * Scores character-sequence diffs, giving higher scores for longer sequences.\n   * @param {string} item\n   * @param {string} against\n   * @return {number}\n   */\n  characterScore: function(item, against) {\n    let score = 0;\n    const diff = DiffWrapper.charDiff(item, against);\n    for (let i = 0; i < diff.length; ++i) {\n      if (diff[i][0] === Operation.Equal) {\n        score += diff[i][1].length * diff[i][1].length;\n      }\n    }\n    return score;\n  },\n\n};\n\n/** @enum {number} */\nexport const Operation = {\n  Equal: 0,\n  Insert: 1,\n  Delete: -1,\n  Edit: 2\n};\n\n/** @typedef {!Array<!{0: !Operation, 1: !Array<string>}>} */\n// @ts-ignore typedef\nexport let DiffArray;\n"]}