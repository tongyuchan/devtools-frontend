{"version":3,"file":"JavaScriptMetadata.js","sourceRoot":"","sources":["../../../../../front_end/javascript_metadata/JavaScriptMetadata.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD;;GAEG;AACH,MAAM,OAAO,sBAAsB;IACjC;QACE,mDAAmD;QACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,iEAAiE;QACjE,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,iEAAiE;QACjE,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAEhC,KAAK,MAAM,cAAc,IAAI,eAAe,EAAE;YAC5C,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;gBAC5B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aAC3E;iBAAM,IAAI,cAAc,CAAC,MAAM,EAAE;gBAChC,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACpE,IAAI,CAAC,YAAY,EAAE;oBACjB,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;oBACzB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;iBAChE;gBACD,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aAClE;iBAAM;gBACL,IAAI,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACxE,IAAI,CAAC,cAAc,EAAE;oBACnB,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;oBAC3B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;iBACpE;gBACD,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;aACpE;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,2BAA2B,CAAC,IAAI;QAC9B,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACH,2BAA2B,CAAC,IAAI,EAAE,iBAAiB;QACjD,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACpE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACH,yBAAyB,CAAC,IAAI,EAAE,uBAAuB;QACrD,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IACxC,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\n\nimport {NativeFunctions} from './NativeFunctions.js';\n\n/**\n * @implements {Common.JavaScriptMetaData.JavaScriptMetaData}\n */\nexport class JavaScriptMetadataImpl {\n  constructor() {\n    /** @type {!Map<string, !Array<!Array<string>>>} */\n    this._uniqueFunctions = new Map();\n    /** @type {!Map<string, !Map<string, !Array<!Array<string>>>>} */\n    this._instanceMethods = new Map();\n    /** @type {!Map<string, !Map<string, !Array<!Array<string>>>>} */\n    this._staticMethods = new Map();\n\n    for (const nativeFunction of NativeFunctions) {\n      if (!nativeFunction.receiver) {\n        this._uniqueFunctions.set(nativeFunction.name, nativeFunction.signatures);\n      } else if (nativeFunction.static) {\n        let staticMethod = this._staticMethods.get(nativeFunction.receiver);\n        if (!staticMethod) {\n          staticMethod = new Map();\n          this._staticMethods.set(nativeFunction.receiver, staticMethod);\n        }\n        staticMethod.set(nativeFunction.name, nativeFunction.signatures);\n      } else {\n        let instanceMethod = this._instanceMethods.get(nativeFunction.receiver);\n        if (!instanceMethod) {\n          instanceMethod = new Map();\n          this._instanceMethods.set(nativeFunction.receiver, instanceMethod);\n        }\n        instanceMethod.set(nativeFunction.name, nativeFunction.signatures);\n      }\n    }\n  }\n\n  /**\n   * @override\n   * @param {string} name\n   * @return {?Array<!Array<string>>}\n   */\n  signaturesForNativeFunction(name) {\n    return this._uniqueFunctions.get(name) || null;\n  }\n\n  /**\n   * @override\n   * @param {string} name\n   * @param {string} receiverClassName\n   * @return {?Array<!Array<string>>}\n   */\n  signaturesForInstanceMethod(name, receiverClassName) {\n    const instanceMethod = this._instanceMethods.get(receiverClassName);\n    if (!instanceMethod) {\n      return null;\n    }\n    return instanceMethod.get(name) || null;\n  }\n\n  /**\n   * @override\n   * @param {string} name\n   * @param {string} receiverConstructorName\n   * @return {?Array<!Array<string>>}\n   */\n  signaturesForStaticMethod(name, receiverConstructorName) {\n    const staticMethod = this._staticMethods.get(receiverConstructorName);\n    if (!staticMethod) {\n      return null;\n    }\n    return staticMethod.get(name) || null;\n  }\n}\n"]}