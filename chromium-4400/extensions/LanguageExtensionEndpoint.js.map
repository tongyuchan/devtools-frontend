{"version":3,"file":"LanguageExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../front_end/extensions/LanguageExtensionEndpoint.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Bindings from '../bindings/bindings.js';  // eslint-disable-line no-unused-vars\nimport * as SDK from '../sdk/sdk.js';                 // eslint-disable-line no-unused-vars\n\nexport class LanguageExtensionEndpoint extends Bindings.DebuggerLanguagePlugins.DebuggerLanguagePlugin {\n  /**\n   * @param {string} name\n   * @param {!{language: string, symbol_types: !Array<string>}} supportedScriptTypes\n   * @param {!MessagePort} port\n   */\n  constructor(name, supportedScriptTypes, port) {\n    super(name);\n    // @ts-expect-error TODO(crbug.com/1011811): Fix after extensionAPI is migrated.\n    this._commands = Extensions.extensionAPI.LanguageExtensionPluginCommands;\n    // @ts-expect-error TODO(crbug.com/1011811): Fix after extensionAPI is migrated.\n    this._events = Extensions.extensionAPI.LanguageExtensionPluginEvents;\n    this._supportedScriptTypes = supportedScriptTypes;\n    this._port = port;\n    this._port.onmessage = this._onResponse.bind(this);\n    this._nextRequestId = 0;\n    this._pendingRequests = new Map();\n  }\n\n  /**\n   * @param {string} method\n   * @param {*} parameters\n   * @return {!Promise<*>}\n   */\n  _sendRequest(method, parameters) {\n    return new Promise((resolve, reject) => {\n      const requestId = this._nextRequestId++;\n      this._pendingRequests.set(requestId, {resolve, reject});\n      this._port.postMessage({requestId, method, parameters});\n    });\n  }\n\n  /**\n   * @param {!MessageEvent<!{requestId: number, result: *, error: ?Error} | !{event: string}>} event\n   */\n  _onResponse({data}) {\n    if ('event' in data) {\n      const {event} = data;\n      switch (event) {\n        case this._events.UnregisteredLanguageExtensionPlugin: {\n          for (const {reject} of this._pendingRequests.values()) {\n            reject(new Error('Language extension endpoint disconnected'));\n          }\n          this._pendingRequests.clear();\n          this._port.close();\n          const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n          if (pluginManager) {\n            pluginManager.removePlugin(this);\n          }\n          break;\n        }\n      }\n      return;\n    }\n    const {requestId, result, error} = data;\n    if (!this._pendingRequests.has(requestId)) {\n      console.error(`No pending request ${requestId}`);\n      return;\n    }\n    const {resolve, reject} = this._pendingRequests.get(requestId);\n    this._pendingRequests.delete(requestId);\n    if (error) {\n      reject(new Error(error.message));\n    } else {\n      resolve(result);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!SDK.Script.Script} script\n   * @return {boolean} True if this plugin should handle this script\n   */\n  handleScript(script) {\n    const language = script.scriptLanguage();\n    return language !== null && script.debugSymbols !== null && language === this._supportedScriptTypes.language &&\n        this._supportedScriptTypes.symbol_types.includes(script.debugSymbols.type);\n  }\n\n  /** Notify the plugin about a new script\n   * @override\n   * @param {string} rawModuleId\n   * @param {string} symbolsURL - URL of a file providing the debug symbols for this module\n   * @param {!Bindings.DebuggerLanguagePlugins.RawModule} rawModule\n   * @return {!Promise<!Array<string>>} - An array of URLs for the source files for the raw module\n   */\n  addRawModule(rawModuleId, symbolsURL, rawModule) {\n    return /** @type {!Promise<!Array<string>>} */ (\n        this._sendRequest(this._commands.AddRawModule, {rawModuleId, symbolsURL, rawModule}));\n  }\n\n  /**\n   * Notifies the plugin that a script is removed.\n   * @override\n   * @param {string} rawModuleId\n   * @return {!Promise<void>}\n   */\n  removeRawModule(rawModuleId) {\n    return /** @type {!Promise<void>} */ (this._sendRequest(this._commands.RemoveRawModule, {rawModuleId}));\n  }\n\n  /** Find locations in raw modules from a location in a source file\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.SourceLocation} sourceLocation\n   * @return {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>}\n   */\n  sourceLocationToRawLocation(sourceLocation) {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ (\n        this._sendRequest(this._commands.SourceLocationToRawLocation, {sourceLocation}));\n  }\n\n  /** Find locations in source files from a location in a raw module\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} rawLocation\n   * @return {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.SourceLocation>>}\n   */\n  rawLocationToSourceLocation(rawLocation) {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.SourceLocation>>} */ (\n        this._sendRequest(this._commands.RawLocationToSourceLocation, {rawLocation}));\n  }\n\n  /**\n   * @override\n   * @param {string} type\n   * @return {!Promise<!Bindings.DebuggerLanguagePlugins.ScopeInfo>}\n   */\n  getScopeInfo(type) {\n    return /** @type {!Promise<!Bindings.DebuggerLanguagePlugins.ScopeInfo>} */ (\n        this._sendRequest(this._commands.GetScopeInfo, {type}));\n  }\n\n  /** List all variables in lexical scope at a given location in a raw module\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} rawLocation\n   * @return {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.Variable>>}\n   */\n  listVariablesInScope(rawLocation) {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.Variable>>} */ (\n        this._sendRequest(this._commands.ListVariablesInScope, {rawLocation}));\n  }\n\n  /** Evaluate the content of a variable in a given lexical scope\n   * @override\n   * @param {string} name\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} location\n   * @return {!Promise<?Bindings.DebuggerLanguagePlugins.EvaluatorModule>}\n   */\n  evaluateVariable(name, location) {\n    return /** @type {!Promise<?Bindings.DebuggerLanguagePlugins.EvaluatorModule>}*/ (\n        this._sendRequest(this._commands.EvaluateVariable, {name, location}));\n  }\n\n  /** List all function names (including inlined frames) at location\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} rawLocation\n   * @return {!Promise<!{frames: !Array<!Bindings.DebuggerLanguagePlugins.FunctionInfo>}>}\n   */\n  getFunctionInfo(rawLocation) {\n    return /** @type {!Promise<!{frames: !Array<!Bindings.DebuggerLanguagePlugins.FunctionInfo>}>} */ (\n        this._sendRequest(this._commands.GetFunctionInfo, {rawLocation}));\n  }\n\n  /** Find locations in raw modules corresponding to the inline function\n   *  that rawLocation is in.\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} rawLocation\n   * @return {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>}\n   */\n  getInlinedFunctionRanges(rawLocation) {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ (\n        this._sendRequest(this._commands.GetInlinedFunctionRanges, {rawLocation}));\n  }\n\n  /** Find locations in raw modules corresponding to inline functions\n   *  called by the function or inline frame that rawLocation is in.\n   * @override\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} rawLocation\n   * @return {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>}\n   */\n  getInlinedCalleesRanges(rawLocation) {\n    return /** @type {!Promise<!Array<!Bindings.DebuggerLanguagePlugins.RawLocationRange>>} */ (\n        this._sendRequest(this._commands.GetInlinedCalleesRanges, {rawLocation}));\n  }\n\n  /**\n   * @override\n   * @param {string} expression\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} context\n   * @return {!Promise<?{typeInfos: !Array<!Bindings.DebuggerLanguagePlugins.TypeInfo>, base: !Bindings.DebuggerLanguagePlugins.EvalBase}>}\n   */\n  getTypeInfo(expression, context) {\n    return /** @type {!Promise<?{typeInfos: !Array<!Bindings.DebuggerLanguagePlugins.TypeInfo>, base: !Bindings.DebuggerLanguagePlugins.EvalBase}>} */ (\n        this._sendRequest(this._commands.GetTypeInfo, {expression, context}));\n  }\n\n  /**\n   * @override\n   * @param {string|{base: !Bindings.DebuggerLanguagePlugins.EvalBase, field: !Array<!Bindings.DebuggerLanguagePlugins.FieldInfo>}} expressionOrField\n   * @param {!Bindings.DebuggerLanguagePlugins.RawLocation} context\n   * @return {!Promise<!{js: string}>}\n   */\n  getFormatter(expressionOrField, context) {\n    return /** @type {!Promise<!{js: string}>} */ (\n        this._sendRequest(this._commands.GetFormatter, {expressionOrField, context}));\n  }\n\n  /**\n   * @override\n   * @param {string} rawModuleId\n   * @param {string} sourceFileURL\n   * @return {!Promise<!Array<number>|undefined>}\n   */\n  async getMappedLines(rawModuleId, sourceFileURL) {\n    return /** {!Promise<!Array<number>|undefined>} */ (\n        this._sendRequest(this._commands.GetMappedLines, {rawModuleId, sourceFileURL}));\n  }\n\n  /**\n   * @override\n   */\n  dispose() {\n  }\n}\n"]}