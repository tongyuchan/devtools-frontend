{"version":3,"file":"ConsoleFilter.js","sourceRoot":"","sources":["../../../../../front_end/console/ConsoleFilter.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {ConsoleViewMessage} from './ConsoleViewMessage.js';  // eslint-disable-line no-unused-vars\n\nexport class ConsoleFilter {\n  /**\n   * @param {string} name\n   * @param {!Array<!TextUtils.TextUtils.ParsedFilter>} parsedFilters\n   * @param {?SDK.RuntimeModel.ExecutionContext} executionContext\n   * @param {!Object<string, boolean>=} levelsMask\n   */\n  constructor(name, parsedFilters, executionContext, levelsMask) {\n    this.name = name;\n    this.parsedFilters = parsedFilters;\n    this.executionContext = executionContext;\n    this.levelsMask = levelsMask || ConsoleFilter.defaultLevelsFilterValue();\n  }\n\n  /**\n   * @return {!Object<string, boolean>}\n   */\n  static allLevelsFilterValue() {\n    /**\n     * @type {!Object<string, boolean>}\n     */\n    const result = {};\n    for (const name of Object.values(SDK.ConsoleModel.MessageLevel)) {\n      result[name] = true;\n    }\n    return result;\n  }\n\n  /**\n   * @return {!Object<string, boolean>}\n   */\n  static defaultLevelsFilterValue() {\n    const result = ConsoleFilter.allLevelsFilterValue();\n    result[SDK.ConsoleModel.MessageLevel.Verbose] = false;\n    return result;\n  }\n\n  /**\n   * @param {string} level\n   * @return {!Object<string, boolean>}\n   */\n  static singleLevelMask(level) {\n    /**\n     * @type {!Object<string, boolean>}\n     */\n    const result = {};\n    result[level] = true;\n    return result;\n  }\n\n  /**\n   * @return {!ConsoleFilter}\n   */\n  clone() {\n    const parsedFilters = this.parsedFilters.map(TextUtils.TextUtils.FilterParser.cloneFilter);\n    const levelsMask = Object.assign({}, this.levelsMask);\n    return new ConsoleFilter(this.name, parsedFilters, this.executionContext, levelsMask);\n  }\n\n  /**\n   * @param {!ConsoleViewMessage} viewMessage\n   * @return {boolean}\n   */\n  shouldBeVisible(viewMessage) {\n    const message = viewMessage.consoleMessage();\n    if (this.executionContext &&\n        (this.executionContext.runtimeModel !== message.runtimeModel() ||\n         this.executionContext.id !== message.executionContextId)) {\n      return false;\n    }\n\n    if (message.type === SDK.ConsoleModel.MessageType.Command || message.type === SDK.ConsoleModel.MessageType.Result ||\n        message.isGroupMessage()) {\n      return true;\n    }\n\n    if (message.level && !this.levelsMask[/** @type {string} */ (message.level)]) {\n      return false;\n    }\n\n    for (const filter of this.parsedFilters) {\n      if (!filter.key) {\n        if (filter.regex && viewMessage.matchesFilterRegex(filter.regex) === filter.negative) {\n          return false;\n        }\n        if (filter.text && viewMessage.matchesFilterText(filter.text) === filter.negative) {\n          return false;\n        }\n      } else {\n        switch (filter.key) {\n          case FilterType.Context: {\n            if (!passesFilter(filter, message.context, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Source: {\n            const sourceNameForMessage = message.source ?\n                SDK.ConsoleModel.MessageSourceDisplayName.get(\n                    /** @type {!SDK.ConsoleModel.MessageSource} */ (message.source)) :\n                message.source;\n            if (!passesFilter(filter, sourceNameForMessage, true /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n          case FilterType.Url: {\n            if (!passesFilter(filter, message.url, false /* exactMatch */)) {\n              return false;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n\n    /**\n     * @param {!TextUtils.TextUtils.ParsedFilter} filter\n     * @param {?string|undefined} value\n     * @param {boolean} exactMatch\n     * @return {boolean}\n     */\n    function passesFilter(filter, value, exactMatch) {\n      if (!filter.text) {\n        return Boolean(value) === filter.negative;\n      }\n      if (!value) {\n        return !filter.text === !filter.negative;\n      }\n      const filterText = /** @type {string} */ (filter.text).toLowerCase();\n      const lowerCaseValue = value.toLowerCase();\n      if (exactMatch && (lowerCaseValue === filterText) === filter.negative) {\n        return false;\n      }\n      if (!exactMatch && lowerCaseValue.includes(filterText) === filter.negative) {\n        return false;\n      }\n      return true;\n    }\n  }\n}\n\n/** @enum {string} */\nexport const FilterType = {\n  Context: 'context',\n  Source: 'source',\n  Url: 'url'\n};\n"]}