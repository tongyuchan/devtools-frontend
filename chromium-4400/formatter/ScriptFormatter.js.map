{"version":3,"file":"ScriptFormatter.js","sourceRoot":"","sources":["../../../../../front_end/formatter/ScriptFormatter.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Platform from '../platform/platform.js';\n\nimport {FormatMapping, FormatResult, formatterWorkerPool} from './FormatterWorkerPool.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @interface\n */\nexport class FormatterInterface {}\n\n/**\n * @param {!Common.ResourceType.ResourceType} contentType\n * @param {string} mimeType\n * @param {string} content\n * @param {function(string, !FormatterSourceMapping):!Promise<void>} callback\n */\nFormatterInterface.format = function(contentType, mimeType, content, callback) {\n  if (contentType.isDocumentOrScriptOrStyleSheet()) {\n    new ScriptFormatter(mimeType, content, callback);\n  } else {\n    new ScriptIdentityFormatter(mimeType, content, callback);\n  }\n};\n\n/**\n * @param {!Array<number>} lineEndings\n * @param {number} lineNumber\n * @param {number} columnNumber\n * @return {number}\n */\nFormatterInterface.locationToPosition = function(lineEndings, lineNumber, columnNumber) {\n  const position = lineNumber ? lineEndings[lineNumber - 1] + 1 : 0;\n  return position + columnNumber;\n};\n/**\n * @param {!Array<number>} lineEndings\n * @param {number} position\n * @return {!Array<number>}\n */\nFormatterInterface.positionToLocation = function(lineEndings, position) {\n  const lineNumber =\n      Platform.ArrayUtilities.upperBound(lineEndings, position - 1, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n  let columnNumber;\n  if (!lineNumber) {\n    columnNumber = position;\n  } else {\n    columnNumber = position - lineEndings[lineNumber - 1] - 1;\n  }\n  return [lineNumber, columnNumber];\n};\n\n/**\n * @implements {FormatterInterface}\n */\nexport class ScriptFormatter {\n  /**\n   * @param {string} mimeType\n   * @param {string} content\n   * @param {function(string, !FormatterSourceMapping):!Promise<void>} callback\n   */\n  constructor(mimeType, content, callback) {\n    this._mimeType = mimeType;\n    this._originalContent = content.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '');\n    this._callback = callback;\n\n    this._initialize();\n  }\n\n  async _initialize() {\n    const pool = formatterWorkerPool();\n    const indent = Common.Settings.Settings.instance().moduleSetting('textEditorIndent').get();\n\n    const formatResult = await pool.format(this._mimeType, this._originalContent, indent);\n    if (!formatResult) {\n      this._callback(this._originalContent, new IdentityFormatterSourceMapping());\n    } else {\n      this._didFormatContent(formatResult);\n    }\n  }\n\n  /**\n   * @param {!FormatResult} formatResult\n   */\n  _didFormatContent(formatResult) {\n    const originalContentLineEndings = Platform.StringUtilities.findLineEndingIndexes(this._originalContent);\n    const formattedContentLineEndings = Platform.StringUtilities.findLineEndingIndexes(formatResult.content);\n\n    const sourceMapping =\n        new FormatterSourceMappingImpl(originalContentLineEndings, formattedContentLineEndings, formatResult.mapping);\n    this._callback(formatResult.content, sourceMapping);\n  }\n}\n\n/**\n * @implements {FormatterInterface}\n */\nclass ScriptIdentityFormatter {\n  /**\n   * @param {string} mimeType\n   * @param {string} content\n   * @param {function(string, !FormatterSourceMapping):!Promise<void>} callback\n   */\n  constructor(mimeType, content, callback) {\n    callback(content, new IdentityFormatterSourceMapping());\n  }\n}\n\n/**\n * @interface\n */\nexport class FormatterSourceMapping {\n  /**\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  originalToFormatted(lineNumber, columnNumber) {\n    throw new Error('Not implemented yet.');\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  formattedToOriginal(lineNumber, columnNumber) {\n    throw new Error('Not implemented yet.');\n  }\n}\n\n/**\n * @implements {FormatterSourceMapping}\n */\nclass IdentityFormatterSourceMapping {\n  /**\n   * @override\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  originalToFormatted(lineNumber, columnNumber) {\n    return [lineNumber, columnNumber || 0];\n  }\n\n  /**\n   * @override\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  formattedToOriginal(lineNumber, columnNumber) {\n    return [lineNumber, columnNumber || 0];\n  }\n}\n\n/**\n * @implements {FormatterSourceMapping}\n */\nclass FormatterSourceMappingImpl {\n  /**\n   * @param {!Array.<number>} originalLineEndings\n   * @param {!Array.<number>} formattedLineEndings\n   * @param {!FormatMapping} mapping\n   */\n  constructor(originalLineEndings, formattedLineEndings, mapping) {\n    this._originalLineEndings = originalLineEndings;\n    this._formattedLineEndings = formattedLineEndings;\n    this._mapping = mapping;\n  }\n\n  /**\n   * @override\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  originalToFormatted(lineNumber, columnNumber) {\n    const originalPosition =\n        FormatterInterface.locationToPosition(this._originalLineEndings, lineNumber, columnNumber || 0);\n    const formattedPosition =\n        this._convertPosition(this._mapping.original, this._mapping.formatted, originalPosition || 0);\n    return FormatterInterface.positionToLocation(this._formattedLineEndings, formattedPosition);\n  }\n\n  /**\n   * @override\n   * @param {number} lineNumber\n   * @param {number=} columnNumber\n   * @return {!Array.<number>}\n   */\n  formattedToOriginal(lineNumber, columnNumber) {\n    const formattedPosition =\n        FormatterInterface.locationToPosition(this._formattedLineEndings, lineNumber, columnNumber || 0);\n    const originalPosition = this._convertPosition(this._mapping.formatted, this._mapping.original, formattedPosition);\n    return FormatterInterface.positionToLocation(this._originalLineEndings, originalPosition || 0);\n  }\n\n  /**\n   * @param {!Array.<number>} positions1\n   * @param {!Array.<number>} positions2\n   * @param {number} position\n   * @return {number}\n   */\n  _convertPosition(positions1, positions2, position) {\n    const index =\n        Platform.ArrayUtilities.upperBound(positions1, position, Platform.ArrayUtilities.DEFAULT_COMPARATOR) - 1;\n    let convertedPosition = positions2[index] + position - positions1[index];\n    if (index < positions2.length - 1 && convertedPosition > positions2[index + 1]) {\n      convertedPosition = positions2[index + 1];\n    }\n    return convertedPosition;\n  }\n}\n"]}