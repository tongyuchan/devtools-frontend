{"version":3,"file":"SearchConfig.js","sourceRoot":"","sources":["../../../../../front_end/search/SearchConfig.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Platform from '../platform/platform.js';\nimport * as Workspace from '../workspace/workspace.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @implements {Workspace.Workspace.ProjectSearchConfig}\n */\nexport class SearchConfig {\n  /**\n   * @param {string} query\n   * @param {boolean} ignoreCase\n   * @param {boolean} isRegex\n   */\n  constructor(query, ignoreCase, isRegex) {\n    this._query = query;\n    this._ignoreCase = ignoreCase;\n    this._isRegex = isRegex;\n    this._parse();\n  }\n\n  /**\n   * @param {{query: string, ignoreCase: boolean, isRegex: boolean}} object\n   * @return {!SearchConfig}\n   */\n  static fromPlainObject(object) {\n    return new SearchConfig(object.query, object.ignoreCase, object.isRegex);\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  query() {\n    return this._query;\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  ignoreCase() {\n    return this._ignoreCase;\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  isRegex() {\n    return this._isRegex;\n  }\n\n  /**\n   * @return {{query: string, ignoreCase: boolean, isRegex: boolean}}\n   */\n  toPlainObject() {\n    return {query: this.query(), ignoreCase: this.ignoreCase(), isRegex: this.isRegex()};\n  }\n\n  _parse() {\n    // Inside double quotes: any symbol except double quote and backslash or any symbol escaped with a backslash.\n    const quotedPattern = /\"([^\\\\\"]|\\\\.)+\"/;\n    // A word is a sequence of any symbols except space and backslash or any symbols escaped with a backslash, that does not start with file:.\n    const unquotedWordPattern = /(\\s*(?!-?f(ile)?:)[^\\\\ ]|\\\\.)+/;\n    const unquotedPattern = unquotedWordPattern.source + '(\\\\s+' + unquotedWordPattern.source + ')*';\n\n\n    const pattern = [\n      '(\\\\s*' + FilePatternRegex.source + '\\\\s*)',\n      '(' + quotedPattern.source + ')',\n      '(' + unquotedPattern + ')',\n    ].join('|');\n    const regexp = new RegExp(pattern, 'g');\n    const queryParts = this._query.match(regexp) || [];\n    /**\n     * @type {!Array.<!QueryTerm>}\n     */\n    this._fileQueries = [];\n\n    /**\n     * @type {!Array.<string>}\n     */\n    this._queries = [];\n\n    for (let i = 0; i < queryParts.length; ++i) {\n      const queryPart = queryParts[i];\n      if (!queryPart) {\n        continue;\n      }\n      const fileQuery = this._parseFileQuery(queryPart);\n      if (fileQuery) {\n        this._fileQueries.push(fileQuery);\n        /** @type {!Array.<!RegexQuery>} */\n        this._fileRegexQueries = this._fileRegexQueries || [];\n        this._fileRegexQueries.push(\n            {regex: new RegExp(fileQuery.text, this.ignoreCase() ? 'i' : ''), isNegative: fileQuery.isNegative});\n        continue;\n      }\n      if (this._isRegex) {\n        this._queries.push(queryPart);\n        continue;\n      }\n      if (queryPart.startsWith('\"')) {\n        if (!queryPart.endsWith('\"')) {\n          continue;\n        }\n        this._queries.push(this._parseQuotedQuery(queryPart));\n        continue;\n      }\n      this._queries.push(this._parseUnquotedQuery(queryPart));\n    }\n  }\n\n  /**\n   * @override\n   * @param {string} filePath\n   * @return {boolean}\n   */\n  filePathMatchesFileQuery(filePath) {\n    if (!this._fileRegexQueries) {\n      return true;\n    }\n    for (let i = 0; i < this._fileRegexQueries.length; ++i) {\n      if (Boolean(filePath.match(this._fileRegexQueries[i].regex)) === this._fileRegexQueries[i].isNegative) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @override\n   * @return {!Array.<string>}\n   */\n  queries() {\n    return this._queries || [];\n  }\n\n  /**\n   * @param {string} query\n   */\n  _parseUnquotedQuery(query) {\n    return query.replace(/\\\\(.)/g, '$1');\n  }\n\n  /**\n   * @param {string} query\n   */\n  _parseQuotedQuery(query) {\n    return query.substring(1, query.length - 1).replace(/\\\\(.)/g, '$1');\n  }\n\n  /**\n   * @param {string} query\n   * @return {?QueryTerm}\n   */\n  _parseFileQuery(query) {\n    const match = query.match(FilePatternRegex);\n    if (!match) {\n      return null;\n    }\n    const isNegative = Boolean(match[1]);\n    query = match[3];\n    let result = '';\n    for (let i = 0; i < query.length; ++i) {\n      const char = query[i];\n      if (char === '*') {\n        result += '.*';\n      } else if (char === '\\\\') {\n        ++i;\n        const nextChar = query[i];\n        if (nextChar === ' ') {\n          result += ' ';\n        }\n      } else {\n        if (Platform.StringUtilities.regexSpecialCharacters().indexOf(query.charAt(i)) !== -1) {\n          result += '\\\\';\n        }\n        result += query.charAt(i);\n      }\n    }\n    return new QueryTerm(result, isNegative);\n  }\n}\n\n// After file: prefix: any symbol except space and backslash or any symbol escaped with a backslash.\nexport const FilePatternRegex = /(-)?f(ile)?:((?:[^\\\\ ]|\\\\.)+)/;\n\nexport class QueryTerm {\n  /**\n   * @param {string} text\n   * @param {boolean} isNegative\n   */\n  constructor(text, isNegative) {\n    this.text = text;\n    this.isNegative = isNegative;\n  }\n}\n\n/**\n * @interface\n */\nexport class SearchResult {\n  /**\n   * @return {string}\n   */\n  label() {\n    throw new Error('not implemented here');\n  }\n\n  /**\n   * @return {string}\n   */\n  description() {\n    throw new Error('not implemented here');\n  }\n\n  /**\n   * @return {number}\n   */\n  matchesCount() {\n    throw new Error('not implemented here');\n  }\n\n  /**\n   * @param {number} index\n   * @return {string}\n   */\n  matchLabel(index) {\n    throw new Error('not implemented here');\n  }\n\n  /**\n   * @param {number} index\n   * @return {string}\n   */\n  matchLineContent(index) {\n    throw new Error('not implemented here');\n  }\n\n  /**\n   * @param {number} index\n   * @return {!Object}\n   */\n  matchRevealable(index) {\n    throw new Error('not implemented here');\n  }\n}\n\n/**\n * @interface\n */\nexport class SearchScope {\n  /**\n   * @param {!SearchConfig} searchConfig\n   * @param {!Common.Progress.Progress} progress\n   * @param {function(!SearchResult):void} searchResultCallback\n   * @param {function(boolean):void} searchFinishedCallback\n   * @return {void|!Promise<void>}\n   */\n  performSearch(searchConfig, progress, searchResultCallback, searchFinishedCallback) {\n  }\n\n  /**\n   * @param {!Common.Progress.Progress} progress\n   */\n  performIndexing(progress) {\n  }\n\n  stopSearch() {}\n}\n\n/** @typedef {!{regex: !RegExp, isNegative: boolean}} */\n// @ts-ignore typedef\nexport let RegexQuery;\n"]}