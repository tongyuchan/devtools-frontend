{"version":3,"file":"JavaScriptREPL.js","sourceRoot":"","sources":["../../../../../front_end/object_ui/JavaScriptREPL.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {RemoteObjectPreviewFormatter} from './RemoteObjectPreviewFormatter.js';\n\nexport class JavaScriptREPL {\n  /**\n   * @param {string} code\n   * @return {string}\n   */\n  static wrapObjectLiteral(code) {\n    // Only parenthesize what appears to be an object literal.\n    if (!(/^\\s*\\{/.test(code) && /\\}\\s*$/.test(code))) {\n      return code;\n    }\n\n    const parse = (async () => 0).constructor;\n    try {\n      // Check if the code can be interpreted as an expression.\n      parse('return ' + code + ';');\n\n      // No syntax error! Does it work parenthesized?\n      const wrappedCode = '(' + code + ')';\n      parse(wrappedCode);\n\n      return wrappedCode;\n    } catch (e) {\n      return code;\n    }\n  }\n\n  /**\n   * @param {string} text\n   * @return {string}\n   */\n  static preprocessExpression(text) {\n    return JavaScriptREPL.wrapObjectLiteral(text);\n  }\n\n  /**\n   * @param {string} text\n   * @param {boolean} throwOnSideEffect\n   * @param {number=} timeout\n   * @param {boolean=} allowErrors\n   * @param {string=} objectGroup\n   * @return {!Promise<!{preview: !DocumentFragment, result: ?SDK.RuntimeModel.EvaluationResult}>}\n   */\n  static async evaluateAndBuildPreview(text, throwOnSideEffect, timeout, allowErrors, objectGroup) {\n    const globalObject = /** @type {?} */ (window);\n    const replInstance = globalObject.ObjectUI.JavaScriptREPL;\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const maxLength = typeof replInstance._MaxLengthForEvaluation !== 'undefined' ?\n        /** @type {number} */ (replInstance._MaxLengthForEvaluation) :\n        MaxLengthForEvaluation;\n    const isTextLong = text.length > maxLength;\n    if (!text || !executionContext || (throwOnSideEffect && isTextLong)) {\n      return {preview: document.createDocumentFragment(), result: null};\n    }\n\n    const expression = JavaScriptREPL.preprocessExpression(text);\n    const options = {\n      expression: expression,\n      generatePreview: true,\n      includeCommandLineAPI: true,\n      throwOnSideEffect: throwOnSideEffect,\n      timeout: timeout,\n      objectGroup: objectGroup,\n      disableBreaks: true,\n      replMode: true,\n      silent: undefined,\n      returnByValue: undefined,\n      allowUnsafeEvalBlockedByCSP: undefined\n    };\n    const result = await executionContext.evaluate(options, false /* userGesture */, false /* awaitPromise */);\n    const preview = JavaScriptREPL._buildEvaluationPreview(result, allowErrors);\n    return {preview, result};\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.EvaluationResult} result\n   * @param {boolean=} allowErrors\n   * @return {!DocumentFragment}\n   */\n  static _buildEvaluationPreview(result, allowErrors) {\n    const fragment = document.createDocumentFragment();\n    if ('error' in result) {\n      return fragment;\n    }\n\n    if (result.exceptionDetails && result.exceptionDetails.exception && result.exceptionDetails.exception.description) {\n      const exception = result.exceptionDetails.exception.description;\n      if (exception.startsWith('TypeError: ') || allowErrors) {\n        fragment.createChild('span').textContent = result.exceptionDetails.text + ' ' + exception;\n      }\n      return fragment;\n    }\n\n    const formatter = new RemoteObjectPreviewFormatter();\n    const {preview, type, subtype, className, description} = result.object;\n    if (preview && type === 'object' && subtype !== 'node' && subtype !== 'trustedtype') {\n      formatter.appendObjectPreview(fragment, preview, false /* isEntry */);\n    } else {\n      const nonObjectPreview = formatter.renderPropertyPreview(\n          type, subtype, className, Platform.StringUtilities.trimEndWithMaxLength(description || '', 400));\n      fragment.appendChild(nonObjectPreview);\n    }\n    return fragment;\n  }\n}\n\n/**\n * @const\n * @type {number}\n */\nexport const MaxLengthForEvaluation = 2000;\n"]}