{"version":3,"file":"Text.js","sourceRoot":"","sources":["../../../../../front_end/text_utils/Text.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nimport {TextCursor} from './TextCursor.js';\nimport {SourceRange, TextRange} from './TextRange.js';\n\nexport class Text {\n  /**\n   * @param {string} value\n   */\n  constructor(value) {\n    this._value = value;\n  }\n\n  /**\n   * @return {!Array<number>}\n   */\n  lineEndings() {\n    if (!this._lineEndings) {\n      this._lineEndings = Platform.StringUtilities.findLineEndingIndexes(this._value);\n    }\n    return this._lineEndings;\n  }\n\n  /**\n   * @return {string}\n   */\n  value() {\n    return this._value;\n  }\n\n  /**\n   * @return {number}\n   */\n  lineCount() {\n    const lineEndings = this.lineEndings();\n    return lineEndings.length;\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @param {number} columnNumber\n   * @return {number}\n   */\n  offsetFromPosition(lineNumber, columnNumber) {\n    return (lineNumber ? this.lineEndings()[lineNumber - 1] + 1 : 0) + columnNumber;\n  }\n\n  /**\n   * @param {number} offset\n   * @return {!Position}\n   */\n  positionFromOffset(offset) {\n    const lineEndings = this.lineEndings();\n    const lineNumber =\n        Platform.ArrayUtilities.lowerBound(lineEndings, offset, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    return {lineNumber: lineNumber, columnNumber: offset - (lineNumber && (lineEndings[lineNumber - 1] + 1))};\n  }\n\n  /**\n   * @param {number} lineNumber\n   * @return {string}\n   */\n  lineAt(lineNumber) {\n    const lineEndings = this.lineEndings();\n    const lineStart = lineNumber > 0 ? lineEndings[lineNumber - 1] + 1 : 0;\n    const lineEnd = lineEndings[lineNumber];\n    let lineContent = this._value.substring(lineStart, lineEnd);\n    if (lineContent.length > 0 && lineContent.charAt(lineContent.length - 1) === '\\r') {\n      lineContent = lineContent.substring(0, lineContent.length - 1);\n    }\n    return lineContent;\n  }\n\n  /**\n   * @param {!TextRange} range\n   * @return {!SourceRange}\n   */\n  toSourceRange(range) {\n    const start = this.offsetFromPosition(range.startLine, range.startColumn);\n    const end = this.offsetFromPosition(range.endLine, range.endColumn);\n    return new SourceRange(start, end - start);\n  }\n\n  /**\n   * @param {!SourceRange} sourceRange\n   * @return {!TextRange}\n   */\n  toTextRange(sourceRange) {\n    const cursor = new TextCursor(this.lineEndings());\n    const result = TextRange.createFromLocation(0, 0);\n\n    cursor.resetTo(sourceRange.offset);\n    result.startLine = cursor.lineNumber();\n    result.startColumn = cursor.columnNumber();\n\n    cursor.advance(sourceRange.offset + sourceRange.length);\n    result.endLine = cursor.lineNumber();\n    result.endColumn = cursor.columnNumber();\n    return result;\n  }\n\n  /**\n   * @param {!TextRange} range\n   * @param {string} replacement\n   * @return {string}\n   */\n  replaceRange(range, replacement) {\n    const sourceRange = this.toSourceRange(range);\n    return this._value.substring(0, sourceRange.offset) + replacement +\n        this._value.substring(sourceRange.offset + sourceRange.length);\n  }\n\n  /**\n   * @param {!TextRange} range\n   * @return {string}\n   */\n  extract(range) {\n    const sourceRange = this.toSourceRange(range);\n    return this._value.substr(sourceRange.offset, sourceRange.length);\n  }\n}\n\n/** @typedef {{lineNumber: number, columnNumber: number}} */\n// @ts-ignore typedef\nexport let Position;\n"]}