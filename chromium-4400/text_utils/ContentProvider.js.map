{"version":3,"file":"ContentProvider.js","sourceRoot":"","sources":["../../../../../front_end/text_utils/ContentProvider.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAIH;;GAEG;AACH,MAAM,OAAO,eAAe;IAC1B;;OAEG;IACH,UAAU;QACR,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,WAAW;QACT,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACH,eAAe,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO;QAC3C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF;AAED,MAAM,OAAO,WAAW;IACtB;;;OAGG;IACH,YAAY,UAAU,EAAE,WAAW;QACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,UAAS,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,GAAG,IAAI;IACnG,MAAM,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC;IACnC,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC,EAAE;QAC/F,OAAO,IAAI,CAAC;KACb;IAED,OAAO,OAAO,GAAG,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG;QACxG,OAAO,CAAC;AACd,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,qBAAqB;AACrB,MAAM,CAAC,IAAI,eAAe,CAAC","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\n\n/**\n * @interface\n */\nexport class ContentProvider {\n  /**\n   * @return {string}\n   */\n  contentURL() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!Common.ResourceType.ResourceType}\n   */\n  contentType() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   */\n  contentEncoded() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @return {!Promise<!DeferredContent>}\n   */\n  requestContent() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @param {string} query\n   * @param {boolean} caseSensitive\n   * @param {boolean} isRegex\n   * @return {!Promise<!Array<!SearchMatch>>}\n   */\n  searchInContent(query, caseSensitive, isRegex) {\n    throw new Error('not implemented');\n  }\n}\n\nexport class SearchMatch {\n  /**\n   * @param {number} lineNumber\n   * @param {string} lineContent\n   */\n  constructor(lineNumber, lineContent) {\n    this.lineNumber = lineNumber;\n    this.lineContent = lineContent;\n  }\n}\n\n/**\n * @param {?string} content\n * @param {string} mimeType\n * @param {boolean} contentEncoded\n * @param {?string=} charset\n * @param {boolean} limitSize\n * @return {?string}\n */\nexport const contentAsDataURL = function(content, mimeType, contentEncoded, charset, limitSize = true) {\n  const maxDataUrlSize = 1024 * 1024;\n  if (content === undefined || content === null || (limitSize && content.length > maxDataUrlSize)) {\n    return null;\n  }\n\n  return 'data:' + mimeType + (charset ? ';charset=' + charset : '') + (contentEncoded ? ';base64' : '') + ',' +\n      content;\n};\n\n/**\n * @typedef {{\n *    content: string,\n *    isEncoded: boolean,\n * }|{\n *    content: null,\n *    error: string,\n *    isEncoded: boolean,\n * }}\n */\n// @ts-ignore typedef\nexport let DeferredContent;\n"]}