{"version":3,"file":"TextUtils.js","sourceRoot":"","sources":["../../../../../front_end/text_utils/TextUtils.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\n\nimport {SearchMatch} from './ContentProvider.js';\nimport {Text} from './Text.js';\n\nexport const Utils = {\n  get _keyValueFilterRegex() {\n    return /(?:^|\\s)(\\-)?([\\w\\-]+):([^\\s]+)/;\n  },\n  get _regexFilterRegex() {\n    return /(?:^|\\s)(\\-)?\\/([^\\s]+)\\//;\n  },\n  get _textFilterRegex() {\n    return /(?:^|\\s)(\\-)?([^\\s]+)/;\n  },\n  get _SpaceCharRegex() {\n    return /\\s/;\n  },\n  /**\n   * @enum {string}\n   */\n  get Indent() {\n    return {TwoSpaces: '  ', FourSpaces: '    ', EightSpaces: '        ', TabCharacter: '\\t'};\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isStopChar: function(char) {\n    return (char > ' ' && char < '0') || (char > '9' && char < 'A') || (char > 'Z' && char < '_') ||\n        (char > '_' && char < 'a') || (char > 'z' && char <= '~');\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isWordChar: function(char) {\n    return !Utils.isStopChar(char) && !Utils.isSpaceChar(char);\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isSpaceChar: function(char) {\n    return Utils._SpaceCharRegex.test(char);\n  },\n\n  /**\n   * @param {string} word\n   * @return {boolean}\n   */\n  isWord: function(word) {\n    for (let i = 0; i < word.length; ++i) {\n      if (!Utils.isWordChar(word.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isOpeningBraceChar: function(char) {\n    return char === '(' || char === '{';\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isClosingBraceChar: function(char) {\n    return char === ')' || char === '}';\n  },\n\n  /**\n   * @param {string} char\n   * @return {boolean}\n   */\n  isBraceChar: function(char) {\n    return Utils.isOpeningBraceChar(char) || Utils.isClosingBraceChar(char);\n  },\n\n  /**\n   * @param {string} text\n   * @param {function(string):boolean} isWordChar\n   * @param {function(string)} wordCallback\n   */\n  textToWords: function(text, isWordChar, wordCallback) {\n    let startWord = -1;\n    for (let i = 0; i < text.length; ++i) {\n      if (!isWordChar(text.charAt(i))) {\n        if (startWord !== -1) {\n          wordCallback(text.substring(startWord, i));\n        }\n        startWord = -1;\n      } else if (startWord === -1) {\n        startWord = i;\n      }\n    }\n    if (startWord !== -1) {\n      wordCallback(text.substring(startWord));\n    }\n  },\n\n  /**\n   * @param {string} line\n   * @return {string}\n   */\n  lineIndent: function(line) {\n    let indentation = 0;\n    while (indentation < line.length && Utils.isSpaceChar(line.charAt(indentation))) {\n      ++indentation;\n    }\n    return line.substr(0, indentation);\n  },\n\n  /**\n   * @param {string} text\n   * @return {boolean}\n   */\n  isUpperCase: function(text) {\n    return text === text.toUpperCase();\n  },\n\n  /**\n   * @param {string} text\n   * @return {boolean}\n   */\n  isLowerCase: function(text) {\n    return text === text.toLowerCase();\n  },\n\n  /**\n   * @param {string} text\n   * @param {!Array<!RegExp>} regexes\n   * @return {!Array<{value: string, position: number, regexIndex: number, captureGroups: !Array<string|undefined>}>}\n   */\n  splitStringByRegexes(text, regexes) {\n    /** @type {!Array<{value: string, position: number, regexIndex: number, captureGroups: !Array<string|undefined>}>} */\n    const matches = [];\n    /** @type {!Array<!RegExp>} */\n    const globalRegexes = [];\n    for (let i = 0; i < regexes.length; i++) {\n      const regex = regexes[i];\n      if (!regex.global) {\n        globalRegexes.push(new RegExp(regex.source, regex.flags ? regex.flags + 'g' : 'g'));\n      } else {\n        globalRegexes.push(regex);\n      }\n    }\n    doSplit(text, 0, 0);\n    return matches;\n\n    /**\n     * @param {string} text\n     * @param {number} regexIndex\n     * @param {number} startIndex\n     */\n    function doSplit(text, regexIndex, startIndex) {\n      if (regexIndex >= globalRegexes.length) {\n        // Set regexIndex as -1 if text did not match with any regular expression\n        matches.push({value: text, position: startIndex, regexIndex: -1, captureGroups: []});\n        return;\n      }\n      const regex = globalRegexes[regexIndex];\n      let currentIndex = 0;\n      let result;\n      regex.lastIndex = 0;\n      while ((result = regex.exec(text)) !== null) {\n        const stringBeforeMatch = text.substring(currentIndex, result.index);\n        if (stringBeforeMatch) {\n          doSplit(stringBeforeMatch, regexIndex + 1, startIndex + currentIndex);\n        }\n        const match = result[0];\n        matches.push({\n          value: match,\n          position: startIndex + result.index,\n          regexIndex: regexIndex,\n          captureGroups: result.slice(1)\n        });\n        currentIndex = result.index + match.length;\n      }\n      const stringAfterMatches = text.substring(currentIndex);\n      if (stringAfterMatches) {\n        doSplit(stringAfterMatches, regexIndex + 1, startIndex + currentIndex);\n      }\n    }\n  }\n};\n\nexport class FilterParser {\n  /**\n   * @param {!Array<string>} keys\n   */\n  constructor(keys) {\n    this._keys = keys;\n  }\n\n  /**\n   * @param {!ParsedFilter} filter\n   * @return {!ParsedFilter}\n   */\n  static cloneFilter(filter) {\n    return {key: filter.key, text: filter.text, regex: filter.regex, negative: filter.negative};\n  }\n\n  /**\n   * @param {string} query\n   * @return {!Array<!ParsedFilter>}\n   */\n  parse(query) {\n    const splitResult = Utils.splitStringByRegexes(\n        query, [Utils._keyValueFilterRegex, Utils._regexFilterRegex, Utils._textFilterRegex]);\n    /** @type {!Array<!ParsedFilter>} */\n    const filters = [];\n    for (let i = 0; i < splitResult.length; i++) {\n      const regexIndex = splitResult[i].regexIndex;\n      if (regexIndex === -1) {\n        continue;\n      }\n      const result = splitResult[i].captureGroups;\n      if (regexIndex === 0) {\n        if (this._keys.indexOf(/** @type {string} */ (result[1])) !== -1) {\n          filters.push({key: result[1], regex: undefined, text: result[2], negative: Boolean(result[0])});\n        } else {\n          filters.push(\n              {key: undefined, regex: undefined, text: result[1] + ':' + result[2], negative: Boolean(result[0])});\n        }\n      } else if (regexIndex === 1) {\n        try {\n          filters.push({\n            key: undefined,\n            regex: new RegExp(/** @type {string} */ (result[1]), 'i'),\n            text: undefined,\n            negative: Boolean(result[0])\n          });\n        } catch (e) {\n          filters.push({key: undefined, regex: undefined, text: '/' + result[1] + '/', negative: Boolean(result[0])});\n        }\n      } else if (regexIndex === 2) {\n        filters.push({key: undefined, regex: undefined, text: result[1], negative: Boolean(result[0])});\n      }\n    }\n    return filters;\n  }\n}\n\nexport class BalancedJSONTokenizer {\n  /**\n   * @param {function(string):void} callback\n   * @param {boolean=} findMultiple\n   */\n  constructor(callback, findMultiple) {\n    this._callback = callback;\n    /** @type {number} */\n    this._index = 0;\n    this._balance = 0;\n    /** @type {string} */\n    this._buffer = '';\n    this._findMultiple = findMultiple || false;\n    this._closingDoubleQuoteRegex = /[^\\\\](?:\\\\\\\\)*\"/g;\n  }\n\n  /**\n   * @param {string} chunk\n   * @return {boolean}\n   */\n  write(chunk) {\n    this._buffer += chunk;\n    const lastIndex = this._buffer.length;\n    const buffer = this._buffer;\n    let index;\n    for (index = this._index; index < lastIndex; ++index) {\n      const character = buffer[index];\n      if (character === '\"') {\n        this._closingDoubleQuoteRegex.lastIndex = index;\n        if (!this._closingDoubleQuoteRegex.test(buffer)) {\n          break;\n        }\n        index = this._closingDoubleQuoteRegex.lastIndex - 1;\n      } else if (character === '{') {\n        ++this._balance;\n      } else if (character === '}') {\n        --this._balance;\n        if (this._balance < 0) {\n          this._reportBalanced();\n          return false;\n        }\n        if (!this._balance) {\n          this._lastBalancedIndex = index + 1;\n          if (!this._findMultiple) {\n            break;\n          }\n        }\n      } else if (character === ']' && !this._balance) {\n        this._reportBalanced();\n        return false;\n      }\n    }\n    this._index = index;\n    this._reportBalanced();\n    return true;\n  }\n\n  _reportBalanced() {\n    if (!this._lastBalancedIndex) {\n      return;\n    }\n    this._callback(this._buffer.slice(0, this._lastBalancedIndex));\n    this._buffer = this._buffer.slice(this._lastBalancedIndex);\n    this._index -= this._lastBalancedIndex;\n    this._lastBalancedIndex = 0;\n  }\n\n  /**\n   * @return {string}\n   */\n  remainder() {\n    return this._buffer;\n  }\n}\n\n/**\n * @interface\n */\nexport class TokenizerFactory {\n  /**\n   * @param {string} mimeType\n   * @return {function(string, function(string, ?string, number, number):void):void}\n   */\n  createTokenizer(mimeType) {\n    throw new Error('not implemented');\n  }\n}\n\n/**\n * @param {string} text\n * @return {boolean}\n */\nexport function isMinified(text) {\n  const kMaxNonMinifiedLength = 500;\n  let linesToCheck = 10;\n  let lastPosition = 0;\n  do {\n    let eolIndex = text.indexOf('\\n', lastPosition);\n    if (eolIndex < 0) {\n      eolIndex = text.length;\n    }\n    if (eolIndex - lastPosition > kMaxNonMinifiedLength && text.substr(lastPosition, 3) !== '//#') {\n      return true;\n    }\n    lastPosition = eolIndex + 1;\n  } while (--linesToCheck >= 0 && lastPosition < text.length);\n\n  // Check the end of the text as well\n  linesToCheck = 10;\n  lastPosition = text.length;\n  do {\n    let eolIndex = text.lastIndexOf('\\n', lastPosition);\n    if (eolIndex < 0) {\n      eolIndex = 0;\n    }\n    if (lastPosition - eolIndex > kMaxNonMinifiedLength && text.substr(lastPosition, 3) !== '//#') {\n      return true;\n    }\n    lastPosition = eolIndex - 1;\n  } while (--linesToCheck >= 0 && lastPosition > 0);\n  return false;\n}\n\n/**\n * @param {string} content\n * @param {string} query\n * @param {boolean} caseSensitive\n * @param {boolean} isRegex\n * @return {!Array.<!SearchMatch>}\n */\nexport const performSearchInContent = function(content, query, caseSensitive, isRegex) {\n  const regex = Platform.StringUtilities.createSearchRegex(query, caseSensitive, isRegex);\n\n  const text = new Text(content);\n  const result = [];\n  for (let i = 0; i < text.lineCount(); ++i) {\n    const lineContent = text.lineAt(i);\n    regex.lastIndex = 0;\n    if (regex.exec(lineContent)) {\n      result.push(new SearchMatch(i, lineContent));\n    }\n  }\n  return result;\n};\n\n/** @typedef {{key:(string|undefined), text:(?string|undefined), regex:(!RegExp|undefined), negative:boolean}} */\n// @ts-ignore typedef\nexport let ParsedFilter;\n"]}