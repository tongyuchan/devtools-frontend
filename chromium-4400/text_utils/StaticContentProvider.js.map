{"version":3,"file":"StaticContentProvider.js","sourceRoot":"","sources":["../../../../../front_end/text_utils/StaticContentProvider.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,sBAAsB,EAAC,MAAM,gBAAgB,CAAC;AAEtD;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAChC;;;;OAIG;IACH,YAAY,UAAU,EAAE,WAAW,EAAE,WAAW;QAC9C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,WAAW,EAAE,OAAO;QAChD,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QACvE,OAAO,IAAI,qBAAqB,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACzE,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;IAC7B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO;QACjD,MAAM,EAAC,OAAO,EAAC,GAAG,qDAAqD,CAAC,CAAC,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QACpG,OAAO,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACvF,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\n\nimport {ContentProvider, DeferredContent, SearchMatch} from './ContentProvider.js';  // eslint-disable-line no-unused-vars\nimport {performSearchInContent} from './TextUtils.js';\n\n/**\n * @implements {ContentProvider}\n */\nexport class StaticContentProvider {\n  /**\n   * @param {string} contentURL\n   * @param {!Common.ResourceType.ResourceType} contentType\n   * @param {function():!Promise<!DeferredContent>} lazyContent\n   */\n  constructor(contentURL, contentType, lazyContent) {\n    this._contentURL = contentURL;\n    this._contentType = contentType;\n    this._lazyContent = lazyContent;\n  }\n\n  /**\n   * @param {string} contentURL\n   * @param {!Common.ResourceType.ResourceType} contentType\n   * @param {string} content\n   * @return {!StaticContentProvider}\n   */\n  static fromString(contentURL, contentType, content) {\n    const lazyContent = () => Promise.resolve({content, isEncoded: false});\n    return new StaticContentProvider(contentURL, contentType, lazyContent);\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  contentURL() {\n    return this._contentURL;\n  }\n\n  /**\n   * @override\n   * @return {!Common.ResourceType.ResourceType}\n   */\n  contentType() {\n    return this._contentType;\n  }\n\n  /**\n   * @override\n   * @return {!Promise<boolean>}\n   */\n  contentEncoded() {\n    return Promise.resolve(false);\n  }\n\n  /**\n   * @override\n   * @return {!Promise<!DeferredContent>}\n   */\n  requestContent() {\n    return this._lazyContent();\n  }\n\n  /**\n   * @override\n   * @param {string} query\n   * @param {boolean} caseSensitive\n   * @param {boolean} isRegex\n   * @return {!Promise<!Array<!SearchMatch>>}\n   */\n  async searchInContent(query, caseSensitive, isRegex) {\n    const {content} = /** @type { {content: string, isEncoded: boolean} }*/ (await this._lazyContent());\n    return content ? performSearchInContent(content, query, caseSensitive, isRegex) : [];\n  }\n}\n"]}