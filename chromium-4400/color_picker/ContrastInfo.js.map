{"version":3,"file":"ContrastInfo.js","sourceRoot":"","sources":["../../../../../front_end/color_picker/ContrastInfo.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper {\n  /**\n   * @param {?ContrastInfoType} contrastInfo\n   */\n  constructor(contrastInfo) {\n    super();\n    this._isNull = true;\n    /** @type {?number} */\n    this._contrastRatio = null;\n    /** @type {?number} */\n    this._contrastRatioAPCA = null;\n    /** @type {?Object<string, number>} */\n    this._contrastRatioThresholds = null;\n    this._contrastRationAPCAThreshold = 0;\n    /** @type {?Common.Color.Color} */\n    this._fgColor = null;\n    /** @type {?Common.Color.Color} */\n    this._bgColor = null;\n    /** @type {string|undefined} */\n    this._colorFormat;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight || !contrastInfo.backgroundColors ||\n        contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n\n    this._isNull = false;\n    this._contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this._contrastRationAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.Color.parse(bgColorText);\n    if (bgColor) {\n      this._setBgColorInternal(bgColor);\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isNull() {\n    return this._isNull;\n  }\n\n  /**\n   * @param {!Common.Color.Color} fgColor\n   * @param {string=} colorFormat\n   */\n  setColor(fgColor, colorFormat) {\n    this._fgColor = fgColor;\n    this._colorFormat = colorFormat;\n    this._updateContrastRatio();\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  /**\n   * @return {string|undefined}\n   */\n  colorFormat() {\n    return this._colorFormat;\n  }\n\n  /**\n   * @return {?Common.Color.Color}\n   */\n  color() {\n    return this._fgColor;\n  }\n\n  /**\n   * @return {?number}\n   */\n  contrastRatio() {\n    return this._contrastRatio;\n  }\n\n  /**\n   * @return {?number}\n   */\n  contrastRatioAPCA() {\n    return this._contrastRatioAPCA;\n  }\n\n  /**\n   * @return {?number}\n   */\n  contrastRatioAPCAThreshold() {\n    return this._contrastRationAPCAThreshold;\n  }\n\n  /**\n   * @param {!Common.Color.Color} bgColor\n   */\n  setBgColor(bgColor) {\n    this._setBgColorInternal(bgColor);\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  /**\n   * @param {!Common.Color.Color} bgColor\n   */\n  _setBgColorInternal(bgColor) {\n    this._bgColor = bgColor;\n\n    if (!this._fgColor) {\n      return;\n    }\n\n    const fgRGBA = this._fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      /** @type {!Array<number>} */\n      const blendedRGBA = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this._bgColor = new Common.Color.Color(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this._contrastRatio = Common.ColorUtils.contrastRatio(fgRGBA, this._bgColor.rgba());\n    this._contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this._fgColor.rgba(), this._bgColor.rgba());\n  }\n\n  /**\n   * @return {?Common.Color.Color}\n   */\n  bgColor() {\n    return this._bgColor;\n  }\n\n  _updateContrastRatio() {\n    if (!this._bgColor || !this._fgColor) {\n      return;\n    }\n    this._contrastRatio = Common.ColorUtils.contrastRatio(this._fgColor.rgba(), this._bgColor.rgba());\n    this._contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this._fgColor.rgba(), this._bgColor.rgba());\n  }\n\n  /**\n   * @param {string} level\n   * @return {?number}\n   */\n  contrastRatioThreshold(level) {\n    if (!this._contrastRatioThresholds) {\n      return null;\n    }\n    return this._contrastRatioThresholds[level];\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  ContrastInfoUpdated: Symbol('ContrastInfoUpdated')\n};\n\n/** @typedef {{backgroundColors: ?Array<string>, computedFontSize: string, computedFontWeight: string}} */\n// @ts-ignore typedef\nexport let ContrastInfoType;\n"]}