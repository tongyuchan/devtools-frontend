{"version":3,"file":"QuickInput.js","sourceRoot":"","sources":["../../../../../front_end/quick_open/QuickInput.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,EAAE,EAAC,MAAM,yBAAyB,CAAC;AAC3C,OAAO,EAAC,kBAAkB,EAAE,QAAQ,EAAC,MAAM,yBAAyB,CAAC;AAErE;;;;;;;GAOG;AACH,aAAa;AACb,MAAM,CAAC,IAAI,iBAAiB,CAAC;AAE7B,MAAM,OAAO,UAAU;IACrB;;OAEG;IACH;QACE,MAAM,IAAI,cAAc,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,IAAI,CAAC,OAAO;QACjB;;WAEG;QACH,IAAI,eAAe,GAAG,IAAI,OAAO,CAAC,EAAE,CAAC,EAAE,GAAE,CAAC,CAAC,CAAC,CAAE,8CAA8C;QAC5F,+BAA+B;QAC/B,MAAM,gBAAgB,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1D,MAAM,MAAM,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAEhD,IAAI,OAAO,CAAC,WAAW,EAAE;gBACvB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;aAC5C;YAED,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACpC,eAAe,GAAG,kCAAkC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE7E,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YACrC,IAAI,OAAO,CAAC,cAAc,EAAE;gBAC1B,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;aACpF;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACrE,wDAAwD;YACxD,uDAAuD;YACvD,6CAA6C;YAC7C,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,kBAAmB,SAAQ,QAAQ;IACvC;;;OAGG;IACH,YAAY,OAAO,EAAE,OAAO;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,EAAE,CAAA,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,oDAAoD,CAAC;IACvF,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,UAAU,EAAE,WAAW;QAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;CACF","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ls} from '../platform/platform.js';\nimport {FilteredListWidget, Provider} from './FilteredListWidget.js';\n\n/**\n * @typedef {{\n *   prompt: string,\n *   placeHolder: (string|undefined),\n *   value: (string|undefined),\n *   valueSelection: (!Array<number>|undefined),\n * }}\n */\n// @ts-ignore\nexport let QuickInputOptions;\n\nexport class QuickInput {\n  /**\n   * @private\n   */\n  constructor() {\n    throw new ReferenceError('Instance type not implemented.');\n  }\n\n  /**\n   * @param {!QuickInputOptions} options\n   */\n  static show(options) {\n    /**\n     * @type {!Promise<undefined>}\n     */\n    let canceledPromise = new Promise(_r => {});  // Intentionally creates an unresolved promise\n    /** @type {!Promise<string>} */\n    const fulfilledPromise = new Promise(resolve => {\n      const provider = new QuickInputProvider(options, resolve);\n      const widget = new FilteredListWidget(provider);\n\n      if (options.placeHolder) {\n        widget.setPlaceholder(options.placeHolder);\n      }\n\n      widget.setPromptTitle(options.placeHolder || options.prompt);\n      widget.showAsDialog(options.prompt);\n      canceledPromise = /** @type {!Promise<undefined>} */ (widget.once('hidden'));\n\n      widget.setQuery(options.value || '');\n      if (options.valueSelection) {\n        widget.setQuerySelectedRange(options.valueSelection[0], options.valueSelection[1]);\n      }\n    });\n\n    return Promise.race([fulfilledPromise, canceledPromise]).then(values => {\n      // If it was fulfilled, then `result` will have a value.\n      // If it was canceled, then `result` will be undefined.\n      // Either way, it has the value that we want.\n      return values;\n    });\n  }\n}\n\nclass QuickInputProvider extends Provider {\n  /**\n   * @param {!QuickInputOptions} options\n   * @param {!Function} resolve\n   */\n  constructor(options, resolve) {\n    super();\n    this._options = options;\n    this._resolve = resolve;\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  notFoundText() {\n    return ls`${this._options.prompt} (Press 'Enter' to confirm or 'Escape' to cancel.)`;\n  }\n\n  /**\n   * @override\n   * @param {?number} _itemIndex\n   * @param {string} promptValue\n   */\n  selectItem(_itemIndex, promptValue) {\n    this._resolve(promptValue);\n  }\n}\n"]}