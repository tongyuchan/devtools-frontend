{"version":3,"file":"ARIAMetadata.js","sourceRoot":"","sources":["../../../../../front_end/accessibility/ARIAMetadata.js"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,cAAc,MAAM,gCAAgC,CAAC;AAEjE;;;;;;GAMG;AACH,qBAAqB;AACrB,MAAM,CAAC,IAAI,eAAe,CAAC;AAE3B;;;;GAIG;AACH,qBAAqB;AACrB,MAAM,CAAC,IAAI,UAAU,CAAC;AAEtB;;;;;GAKG;AACH,qBAAqB;AACrB,MAAM,CAAC,IAAI,MAAM,CAAC;AAElB,MAAM,OAAO,YAAY;IACvB;;OAEG;IACH,YAAY,MAAM;QAChB,uCAAuC;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;IACH,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,MAAM;QAChB,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QAExC,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACtC,KAAK,MAAM,eAAe,IAAI,UAAU,EAAE;YACxC,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,EAAE;gBACtC,eAAe,CAAC,IAAI,GAAG,WAAW,CAAC;aACpC;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;SAC5E;QAED,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACvE,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,QAAQ;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjD,IAAI,SAAS,EAAE;YACb,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED;;GAEG;AACH,IAAI,SAAS,CAAC;AAEd;;GAEG;AACH,MAAM,UAAU,YAAY;IAC1B,IAAI,CAAC,SAAS,EAAE;QACd,SAAS,GAAG,IAAI,YAAY,CAAC,sBAAsB,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;KACtF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,OAAO,SAAS;IACpB;;OAEG;IACH,YAAY,MAAM;QAChB,6BAA6B;QAC7B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAEhB,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC;IAED;;OAEG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF","sourcesContent":["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ARIAProperties from '../generated/ARIAProperties.js';\n\n/**\n * @typedef {{\n *   name: string,\n *   type: string,\n *   enum: (!Array<string>|undefined),\n * }}\n */\n// @ts-ignore typedef\nexport let AttributeConfig;\n\n/**\n * @typedef {{\n *   name: string,\n * }}\n */\n// @ts-ignore typedef\nexport let RoleConfig;\n\n/**\n * @typedef {{\n *   attributes: !Array<!AttributeConfig>,\n *   roles: !Array<!RoleConfig>\n * }}\n */\n// @ts-ignore typedef\nexport let Config;\n\nexport class ARIAMetadata {\n  /**\n   * @param {?Config} config\n   */\n  constructor(config) {\n    /** @type {!Map<string, !Attribute>} */\n    this._attributes = new Map();\n    /** @type {!Array<string>} */\n    this._roleNames = [];\n\n    if (config) {\n      this._initialize(config);\n    }\n  }\n\n  /**\n   * @param {!Config} config\n   */\n  _initialize(config) {\n    const attributes = config['attributes'];\n\n    const booleanEnum = ['true', 'false'];\n    for (const attributeConfig of attributes) {\n      if (attributeConfig.type === 'boolean') {\n        attributeConfig.enum = booleanEnum;\n      }\n      this._attributes.set(attributeConfig.name, new Attribute(attributeConfig));\n    }\n\n    /** @type {!Array<string>} */\n    this._roleNames = config['roles'].map(roleConfig => roleConfig.name);\n  }\n\n  /**\n   * @param {string} property\n   * @return {!Array<string>}\n   */\n  valuesForProperty(property) {\n    const attribute = this._attributes.get(property);\n    if (attribute) {\n      return attribute.getEnum();\n    }\n\n    if (property === 'role') {\n      return this._roleNames;\n    }\n\n    return [];\n  }\n}\n\n/**\n * @type {!ARIAMetadata | undefined}\n */\nlet _instance;\n\n/**\n * @return {!ARIAMetadata}\n */\nexport function ariaMetadata() {\n  if (!_instance) {\n    _instance = new ARIAMetadata(/** @type {!Config} */ (ARIAProperties.config) || null);\n  }\n  return _instance;\n}\n\nexport class Attribute {\n  /**\n   * @param {!AttributeConfig} config\n   */\n  constructor(config) {\n    /** @type {!Array<string>} */\n    this._enum = [];\n\n    if (config.enum) {\n      this._enum = config.enum;\n    }\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  getEnum() {\n    return this._enum;\n  }\n}\n"]}