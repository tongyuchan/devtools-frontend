{"version":3,"file":"SortableDataGrid.js","sourceRoot":"","sources":["../../../../../front_end/data_grid/SortableDataGrid.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nimport {ColumnDescriptor, Events, Parameters} from './DataGrid.js';  // eslint-disable-line no-unused-vars\nimport {ViewportDataGrid, ViewportDataGridNode} from './ViewportDataGrid.js';\n\n/**\n * @extends {ViewportDataGrid<!SortableDataGridNode<NODE_TYPE>>}\n * @template NODE_TYPE\n */\nexport class SortableDataGrid extends ViewportDataGrid {\n  /**\n   * @param {!Parameters} dataGridParameters\n   */\n  constructor(dataGridParameters) {\n    super(dataGridParameters);\n    this._sortingFunction = SortableDataGrid.TrivialComparator;\n    this.setRootNode(/** @type {!SortableDataGridNode<!NODE_TYPE>} */ (new SortableDataGridNode()));\n  }\n\n  /**\n   * @param {!SortableDataGridNode<!NODE_TYPE>} a\n   * @param {!SortableDataGridNode<!NODE_TYPE>} b\n   * @return {number}\n   * @template NODE_TYPE\n   */\n  static TrivialComparator(a, b) {\n    return 0;\n  }\n\n  /**\n   * @param {string} columnId\n   * @param {!SortableDataGridNode<!NODE_TYPE>} a\n   * @param {!SortableDataGridNode<!NODE_TYPE>} b\n   * @return {number}\n   * @template NODE_TYPE\n   */\n  static NumericComparator(columnId, a, b) {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aNumber = Number(aValue instanceof Node ? aValue.textContent : aValue);\n    const bNumber = Number(bValue instanceof Node ? bValue.textContent : bValue);\n    return aNumber < bNumber ? -1 : (aNumber > bNumber ? 1 : 0);\n  }\n\n  /**\n   * @param {string} columnId\n   * @param {!SortableDataGridNode<!NODE_TYPE>} a\n   * @param {!SortableDataGridNode<!NODE_TYPE>} b\n   * @return {number}\n   * @template NODE_TYPE\n   */\n  static StringComparator(columnId, a, b) {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aString = aValue instanceof Node ? aValue.textContent : String(aValue);\n    const bString = bValue instanceof Node ? bValue.textContent : String(bValue);\n    if (!aString || !bString) {\n      return 0;\n    }\n    return aString < bString ? -1 : (aString > bString ? 1 : 0);\n  }\n\n  /**\n   * @param {function(!SortableDataGridNode<!NODE_TYPE>, !SortableDataGridNode<!NODE_TYPE>):number} comparator\n   * @param {boolean} reverseMode\n   * @param {!SortableDataGridNode<!NODE_TYPE>} a\n   * @param {!SortableDataGridNode<!NODE_TYPE>} b\n   * @return {number}\n   * @template NODE_TYPE\n   */\n  static Comparator(comparator, reverseMode, a, b) {\n    return reverseMode ? comparator(b, a) : comparator(a, b);\n  }\n\n  /**\n   * @param {!Array.<string>} columnNames\n   * @param {!Array.<*>} values\n   * @param {string} displayName\n   * @return {?SortableDataGrid<!SortableDataGridNode<!NODE_TYPE>>}\n   * @template NODE_TYPE\n   */\n  static create(columnNames, values, displayName) {\n    const numColumns = columnNames.length;\n    if (!numColumns) {\n      return null;\n    }\n\n    const columns = /** @type {!Array<!ColumnDescriptor>} */ ([]);\n    for (let i = 0; i < columnNames.length; ++i) {\n      const id = String(i);\n      columns.push(/** @type {!ColumnDescriptor} */ ({id, title: columnNames[i], sortable: true}));\n    }\n\n    const nodes = [];\n    for (let i = 0; i < values.length / numColumns; ++i) {\n      /** @type {!Object<number, *>} */\n      const data = {};\n      for (let j = 0; j < columnNames.length; ++j) {\n        data[j] = values[numColumns * i + j];\n      }\n\n      const node = new SortableDataGridNode(data);\n      node.selectable = false;\n      nodes.push(node);\n    }\n\n    const dataGrid = new SortableDataGrid(/** @type {!Parameters} */ ({displayName, columns}));\n    const length = nodes.length;\n    const rootNode = dataGrid.rootNode();\n    for (let i = 0; i < length; ++i) {\n      rootNode.appendChild(nodes[i]);\n    }\n\n    dataGrid.addEventListener(Events.SortingChanged, sortDataGrid);\n\n    function sortDataGrid() {\n      const nodes = dataGrid.rootNode().children;\n      const sortColumnId = dataGrid.sortColumnId();\n      if (!sortColumnId) {\n        return;\n      }\n\n      let columnIsNumeric = true;\n      for (let i = 0; i < nodes.length; i++) {\n        const value = nodes[i].data[sortColumnId];\n        if (isNaN(value instanceof Node ? value.textContent : value)) {\n          columnIsNumeric = false;\n          break;\n        }\n      }\n\n      const comparator = columnIsNumeric ? SortableDataGrid.NumericComparator : SortableDataGrid.StringComparator;\n      dataGrid.sortNodes(comparator.bind(null, sortColumnId), !dataGrid.isSortOrderAscending());\n    }\n    return dataGrid;\n  }\n\n  /**\n   * @param {!SortableDataGridNode<!NODE_TYPE>} node\n   */\n  insertChild(node) {\n    const root = /** @type {!SortableDataGridNode<!NODE_TYPE>} */ (this.rootNode());\n    root.insertChildOrdered(node);\n  }\n\n  /**\n   * @param {function(!SortableDataGridNode<!NODE_TYPE>, !SortableDataGridNode<!NODE_TYPE>):number} comparator\n   * @param {boolean} reverseMode\n   */\n  sortNodes(comparator, reverseMode) {\n    this._sortingFunction = SortableDataGrid.Comparator.bind(null, comparator, reverseMode);\n    this.rootNode().recalculateSiblings(0);\n    (/** @type {!SortableDataGridNode<!NODE_TYPE>} */ (this.rootNode()))._sortChildren();\n    this.scheduleUpdateStructure();\n  }\n}\n\n/**\n * @extends {ViewportDataGridNode<SortableDataGridNode<NODE_TYPE>>}\n * @template NODE_TYPE\n */\nexport class SortableDataGridNode extends ViewportDataGridNode {\n  /**\n   * @param {?Object.<string, *>=} data\n   * @param {boolean=} hasChildren\n   */\n  constructor(data, hasChildren) {\n    super(data, hasChildren);\n  }\n\n  /**\n   * @param {!SortableDataGridNode<!NODE_TYPE>} node\n   */\n  insertChildOrdered(node) {\n    const dataGrid = /** @type {?SortableDataGrid<!NODE_TYPE>} */ (this.dataGrid);\n    if (dataGrid) {\n      this.insertChild(\n          node,\n          Platform.ArrayUtilities.upperBound(\n              /** @type {!Array<!SortableDataGridNode<!NODE_TYPE>>} */ (this.children), node,\n              dataGrid._sortingFunction));\n    }\n  }\n\n  _sortChildren() {\n    const dataGrid = /** @type {?SortableDataGrid<!NODE_TYPE>} */ (this.dataGrid);\n    if (!dataGrid) {\n      return;\n    }\n    (/** @type {!Array<!SortableDataGridNode<!NODE_TYPE>>} */ (this.children)).sort(dataGrid._sortingFunction);\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = /** @type {!SortableDataGridNode<!NODE_TYPE>} */ (this.children[i]);\n      child.recalculateSiblings(i);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = /** @type {!SortableDataGridNode<!NODE_TYPE>} */ (this.children[i]);\n      child._sortChildren();\n    }\n  }\n}\n"]}