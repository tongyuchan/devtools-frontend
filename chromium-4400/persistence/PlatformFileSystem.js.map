{"version":3,"file":"PlatformFileSystem.js","sourceRoot":"","sources":["../../../../../front_end/persistence/PlatformFileSystem.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as i18n from '../i18n/i18n.js';\nimport * as TextUtils from '../text_utils/text_utils.js';  // eslint-disable-line no-unused-vars\n\nexport const UIStrings = {\n  /**\n  *@description Assertion error message when failing to load a file\n  */\n  unableToReadFilesWithThis: 'Unable to read files with this implementation.',\n};\nconst str_ = i18n.i18n.registerUIStrings('persistence/PlatformFileSystem.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PlatformFileSystem {\n  /**\n   * @param {string} path\n   * @param {string} type\n   */\n  constructor(path, type) {\n    this._path = path;\n    this._type = type;\n  }\n\n  /**\n   * @param {string} path\n   * @return {!Promise<?{modificationTime: !Date, size: number}>}\n   */\n  getMetadata(path) {\n    return Promise.resolve(null);\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  initialFilePaths() {\n    return [];\n  }\n\n  /**\n   * @return {!Array<string>}\n   */\n  initialGitFolders() {\n    return [];\n  }\n\n  /**\n   * @return {string}\n   */\n  path() {\n    return this._path;\n  }\n\n  /**\n   * @return {string}\n   */\n  embedderPath() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @return {string}\n   */\n  type() {\n    // TODO(kozyatinskiy): remove type, overrides should implement this interface.\n    return this._type;\n  }\n\n  /**\n   * @param {string} path\n   * @param {?string} name\n   * @return {!Promise<?string>}\n   */\n  async createFile(path, name) {\n    return Promise.resolve(null);\n  }\n\n  /**\n   * @param {string} path\n   * @return {!Promise<boolean>}\n   */\n  deleteFile(path) {\n    return Promise.resolve(false);\n  }\n\n  /**\n   * @param {string} path\n   * @return {!Promise<?Blob>}\n   */\n  requestFileBlob(path) {\n    return Promise.resolve(/** @type {?Blob} */ (null));\n  }\n\n  /**\n   * @param {string} path\n   * @returns {!Promise<!TextUtils.ContentProvider.DeferredContent>}\n   */\n  async requestFileContent(path) {\n    return {content: null, error: i18nString(UIStrings.unableToReadFilesWithThis), isEncoded: false};\n  }\n\n  /**\n   * @param {string} path\n   * @param {string} content\n   * @param {boolean} isBase64\n   */\n  setFileContent(path, content, isBase64) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {string} path\n   * @param {string} newName\n   * @param {function(boolean, string=):void} callback\n   */\n  renameFile(path, newName, callback) {\n    callback(false);\n  }\n\n  /**\n   * @param {string} path\n   */\n  addExcludedFolder(path) {\n  }\n\n  /**\n   * @param {string} path\n   */\n  removeExcludedFolder(path) {\n  }\n\n  fileSystemRemoved() {\n  }\n\n  /**\n   * @param {string} folderPath\n   * @return {boolean}\n   */\n  isFileExcluded(folderPath) {\n    return false;\n  }\n\n  /**\n   * @return {!Set<string>}\n   */\n  excludedFolders() {\n    return new Set();\n  }\n\n  /**\n   * @param {string} query\n   * @param {!Common.Progress.Progress} progress\n   * @return {!Promise<!Array<string>>}\n   */\n  searchInPath(query, progress) {\n    return Promise.resolve([]);\n  }\n\n  /**\n   * @param {!Common.Progress.Progress} progress\n   */\n  indexContent(progress) {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  /**\n   * @param {string} path\n   * @return {string}\n   */\n  mimeFromPath(path) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {string} path\n   * @return {boolean}\n   */\n  canExcludeFolder(path) {\n    return false;\n  }\n\n  /**\n   * @param {string} path\n   * @return {!Common.ResourceType.ResourceType}\n   */\n  contentType(path) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {string} url\n   * @return {string}\n   */\n  tooltipForURL(url) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @return {boolean}\n   */\n  supportsAutomapping() {\n    throw new Error('Not implemented');\n  }\n}\n"]}