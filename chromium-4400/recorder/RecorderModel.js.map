{"version":3,"file":"RecorderModel.js","sourceRoot":"","sources":["../../../../../front_end/recorder/RecorderModel.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,uDAAuD;AAEvD,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAGlC,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AAOvD,MAAM,OAAO,aAAc,SAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ;IAStD,YAAY,MAA2B;QACrC,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAC3C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;QACvD,IAAI,CAAC,mBAAmB;YACpB,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,2BAA2B,CAAiC,CAAC;QAEpH,IAAI,CAAC,MAAM,oBAAqB,CAAC;QACjC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAuB;QACvC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,gCAA4B,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,gCAA4B,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,YAAiD;QACrE,IAAI,IAAI,CAAC,MAAM,sBAAuB,EAAE;YACtC,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YACxC,MAAM,IAAI,CAAC,WAAW,6BAAyB,CAAC;SACjD;aAAM,IAAI,IAAI,CAAC,MAAM,gCAA4B,EAAE;YAClD,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3B,MAAM,IAAI,CAAC,WAAW,mBAAoB,CAAC;SAC5C;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,YAAiD;QACpE,IAAI,CAAC,wBAAwB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;QAClF,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAClC,OAAO;SACR;QAED,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACvC,CAAC;CACF;AAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\nimport * as Workspace from '../workspace/workspace.js';  // eslint-disable-line no-unused-vars\n\nimport {RecordingSession} from './RecordingSession.js';\n\nconst enum RecorderState {\n  Recording = 'Recording',\n  Idle = 'Idle'\n}\n\nexport class RecorderModel extends SDK.SDKModel.SDKModel {\n  _debuggerAgent: ProtocolProxyApi.DebuggerApi;\n  _domDebuggerAgent: ProtocolProxyApi.DOMDebuggerApi;\n  _runtimeAgent: ProtocolProxyApi.RuntimeApi;\n  _accessibilityAgent: ProtocolProxyApi.AccessibilityApi;\n  _toggleRecordAction: UI.ActionRegistration.Action;\n  _state: RecorderState;\n  _currentRecordingSession: RecordingSession|null;\n\n  constructor(target: SDK.SDKModel.Target) {\n    super(target);\n    this._debuggerAgent = target.debuggerAgent();\n    this._domDebuggerAgent = target.domdebuggerAgent();\n    this._runtimeAgent = target.runtimeAgent();\n    this._accessibilityAgent = target.accessibilityAgent();\n    this._toggleRecordAction =\n        UI.ActionRegistry.ActionRegistry.instance().action('recorder.toggle-recording') as UI.ActionRegistration.Action;\n\n    this._state = RecorderState.Idle;\n    this._currentRecordingSession = null;\n  }\n\n  async updateState(newState: RecorderState): Promise<void> {\n    this._state = newState;\n    this._toggleRecordAction.setToggled(this._state === RecorderState.Recording);\n  }\n\n  isRecording(): boolean {\n    return this._state === RecorderState.Recording;\n  }\n\n  async toggleRecording(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (this._state === RecorderState.Idle) {\n      await this.startRecording(uiSourceCode);\n      await this.updateState(RecorderState.Recording);\n    } else if (this._state === RecorderState.Recording) {\n      await this.stopRecording();\n      await this.updateState(RecorderState.Idle);\n    }\n  }\n\n  async startRecording(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    this._currentRecordingSession = new RecordingSession(this.target(), uiSourceCode);\n    await this._currentRecordingSession.start();\n  }\n\n  async stopRecording(): Promise<void> {\n    if (!this._currentRecordingSession) {\n      return;\n    }\n\n    this._currentRecordingSession.stop();\n    this._currentRecordingSession = null;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(RecorderModel, SDK.SDKModel.Capability.None, false);\n"]}