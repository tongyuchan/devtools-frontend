{"version":3,"file":"NodeURL.js","sourceRoot":"","sources":["../../../../../front_end/protocol_client/NodeURL.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAExC,MAAM,OAAO,OAAO;IAClB;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,MAAM;QACjB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAEpB;;;WAGG;QACH,SAAS,OAAO,CAAC,MAAM,EAAE,IAAI;YAC3B,IAAI,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE;gBAC5E,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACvE;YACD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC1C,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,SAAS,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;gBACnC,IAAI,SAAS,KAAK,sBAAsB,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBACvF,OAAO,CAAC,4BAA4B,CAAC,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;iBAC1D;aACF;QACH,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,eAAe,CAAC,cAAc,EAAE,SAAS;QAC9C,IAAI,SAAS,EAAE;YACb,MAAM,EAAE,GAAG,uBAAuB,CAAC;YACnC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAChC;QACD,OAAO,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IACnE,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Host from '../host/host.js';\n\nexport class NodeURL {\n  /**\n   * @param {!{url: string}} object\n   */\n  static patch(object) {\n    process(object, '');\n\n    /**\n     * @param {!{url: string}} object\n     * @param {string} path\n     */\n    function process(object, path) {\n      if (object.url && NodeURL._isPlatformPath(object.url, Host.Platform.isWin())) {\n        object.url = Common.ParsedURL.ParsedURL.platformPathToURL(object.url);\n      }\n      for (const entry of Object.entries(object)) {\n        const key = entry[0];\n        const value = entry[1];\n        const entryPath = path + '.' + key;\n        if (entryPath !== '.result.result.value' && value !== null && typeof value === 'object') {\n          process(/** @type {{url: string}} */ (value), entryPath);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {string} fileSystemPath\n   * @param {boolean} isWindows\n   * @return {boolean}\n   */\n  static _isPlatformPath(fileSystemPath, isWindows) {\n    if (isWindows) {\n      const re = /^([a-z]:[\\/\\\\]|\\\\\\\\)/i;\n      return re.test(fileSystemPath);\n    }\n    return fileSystemPath.length ? fileSystemPath[0] === '/' : false;\n  }\n}\n"]}