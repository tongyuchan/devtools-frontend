{"version":3,"file":"HeapSnapshotDataGrids.js","sourceRoot":"","sources":["../../../../../front_end/profiler/HeapSnapshotDataGrids.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,OAAO,KAAK,UAAU,MAAM,6BAA6B,CAAC;AAC1D,OAAO,KAAK,QAAQ,MAAM,2BAA2B,CAAC;AACtD,OAAO,KAAK,iBAAiB,MAAM,+CAA+C,CAAC;AACnF,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAExC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAElC,OAAO,EAAC,kBAAkB,EAAE,2BAA2B,EAAE,oBAAoB,EAAE,6BAA6B,EAAwB,sBAAsB,EAAE,+BAA+B,GAAE,MAAM,4BAA4B,CAAC,CAAE,qCAAqC;AAKvQ,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB;;MAEE;IACF,wBAAwB,EAAE,6BAA6B;IACvD;;MAEE;IACF,4BAA4B,EAAE,oCAAoC;IAClE;;MAEE;IACF,6BAA6B,EAAE,uDAAuD;IACtF;;MAEE;IACF,MAAM,EAAE,QAAQ;IAChB;;MAEE;IACF,QAAQ,EAAE,UAAU;IACpB;;MAEE;IACF,WAAW,EAAE,cAAc;IAC3B;;MAEE;IACF,YAAY,EAAE,eAAe;IAC7B;;MAEE;IACF,sBAAsB,EAAE,0BAA0B;IAClD;;MAEE;IACF,iBAAiB,EAAE,aAAa;IAChC;;MAEE;IACF,wBAAwB,EAAE,4BAA4B;IACtD;;MAEE;IACF,GAAG,EAAE,OAAO;IACZ;;MAEE;IACF,OAAO,EAAE,WAAW;IACpB;;MAEE;IACF,KAAK,EAAE,SAAS;IAChB;;MAEE;IACF,SAAS,EAAE,aAAa;IACxB;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,gBAAgB,EAAE,oBAAoB;IACtC;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,KAAK,EAAE,OAAO;IACd;;MAEE;IACF,QAAQ,EAAE,WAAW;IACrB;;MAEE;IACF,IAAI,EAAE,MAAM;IACZ;;MAEE;IACF,QAAQ,EAAE,UAAU;IACpB;;MAEE;IACF,UAAU,EAAE,YAAY;CACzB,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,mCAAmC,EAAE,SAAS,CAAC,CAAC;AACzF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,8GAA8G;AAC9G,MAAM,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;AAEnC;;GAEG;AACH,MAAM,OAAO,4BAA6B,SAAQ,QAAQ,CAAC,QAAQ,CAAC,YAAY;IAC9E;;;;OAIG;IACH,YAAY,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB;QACpE,6FAA6F;QAC7F,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAC1B,iCAAiC;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,oCAAoC;QACpC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;QAChD,MAAM,QAAQ,GAAG;YACf,CAAC,UAAU,EAAE,UAAU,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;YAC5D,CAAC,aAAa,EAAE,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;YACnE,CAAC,cAAc,EAAE,UAAU,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC;SACtE,CAAC;QACF,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;YAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3C;SACF;QAED;;WAEG;QACH,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;QAChC;;WAEG;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B;;WAEG;QACH,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC;;WAEG;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,wEAAwE;QACxE,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;QACxE,IAAI,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACvG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAC1F,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;IACvC,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,IAAI;QACjB,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACvF,IAAI,eAAe,IAAI,CAAC,IAAI,YAAY,oBAAoB,IAAI,IAAI,YAAY,2BAA2B,CAAC;YACxG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE;YACrC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,UAAU;QACtB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,gBAAgB;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC/C,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;SACvB;IACH,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;YAC9G,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC/B;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACtF;IACH,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,mBAAmB,CAAC,kCAAkC,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC1G,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;SAClH;QACD,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,oBAAoB,CAAC,WAAW,EAAE,QAAQ;QACxC,MAAM,IAAI,GAAG,oCAAoC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAE3F,IAAI,IAAI,YAAY,6BAA6B,IAAI,IAAI,CAAC,WAAW;YACjE,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACjD,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACrD;IACH,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAC9B,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,2CAA2C,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IAChF,CAAC;IAED;;;OAGG;IACH,4BAA4B,CAAC,oBAAoB;QAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,IAAI;QAChB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,EAAE,iBAAiB,CAAC,CAAC;IACrF,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACpE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,eAAe;QACb,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC/B;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED,sBAAsB;QACpB,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QACpC,OAAO,WAAW,EAAE;YAClB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,oCAAoC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE;gBAChG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;gBAC7B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,OAAO;aACR;YACD,WAAW,GAAG,oCAAoC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACzE;IACH,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,YAAY,EAAE,SAAS;QACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,cAAc;QACZ,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACzC,IAAI,IAAI,CAAC,iBAAiB,KAAK,YAAY,IAAI,IAAI,CAAC,kBAAkB,KAAK,aAAa,EAAE;YACxF,OAAO;SACR;QACD,sBAAsB;QACtB,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,sBAAsB;QACtB,IAAI,CAAC,kBAAkB,GAAG,aAAa,CAAC;QACxC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,IAAI,EAAE,EAAE,aAAa,CAAC,CAAC;QAEvE;;;WAGG;QACH,SAAS,eAAe,CAAC,KAAK,EAAE,KAAK;YACnC,aAAa;YACb,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC1C,aAAa;YACb,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC1C,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;gBAC1B,MAAM,GAAG,CAAC,MAAM,CAAC;aAClB;YACD,IAAI,MAAM,KAAK,CAAC,EAAE;gBAChB,OAAO,MAAM,CAAC;aACf;YACD,aAAa;YACb,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACtC,aAAa;YACb,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACtC,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;gBAC1B,MAAM,GAAG,CAAC,MAAM,CAAC;aAClB;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,YAAY;QAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;QACjC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC/C,MAAM,KAAK,GAAG,oCAAoC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,KAAK,CAAC,IAAI,EAAE,CAAC;aACd;SACF;QACD,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,uBAAuB,CAAC,KAAK;QAC3B,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACnC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,qBAAqB;QACnB,EAAE,IAAI,CAAC,sBAAsB,CAAC;IAChC,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC,OAAO;SACR;QACD,IAAI,EAAE,IAAI,CAAC,sBAAsB,EAAE;YACjC,OAAO;SACR;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,eAAe,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,KAAK;IACxB,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,MAAM;QAChB,OAAO,MAAM,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK;QAC7B,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,MAAM,EAAE,KAAK;QAC9B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,MAAM;QACtB,MAAM,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;CACF;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,kCAAkC,GAAG;IAChD,YAAY,EAAE,MAAM,CAAC,cAAc,CAAC;IACpC,eAAe,EAAE,MAAM,CAAC,iBAAiB,CAAC;CAC3C,CAAC;AAEF,MAAM,OAAO,4BAA6B,SAAQ,4BAA4B;IAC5E;;;;OAIG;IACH,YAAY,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB;QACpE,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;QAClE,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,oCAAoC;QACpC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,uBAAuB,CAAC,KAAK;QAC3B,2DAA2D;IAC7D,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,KAAK;QACtB,iEAAiE;QACjE,+DAA+D;QAC/D,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;QACvD,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QAC/C,IAAI,YAAY,GAAG,YAAY,GAAG,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;QAChF,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,GAAG,eAAe,CAAC,CAAC;QACrD,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,eAAe,CAAC,CAAC;QAC3D,IAAI,cAAc,GAAG,YAAY,GAAG,SAAS,GAAG,YAAY,CAAC;QAC7D,wDAAwD;QACxD,IAAI,CAAC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,iBAAiB,IAAI,YAAY,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC9F,OAAO;SACR;QACD,MAAM,gBAAgB,GAAG,GAAG,CAAC;QAC7B,SAAS,IAAI,gBAAgB,CAAC;QAC9B,cAAc,IAAI,CAAC,GAAG,gBAAgB,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;QAEjC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAE9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,SAAS,GAAG,cAAc,CAAC,CAAC;QAE9E,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAE3E,IAAI,YAAY,EAAE;YAChB,kEAAkE;YAClE,IAAI,YAAY,CAAC,MAAM,EAAE;gBACvB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC3B;iBAAM;gBACL,oCAAoC;gBACpC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;aAClC;SACF;IACH,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,WAAW;QAChD,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YACxB,OAAO,CAAC,CAAC;SACV;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,oCAAoC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACrF,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,mEAAmE;QACnE,kEAAkE;QAClE,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC/B,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC9B,SAAS;aACV;YACD,MAAM,MAAM,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACpD,IAAI,MAAM,GAAG,QAAQ,EAAE;gBACrB,MAAM;aACP;YACD,UAAU,GAAG,MAAM,CAAC;SACrB;QAED,wCAAwC;QACxC,IAAI,QAAQ,GAAG,UAAU,CAAC;QAC1B,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;YACzD,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC9B,SAAS;aACV;YACD,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;YACxC,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAClC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC9B,QAAQ,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;YACnC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,GAAG,QAAQ,EAAE,WAAW,GAAG,QAAQ,CAAC,CAAC;SACvF;QAED,qEAAqE;QACrE,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC/B,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC9B,SAAS;aACV;YACD,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,iBAAiB,IAAI,UAAU,CAAC;QACrC,IAAI,CAAC,oBAAoB,IAAI,aAAa,CAAC;QAC3C,OAAO,QAAQ,GAAG,aAAa,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,IAAI;QACd,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,MAAM,CAAC;SACf;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACzC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,YAAY;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,oCAAoC,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1F,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QACjD,MAAM,YAAY,GAAG,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;QACnE,IAAI,MAAM,IAAI,SAAS,IAAI,MAAM,GAAG,YAAY,EAAE;YAChD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;QACjE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YAC/C,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACzD,mEAAmE;YACnE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,qBAAqB,CAAC,GAAG,EAAE;gBACvD,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;oBAClC,OAAO;iBACR;gBACD,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,YAAY;QAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,OAAO,CAAC,CAAC;SACV;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBACxC,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,IAAI,KAAK,KAAK,EAAE;oBAClB,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;oBAChC,MAAM;iBACP;gBACD,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACnC;YACD,UAAU,GAAG,IAAI,CAAC;SACnB;QACD,OAAO,MAAM,GAAG,oCAAoC,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;IAChH,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,MAAM;QAChB,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC7B,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SACpC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,MAAM,EAAE,IAAI;QACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK;QAC7B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACzF,CAAC;IAED;;;;OAIG;IACH,kBAAkB,CAAC,MAAM,EAAE,KAAK;QAC9B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED;;;SAGK;IACL,iBAAiB,CAAC,MAAM;QACtB,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACjF,CAAC;IAED;;;OAGG;IACH,mBAAmB,CAAC,OAAO;QACzB,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QACnD,MAAM,cAAc,GAAG,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;QACvE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;QAClC,MAAM,UAAU,GAAG,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC;QAClD,OAAO,UAAU,IAAI,cAAc,IAAI,OAAO,IAAI,WAAW,CAAC;IAChE,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,SAAS,CAAC,KAAK;QACb,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAE/B,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACjC,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;SACtC;IACH,CAAC;CACF;AAED,MAAM,OAAO,+BAAgC,SAAQ,4BAA4B;IAC/E;;;;;OAKG;IACH,YAAY,iBAAiB,EAAE,mBAAmB,EAAE,WAAW,EAAE,OAAO;QACtE,OAAO;YACH,OAAO,IAAI,EAAC,0DAA2D,CAAC;gBACtE,EAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC;gBACrF,EAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,EAAE;oBACxG,EAAE,EAAE,aAAa;oBACjB,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;oBACxC,KAAK,EAAE,OAAO;oBACd,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;iBACjB;gBACD;oBACE,EAAE,EAAE,cAAc;oBAClB,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;oBACzC,KAAK,EAAE,OAAO;oBACd,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU;iBACzC;aACF,CAAC,CAAC,CAAC;QACR,MAAM,kBAAkB,GAAG,4CAA4C,CAAC,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC;QACjG,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;IACpE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,MAAM,IAAI,GACN,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,IAAI,QAAQ,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/G,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACvD,oCAAoC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,QAAQ,EAAE,IAAI;QAC5B,MAAM,QAAQ,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAChF,OAAO,IAAI,sBAAsB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;YAC1B,oCAAoC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;SACxD;IACH,CAAC;CACF;AAED,MAAM,OAAO,8BAA+B,SAAQ,+BAA+B;IACjF;;;OAGG;IACH,YAAY,iBAAiB,EAAE,mBAAmB;QAChD,MAAM,OAAO,GAAG,0DAA0D,CAAC,CAAC;YAC1E,EAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE;gBACrF,EAAE,EAAE,UAAU;gBACd,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;gBACrC,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS;aACxC;YACD,EAAC,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YAC/G,EAAC,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;SAClH,CAAC,CAAC;QACH,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC,EAAE,OAAO,CAAC,CAAC;IACvG,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,QAAQ,EAAE,IAAI;QAC5B,MAAM,QAAQ,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAChF,OAAO,IAAI,+BAA+B,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,UAAU,EAAE,aAAa;QACnC,QAAQ,UAAU,EAAE;YAClB,KAAK,QAAQ;gBACX,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC3G,KAAK,OAAO;gBACV,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1G,KAAK,aAAa;gBAChB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,cAAc,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChH,KAAK,cAAc;gBACjB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACjH,KAAK,UAAU;gBACb,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,WAAW,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC7G;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,UAAU,EAAE,CAAC,CAAC;SACnD;IACH,CAAC;IAED,KAAK;QACH,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;QACrC,MAAM,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;CACF;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,oCAAoC,GAAG;IAClD,uBAAuB,EAAE,MAAM,CAAC,yBAAyB,CAAC;CAC3D,CAAC;AAEF,MAAM,OAAO,gCAAiC,SAAQ,4BAA4B;IAChF;;;OAGG;IACH,YAAY,iBAAiB,EAAE,mBAAmB;QAChD,MAAM,OAAO,GAAG,0DAA0D,CAAC,CAAC;YAC1E,EAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC;YAChG,EAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YACxG,EAAC,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,EAAE;gBAC/G,EAAE,EAAE,cAAc;gBAClB,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;gBACzC,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU;gBACxC,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;aACjB;SACF,CAAC,CAAC;QACH,mBAAmB;QACnB,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,4CAA4C,CAAC,CACzF,EAAC,WAAW,EAAE,UAAU,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;QACtF,kBAAkB;QAClB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAE9B,8DAA8D;QAC9D,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,UAAU,EAAE,aAAa;QACnC,QAAQ,UAAU,EAAE;YAClB,KAAK,QAAQ;gBACX,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;YAClH,KAAK,UAAU;gBACb,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAC3D,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;YAC1D,KAAK,aAAa;gBAChB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,cAAc,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChH,KAAK,cAAc;gBACjB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACjH;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,UAAU,EAAE,CAAC,CAAC;SACnD;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,4BAA4B,CAAC,EAAE;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QACpF,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GACP,MAAM,2CAA2C,CAAC,CAAC,MAAM,CAAC,CAAC,8BAA8B,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAChH,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1D,CAAC;IAED,KAAK;QACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE;YAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SAC/B;IACH,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,SAAS,EAAE,SAAS;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC5F,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,gBAAgB;QAClC,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;QACxE,IAAI,CAAC,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACrD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACH,mBAAmB,CAAC,UAAU,EAAE,UAAU;QACxC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC9C,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC;iBACxD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC1E,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YACnD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;SAClC;QACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,KAAK,MAAM,WAAW,IAAI,UAAU,EAAE;YACpC,IAAI,CAAC,UAAU;YACX,oCAAoC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EACtD,IAAI,2BAA2B,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;SAC9F;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,eAAe;QACrC,MAAM,UAAU,GAAG,eAAe,IAAI,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;QAE3F,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC;YAC1F,OAAO;SACR;QACD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YAC3D,OAAO;SACR;QACD,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;QAEpC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YACxE,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;SAClD;IACH,CAAC;IAED;;;OAGG;IACH,wBAAwB,CAAC,QAAQ,EAAE,YAAY;QAC7C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;YACvB,MAAM,SAAS,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YAClF,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC;YACvD,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;CACF;AAED,MAAM,OAAO,wBAAyB,SAAQ,4BAA4B;IACxE;;;OAGG;IACH,YAAY,iBAAiB,EAAE,mBAAmB;QAChD,MAAM,OAAO,GAAG,0DAA0D,CAAC,CAAC;YAC1E,EAAC,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC;YAChG,EAAC,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YACrG,EAAC,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YAC3G,EAAC,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,EAAE;gBACvG,EAAE,EAAE,WAAW;gBACf,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;gBACtC,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU;aACzC;YACD,EAAC,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YAC5G,EAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;SAC3G,CAAC,CAAC;QACH,mBAAmB;QACnB,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,4CAA4C,CAAC,CACzF,EAAC,WAAW,EAAE,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;QAC9E,kBAAkB;IACpB,CAAC;IAED;;;OAGG;IACH,oBAAoB;QAClB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,UAAU,EAAE,aAAa;QACnC,QAAQ,UAAU,EAAE;YAClB,KAAK,QAAQ;gBACX,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC3G,KAAK,YAAY;gBACf,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/G,KAAK,cAAc;gBACjB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACjH,KAAK,YAAY;gBACf,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/G,KAAK,WAAW;gBACd,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC9G,KAAK,aAAa;gBAChB,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,cAAc,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChH,KAAK,WAAW;gBACd,OAAO,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC9G;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,UAAU,EAAE,CAAC,CAAC;SACnD;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,YAAY;QAC5B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,EAAE;YACvC,IAAI,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,eAAe,CAAC,CAAC;YAClF,OAAO;SACR;QACD,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,SAAS,EAAE;YACpG,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QACD,gFAAgF;QAChF,iFAAiF;QACjF,8DAA8D;QAC9D,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;QACtE,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAE5G,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;YACvC,MAAM,IAAI,GAAG,gEAAgE,CAAC;YAC1E,gBAAgB,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,oBAAoB,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;SACnF;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;CACF;AAED,MAAM,OAAO,kBAAmB,SAAQ,4BAA4B;IAClE;;;OAGG;IACH,YAAY,iBAAiB,EAAE,mBAAmB;QAChD,MAAM,OAAO,GAAG,0DAA0D,CAAC,CAAC;YAC1E,EAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YAC1G,EAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YAClG,EAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC;YACxG;gBACE,EAAE,EAAE,MAAM;gBACV,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;gBACjC,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU;aACzC;YACD,EAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC;SACtF,CAAC,CAAC;QACH,mBAAmB;QACnB,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,4CAA4C,CAAC,CACzF,EAAC,WAAW,EAAE,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;QACxE,kBAAkB;QAClB,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IACzD,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;QAC5D,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;QAClC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;YACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzF;;;;WAIG;QACH,SAAS,OAAO,CAAC,CAAC,EAAE,CAAC;YACnB,aAAa;YACb,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE;gBAC/B,OAAO,aAAa,CAAC;aACtB;YACD,aAAa;YACb,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE;gBAC/B,OAAO,CAAC,aAAa,CAAC;aACvB;YACD,OAAO,CAAC,CAAC;QACX,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Components from '../components/components.js';\nimport * as DataGrid from '../data_grid/data_grid.js';\nimport * as HeapSnapshotModel from '../heap_snapshot_model/heap_snapshot_model.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as SDK from '../sdk/sdk.js';  // eslint-disable-line no-unused-vars\nimport * as UI from '../ui/ui.js';\n\nimport {AllocationGridNode, HeapSnapshotConstructorNode, HeapSnapshotDiffNode, HeapSnapshotGenericObjectNode, HeapSnapshotGridNode, HeapSnapshotObjectNode, HeapSnapshotRetainingObjectNode,} from './HeapSnapshotGridNodes.js';  // eslint-disable-line no-unused-vars\nimport {HeapSnapshotProxy} from './HeapSnapshotProxy.js';               // eslint-disable-line no-unused-vars\nimport {HeapProfileHeader} from './HeapSnapshotView.js';                // eslint-disable-line no-unused-vars\nimport {DataDisplayDelegate, ProfileHeader} from './ProfileHeader.js';  // eslint-disable-line no-unused-vars\n\nexport const UIStrings = {\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  distanceFromWindowObject: 'Distance from window object',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  sizeOfTheObjectItselfInBytes: 'Size of the object itself in bytes',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  sizeOfTheObjectPlusTheGraphIt: 'Size of the object plus the graph it retains in bytes',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  object: 'Object',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  distance: 'Distance',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  shallowSize: 'Shallow Size',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  retainedSize: 'Retained Size',\n  /**\n  *@description Data grid name for Heap Snapshot Retainment data grids\n  */\n  heapSnapshotRetainment: 'Heap Snapshot Retainment',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  constructorString: 'Constructor',\n  /**\n  *@description Data grid name for Heap Snapshot Constructors data grids\n  */\n  heapSnapshotConstructors: 'Heap Snapshot Constructors',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  New: '# New',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  Deleted: '# Deleted',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  Delta: '# Delta',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  allocSize: 'Alloc. Size',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  freedSize: 'Freed Size',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  sizeDelta: 'Size Delta',\n  /**\n  *@description Data grid name for Heap Snapshot Diff data grids\n  */\n  heapSnapshotDiff: 'Heap Snapshot Diff',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  liveCount: 'Live Count',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  count: 'Count',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  liveSize: 'Live Size',\n  /**\n  *@description Text for the size of something\n  */\n  size: 'Size',\n  /**\n  *@description Text for a programming function\n  */\n  function: 'Function',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocation: 'Allocation',\n};\nconst str_ = i18n.i18n.registerUIStrings('profiler/HeapSnapshotDataGrids.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n/** @type {!WeakMap<!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>, !Array<!HeapSnapshotGridNode>>} */\nconst adjacencyMap = new WeakMap();\n\n/**\n * @extends DataGrid.DataGrid.DataGridImpl<!HeapSnapshotGridNode>\n */\nexport class HeapSnapshotSortableDataGrid extends DataGrid.DataGrid.DataGridImpl {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   * @param {!DataGrid.DataGrid.Parameters} dataGridParameters\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate, dataGridParameters) {\n    // TODO(allada) This entire class needs to be converted to use the templates in DataGridNode.\n    super(dataGridParameters);\n    /** @type {?HeapSnapshotProxy} */\n    this.snapshot = null;\n    /** @type {?HeapSnapshotGridNode} */\n    this.selectedNode = null;\n    this._heapProfilerModel = heapProfilerModel;\n    this._dataDisplayDelegate = dataDisplayDelegate;\n    const tooltips = [\n      ['distance', i18nString(UIStrings.distanceFromWindowObject)],\n      ['shallowSize', i18nString(UIStrings.sizeOfTheObjectItselfInBytes)],\n      ['retainedSize', i18nString(UIStrings.sizeOfTheObjectPlusTheGraphIt)]\n    ];\n    for (const info of tooltips) {\n      const headerCell = this.headerTableHeader(info[0]);\n      if (headerCell) {\n        headerCell.setAttribute('title', info[1]);\n      }\n    }\n\n    /**\n     * @type {number}\n     */\n    this._recursiveSortingDepth = 0;\n    /**\n     * @type {?HeapSnapshotGridNode}\n     */\n    this._highlightedNode = null;\n    /**\n     * @type {boolean}\n     */\n    this._populatedAndSorted = false;\n    /**\n     * @type {?UI.Toolbar.ToolbarInput}\n     */\n    this._nameFilter = null;\n    /** @type {!HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined} */\n    this._nodeFilter = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this.addEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this._sortingComplete, this);\n    this.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n    this.setRowContextMenuCallback(this._populateContextMenu.bind(this));\n  }\n\n  /**\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} node\n   * @return {boolean}\n   */\n  _isFilteredOut(node) {\n    const nameFilterValue = this._nameFilter ? this._nameFilter.value().toLowerCase() : '';\n    if (nameFilterValue && (node instanceof HeapSnapshotDiffNode || node instanceof HeapSnapshotConstructorNode) &&\n        node.filteredOut(nameFilterValue)) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {?SDK.HeapProfilerModel.HeapProfilerModel}\n   */\n  heapProfilerModel() {\n    return this._heapProfilerModel;\n  }\n\n  /**\n   * @return {!DataDisplayDelegate}\n   */\n  dataDisplayDelegate() {\n    return this._dataDisplayDelegate;\n  }\n\n  /**\n   * @return {!HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined}\n   */\n  nodeFilter() {\n    return this._nodeFilter;\n  }\n\n  /**\n   * @param {!UI.Toolbar.ToolbarInput} nameFilter\n   */\n  setNameFilter(nameFilter) {\n    this._nameFilter = nameFilter;\n  }\n\n  /**\n   * @return {number}\n   */\n  defaultPopulateCount() {\n    return 100;\n  }\n\n  _disposeAllNodes() {\n    const children = this.topLevelNodes();\n    for (let i = 0, l = children.length; i < l; ++i) {\n      children[i].dispose();\n    }\n  }\n\n  /**\n   * @override\n   */\n  wasShown() {\n    if (this._nameFilter) {\n      this._nameFilter.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this._onNameFilterChanged, this);\n      this.updateVisibleNodes(true);\n    }\n    if (this._populatedAndSorted) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n    }\n  }\n\n  _sortingComplete() {\n    this.removeEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this._sortingComplete, this);\n    this._populatedAndSorted = true;\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n  }\n\n  /**\n   * @override\n   */\n  willHide() {\n    if (this._nameFilter) {\n      this._nameFilter.removeEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this._onNameFilterChanged, this);\n    }\n    this._clearCurrentHighlight();\n  }\n\n  /**\n   * @param {!UI.ContextMenu.ContextMenu} contextMenu\n   * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} gridNode\n   */\n  _populateContextMenu(contextMenu, gridNode) {\n    const node = /** @type {!HeapSnapshotGridNode} */ (gridNode);\n    node.populateContextMenu(contextMenu, this._dataDisplayDelegate, this.heapProfilerModel());\n\n    if (node instanceof HeapSnapshotGenericObjectNode && node.linkElement &&\n        !contextMenu.containsTarget(node.linkElement)) {\n      contextMenu.appendApplicableItems(node.linkElement);\n    }\n  }\n\n  resetSortingCache() {\n    delete this._lastSortColumnId;\n    delete this._lastSortAscending;\n  }\n\n  /**\n   * @return {!Array<!HeapSnapshotGridNode>}\n   */\n  topLevelNodes() {\n    return /** @type {!Array<!HeapSnapshotGridNode>}*/ (this.rootNode().children);\n  }\n\n  /**\n   * @param {!Protocol.HeapProfiler.HeapSnapshotObjectId} heapSnapshotObjectId\n   * @return {!Promise<?HeapSnapshotGridNode>}\n   */\n  revealObjectByHeapSnapshotId(heapSnapshotObjectId) {\n    return Promise.resolve(/** @type {?HeapSnapshotGridNode} */ (null));\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} node\n   */\n  highlightNode(node) {\n    this._clearCurrentHighlight();\n    this._highlightedNode = node;\n    UI.UIUtils.runCSSAnimationOnce(this._highlightedNode.element(), 'highlighted-row');\n  }\n\n  _clearCurrentHighlight() {\n    if (!this._highlightedNode) {\n      return;\n    }\n    this._highlightedNode.element().classList.remove('highlighted-row');\n    this._highlightedNode = null;\n  }\n\n  resetNameFilter() {\n    if (this._nameFilter) {\n      this._nameFilter.setValue('');\n    }\n  }\n\n  _onNameFilterChanged() {\n    this.updateVisibleNodes(true);\n    this._deselectFilteredNodes();\n  }\n\n  _deselectFilteredNodes() {\n    let currentNode = this.selectedNode;\n    while (currentNode) {\n      if (this.selectedNode && this._isFilteredOut(/** @type {!HeapSnapshotGridNode} */ (currentNode))) {\n        this.selectedNode.deselect();\n        this.selectedNode = null;\n        return;\n      }\n      currentNode = /** @type {?HeapSnapshotGridNode} */ (currentNode.parent);\n    }\n  }\n\n  /**\n   * @param {string} sortColumnId\n   * @param {boolean} ascending\n   * @return {!HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig}\n   */\n  _sortFields(sortColumnId, ascending) {\n    throw new Error('Not implemented');\n  }\n\n  sortingChanged() {\n    const sortAscending = this.isSortOrderAscending();\n    const sortColumnId = this.sortColumnId();\n    if (this._lastSortColumnId === sortColumnId && this._lastSortAscending === sortAscending) {\n      return;\n    }\n    /** @type {?string} */\n    this._lastSortColumnId = sortColumnId;\n    /** @type {boolean} */\n    this._lastSortAscending = sortAscending;\n    const sortFields = this._sortFields(sortColumnId || '', sortAscending);\n\n    /**\n     * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} nodeA\n     * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} nodeB\n     */\n    function SortByTwoFields(nodeA, nodeB) {\n      // @ts-ignore\n      let field1 = nodeA[sortFields.fieldName1];\n      // @ts-ignore\n      let field2 = nodeB[sortFields.fieldName1];\n      let result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending1) {\n        result = -result;\n      }\n      if (result !== 0) {\n        return result;\n      }\n      // @ts-ignore\n      field1 = nodeA[sortFields.fieldName2];\n      // @ts-ignore\n      field2 = nodeB[sortFields.fieldName2];\n      result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending2) {\n        result = -result;\n      }\n      return result;\n    }\n    this._performSorting(SortByTwoFields);\n  }\n\n  /**\n   * @param {function(!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>, !DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>): number} sortFunction\n   */\n  _performSorting(sortFunction) {\n    this.recursiveSortingEnter();\n    const children = this.allChildren(this.rootNode());\n    this.rootNode().removeChildren();\n    children.sort(sortFunction);\n    for (let i = 0, l = children.length; i < l; ++i) {\n      const child = /** @type {!HeapSnapshotGridNode} */ (children[i]);\n      this.appendChildAfterSorting(child);\n      if (child.expanded) {\n        child.sort();\n      }\n    }\n    this.recursiveSortingLeave();\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} child\n   */\n  appendChildAfterSorting(child) {\n    const revealed = child.revealed;\n    this.rootNode().appendChild(child);\n    child.revealed = revealed;\n  }\n\n  recursiveSortingEnter() {\n    ++this._recursiveSortingDepth;\n  }\n\n  recursiveSortingLeave() {\n    if (!this._recursiveSortingDepth) {\n      return;\n    }\n    if (--this._recursiveSortingDepth) {\n      return;\n    }\n    this.updateVisibleNodes(true);\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n  }\n\n  /**\n   * @param {boolean} force\n   */\n  updateVisibleNodes(force) {\n  }\n\n  /**\n   * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} parent\n   * @return {!Array.<!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>>}\n   */\n  allChildren(parent) {\n    return parent.children;\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} parent\n   * @param {!HeapSnapshotGridNode} node\n   * @param {number} index\n   */\n  insertChild(parent, node, index) {\n    parent.insertChild(node, index);\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} parent\n   * @param {number} index\n   */\n  removeChildByIndex(parent, index) {\n    parent.removeChild(parent.children[index]);\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} parent\n   */\n  removeAllChildren(parent) {\n    parent.removeChildren();\n  }\n}\n\n/**\n * @enum {symbol}\n */\nexport const HeapSnapshotSortableDataGridEvents = {\n  ContentShown: Symbol('ContentShown'),\n  SortingComplete: Symbol('SortingComplete')\n};\n\nexport class HeapSnapshotViewportDataGrid extends HeapSnapshotSortableDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   * @param {!DataGrid.DataGrid.Parameters} dataGridParameters\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate, dataGridParameters) {\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n    this.scrollContainer.addEventListener('scroll', this._onScroll.bind(this), true);\n    this._topPaddingHeight = 0;\n    this._bottomPaddingHeight = 0;\n    /** @type {?HeapSnapshotGridNode} */\n    this.selectedNode = null;\n  }\n\n  /**\n   * @override\n   * @return {!Array.<!HeapSnapshotGridNode>}\n   */\n  topLevelNodes() {\n    return this.allChildren(this.rootNode());\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotGridNode} child\n   */\n  appendChildAfterSorting(child) {\n    // Do nothing here, it will be added in updateVisibleNodes.\n  }\n\n  /**\n   * @override\n   * @param {boolean} force\n   */\n  updateVisibleNodes(force) {\n    // Guard zone is used to ensure there are always some extra items\n    // above and below the viewport to support keyboard navigation.\n    const guardZoneHeight = 40;\n    const scrollHeight = this.scrollContainer.scrollHeight;\n    let scrollTop = this.scrollContainer.scrollTop;\n    let scrollBottom = scrollHeight - scrollTop - this.scrollContainer.offsetHeight;\n    scrollTop = Math.max(0, scrollTop - guardZoneHeight);\n    scrollBottom = Math.max(0, scrollBottom - guardZoneHeight);\n    let viewPortHeight = scrollHeight - scrollTop - scrollBottom;\n    // Do nothing if populated nodes still fit the viewport.\n    if (!force && scrollTop >= this._topPaddingHeight && scrollBottom >= this._bottomPaddingHeight) {\n      return;\n    }\n    const hysteresisHeight = 500;\n    scrollTop -= hysteresisHeight;\n    viewPortHeight += 2 * hysteresisHeight;\n    const selectedNode = this.selectedNode;\n    this.rootNode().removeChildren();\n\n    this._topPaddingHeight = 0;\n    this._bottomPaddingHeight = 0;\n\n    this._addVisibleNodes(this.rootNode(), scrollTop, scrollTop + viewPortHeight);\n\n    this.setVerticalPadding(this._topPaddingHeight, this._bottomPaddingHeight);\n\n    if (selectedNode) {\n      // Keep selection even if the node is not in the current viewport.\n      if (selectedNode.parent) {\n        selectedNode.select(true);\n      } else {\n        /** @type {?HeapSnapshotGridNode} */\n        this.selectedNode = selectedNode;\n      }\n    }\n  }\n\n  /**\n   * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} parentNode\n   * @param {number} topBound\n   * @param {number} bottomBound\n   * @return {number}\n   */\n  _addVisibleNodes(parentNode, topBound, bottomBound) {\n    if (!parentNode.expanded) {\n      return 0;\n    }\n\n    const children = this.allChildren(/** @type {!HeapSnapshotGridNode} */ (parentNode));\n    let topPadding = 0;\n    // Iterate over invisible nodes beyond the upper bound of viewport.\n    // Do not insert them into the grid, but count their total height.\n    let i = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this._isFilteredOut(child)) {\n        continue;\n      }\n      const newTop = topPadding + this._nodeHeight(child);\n      if (newTop > topBound) {\n        break;\n      }\n      topPadding = newTop;\n    }\n\n    // Put visible nodes into the data grid.\n    let position = topPadding;\n    for (; i < children.length && position < bottomBound; ++i) {\n      const child = children[i];\n      if (this._isFilteredOut(child)) {\n        continue;\n      }\n      const hasChildren = child.hasChildren();\n      child.removeChildren();\n      child.setHasChildren(hasChildren);\n      parentNode.appendChild(child);\n      position += child.nodeSelfHeight();\n      position += this._addVisibleNodes(child, topBound - position, bottomBound - position);\n    }\n\n    // Count the invisible nodes beyond the bottom bound of the viewport.\n    let bottomPadding = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this._isFilteredOut(child)) {\n        continue;\n      }\n      bottomPadding += this._nodeHeight(child);\n    }\n\n    this._topPaddingHeight += topPadding;\n    this._bottomPaddingHeight += bottomPadding;\n    return position + bottomPadding;\n  }\n\n  /**\n   * @param {!HeapSnapshotGridNode} node\n   * @return {number}\n   */\n  _nodeHeight(node) {\n    let result = node.nodeSelfHeight();\n    if (!node.expanded) {\n      return result;\n    }\n    const children = this.allChildren(node);\n    for (let i = 0; i < children.length; i++) {\n      result += this._nodeHeight(children[i]);\n    }\n    return result;\n  }\n\n  /**\n   * @param {!Array<!HeapSnapshotGridNode>} pathToReveal\n   * @return {!Promise<!HeapSnapshotGridNode>}\n   */\n  revealTreeNode(pathToReveal) {\n    const height = this._calculateOffset(pathToReveal);\n    const node = /** @type {!HeapSnapshotGridNode} */ (pathToReveal[pathToReveal.length - 1]);\n    const scrollTop = this.scrollContainer.scrollTop;\n    const scrollBottom = scrollTop + this.scrollContainer.offsetHeight;\n    if (height >= scrollTop && height < scrollBottom) {\n      return Promise.resolve(node);\n    }\n\n    const scrollGap = 40;\n    this.scrollContainer.scrollTop = Math.max(0, height - scrollGap);\n    return new Promise(resolve => {\n      console.assert(!this._scrollToResolveCallback);\n      this._scrollToResolveCallback = resolve.bind(null, node);\n      // Still resolve the promise if it does not scroll for some reason.\n      this.scrollContainer.window().requestAnimationFrame(() => {\n        if (!this._scrollToResolveCallback) {\n          return;\n        }\n        this._scrollToResolveCallback();\n        this._scrollToResolveCallback = null;\n      });\n    });\n  }\n\n  /**\n   * @param {!Array.<!HeapSnapshotGridNode>} pathToReveal\n   * @return {number}\n   */\n  _calculateOffset(pathToReveal) {\n    let parentNode = this.rootNode();\n    let height = 0;\n    if (pathToReveal.length === 0) {\n      return 0;\n    }\n    for (let i = 0; i < pathToReveal.length; ++i) {\n      const node = pathToReveal[i];\n      const children = this.allChildren(parentNode);\n      for (let j = 0; j < children.length; ++j) {\n        const child = children[j];\n        if (node === child) {\n          height += node.nodeSelfHeight();\n          break;\n        }\n        height += this._nodeHeight(child);\n      }\n      parentNode = node;\n    }\n    return height - /** @type {!HeapSnapshotGridNode} */ (pathToReveal[pathToReveal.length - 1]).nodeSelfHeight();\n  }\n\n  /**\n   * @override\n   * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} parent\n   * @return {!Array.<!HeapSnapshotGridNode>}\n   */\n  allChildren(parent) {\n    const children = adjacencyMap.get(parent) || [];\n    if (!adjacencyMap.has(parent)) {\n      adjacencyMap.set(parent, children);\n    }\n    return children;\n  }\n\n  /**\n   * @param {!DataGrid.DataGrid.DataGridNode<!HeapSnapshotGridNode>} parent\n   * @param {!HeapSnapshotGridNode} node\n   */\n  appendNode(parent, node) {\n    this.allChildren(parent).push(node);\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotGridNode} parent\n   * @param {!HeapSnapshotGridNode} node\n   * @param {number} index\n   */\n  insertChild(parent, node, index) {\n    this.allChildren(parent).splice(index, 0, /** @type {!HeapSnapshotGridNode} */ (node));\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotGridNode} parent\n   * @param {number} index\n   */\n  removeChildByIndex(parent, index) {\n    this.allChildren(parent).splice(index, 1);\n  }\n\n  /**\n     * @override\n     * @param {!HeapSnapshotGridNode} parent\n     */\n  removeAllChildren(parent) {\n    adjacencyMap.delete(parent);\n  }\n\n  removeTopLevelNodes() {\n    this._disposeAllNodes();\n    this.rootNode().removeChildren();\n    this.removeAllChildren(/** @type {!HeapSnapshotGridNode} */ (this.rootNode()));\n  }\n\n  /**\n   * @param {!HTMLElement} element\n   * @return {boolean}\n   */\n  _isScrolledIntoView(element) {\n    const viewportTop = this.scrollContainer.scrollTop;\n    const viewportBottom = viewportTop + this.scrollContainer.clientHeight;\n    const elemTop = element.offsetTop;\n    const elemBottom = elemTop + element.offsetHeight;\n    return elemBottom <= viewportBottom && elemTop >= viewportTop;\n  }\n\n  /**\n   * @override\n   */\n  onResize() {\n    super.onResize();\n    this.updateVisibleNodes(false);\n  }\n\n  /**\n   * @param {!Event} event\n   */\n  _onScroll(event) {\n    this.updateVisibleNodes(false);\n\n    if (this._scrollToResolveCallback) {\n      this._scrollToResolveCallback();\n      this._scrollToResolveCallback = null;\n    }\n  }\n}\n\nexport class HeapSnapshotContainmentDataGrid extends HeapSnapshotSortableDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   * @param {string} displayName\n   * @param {!Array.<!DataGrid.DataGrid.ColumnDescriptor>=} columns\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate, displayName, columns) {\n    columns =\n        columns || (/** @type {!Array<!DataGrid.DataGrid.ColumnDescriptor>} */ ([\n          {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true},\n          {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true}, {\n            id: 'shallowSize',\n            title: i18nString(UIStrings.shallowSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true\n          },\n          {\n            id: 'retainedSize',\n            title: i18nString(UIStrings.retainedSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true,\n            sort: DataGrid.DataGrid.Order.Descending\n          }\n        ]));\n    const dataGridParameters = /** @type {!DataGrid.DataGrid.Parameters} */ ({displayName, columns});\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n    this.snapshot = snapshot;\n    const node =\n        new HeapSnapshotModel.HeapSnapshotModel.Node(-1, 'root', 0, nodeIndex || snapshot.rootNodeIndex, 0, 0, '');\n    this.setRootNode(this._createRootNode(snapshot, node));\n    /** @type {!HeapSnapshotGridNode} */ (this.rootNode()).sort();\n  }\n\n  /**\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {!HeapSnapshotModel.HeapSnapshotModel.Node} node\n   */\n  _createRootNode(snapshot, node) {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  /**\n   * @override\n   */\n  sortingChanged() {\n    const rootNode = this.rootNode();\n    if (rootNode.hasChildren()) {\n      /** @type {!HeapSnapshotGridNode} */ (rootNode).sort();\n    }\n  }\n}\n\nexport class HeapSnapshotRetainmentDataGrid extends HeapSnapshotContainmentDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate) {\n    const columns = /** @type {!Array<!DataGrid.DataGrid.ColumnDescriptor>} */ ([\n      {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true}, {\n        id: 'distance',\n        title: i18nString(UIStrings.distance),\n        width: '70px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Ascending\n      },\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true},\n      {id: 'retainedSize', title: i18nString(UIStrings.retainedSize), width: '110px', sortable: true, fixedWidth: true}\n    ]);\n    super(heapProfilerModel, dataDisplayDelegate, i18nString(UIStrings.heapSnapshotRetainment), columns);\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {!HeapSnapshotModel.HeapSnapshotModel.Node} node\n   */\n  _createRootNode(snapshot, node) {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotRetainingObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  /**\n   * @override\n   * @param {string} sortColumn\n   * @param {boolean} sortAscending\n   */\n  _sortFields(sortColumn, sortAscending) {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_name', sortAscending, '_count', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_count', sortAscending, '_name', true);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_shallowSize', sortAscending, '_name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_retainedSize', sortAscending, '_name', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_distance', sortAscending, '_name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  reset() {\n    this.rootNode().removeChildren();\n    this.resetSortingCache();\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n    await super.setDataSource(snapshot, nodeIndex);\n    this.rootNode().expand();\n  }\n}\n\n/**\n * @enum {symbol}\n */\nexport const HeapSnapshotRetainmentDataGridEvents = {\n  ExpandRetainersComplete: Symbol('ExpandRetainersComplete')\n};\n\nexport class HeapSnapshotConstructorsDataGrid extends HeapSnapshotViewportDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate) {\n    const columns = /** @type {!Array<!DataGrid.DataGrid.ColumnDescriptor>} */ ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true},\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true}, {\n        id: 'retainedSize',\n        title: i18nString(UIStrings.retainedSize),\n        width: '110px',\n        sort: DataGrid.DataGrid.Order.Descending,\n        sortable: true,\n        fixedWidth: true\n      }\n    ]);\n    // clang-format off\n    super(heapProfilerModel, dataDisplayDelegate, /** @type {!DataGrid.DataGrid.Parameters} */ (\n      {displayName: i18nString(UIStrings.heapSnapshotConstructors).toString(), columns}));\n    // clang-format on\n    this._profileIndex = -1;\n    this._objectIdToSelect = null;\n\n    /** @type {?HeapSnapshotModel.HeapSnapshotModel.NodeFilter} */\n    this._nextRequestedFilter = null;\n  }\n\n  /**\n   * @override\n   * @param {string} sortColumn\n   * @param {boolean} sortAscending\n   * @return {!HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig}\n   */\n  _sortFields(sortColumn, sortAscending) {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_name', sortAscending, '_retainedSize', false);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            '_distance', sortAscending, '_retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_shallowSize', sortAscending, '_name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_retainedSize', sortAscending, '_name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.HeapProfiler.HeapSnapshotObjectId} id\n   * @return {!Promise<?HeapSnapshotGridNode>}\n   */\n  async revealObjectByHeapSnapshotId(id) {\n    if (!this.snapshot) {\n      this._objectIdToSelect = id;\n      return null;\n    }\n\n    const className = await this.snapshot.nodeClassName(parseInt(id, 10));\n    if (!className) {\n      return null;\n    }\n\n    const parent = this.topLevelNodes().find(classNode => classNode.name === className);\n    if (!parent) {\n      return null;\n    }\n\n    const nodes =\n        await /** @type {!HeapSnapshotConstructorNode} */ (parent).populateNodeBySnapshotObjectId(parseInt(id, 10));\n    return nodes.length ? this.revealTreeNode(nodes) : null;\n  }\n\n  clear() {\n    this._nextRequestedFilter = null;\n    this._lastFilter = null;\n    this.removeTopLevelNodes();\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n    this.snapshot = snapshot;\n    if (this._profileIndex === -1) {\n      this._populateChildren();\n    }\n\n    if (this._objectIdToSelect) {\n      this.revealObjectByHeapSnapshotId(this._objectIdToSelect);\n      this._objectIdToSelect = null;\n    }\n  }\n\n  /**\n   * @param {number} minNodeId\n   * @param {number} maxNodeId\n   */\n  setSelectionRange(minNodeId, maxNodeId) {\n    this._nodeFilter = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    this._populateChildren(this._nodeFilter);\n  }\n\n  /**\n   * @param {number} allocationNodeId\n   */\n  setAllocationNodeId(allocationNodeId) {\n    this._nodeFilter = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this._nodeFilter.allocationNodeId = allocationNodeId;\n    this._populateChildren(this._nodeFilter);\n  }\n\n  /**\n   * @param {!HeapSnapshotModel.HeapSnapshotModel.NodeFilter} nodeFilter\n   * @param {!Object<string, !HeapSnapshotModel.HeapSnapshotModel.Aggregate>} aggregates\n   */\n  _aggregatesReceived(nodeFilter, aggregates) {\n    this._filterInProgress = null;\n    if (this._nextRequestedFilter && this.snapshot) {\n      this.snapshot.aggregatesWithFilter(this._nextRequestedFilter)\n          .then(this._aggregatesReceived.bind(this, this._nextRequestedFilter));\n      this._filterInProgress = this._nextRequestedFilter;\n      this._nextRequestedFilter = null;\n    }\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    for (const constructor in aggregates) {\n      this.appendNode(\n          /** @type {!HeapSnapshotGridNode} */ (this.rootNode()),\n          new HeapSnapshotConstructorNode(this, constructor, aggregates[constructor], nodeFilter));\n    }\n    this.sortingChanged();\n    this._lastFilter = nodeFilter;\n  }\n\n  /**\n   * @param {!HeapSnapshotModel.HeapSnapshotModel.NodeFilter=} maybeNodeFilter\n   */\n  async _populateChildren(maybeNodeFilter) {\n    const nodeFilter = maybeNodeFilter || new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n\n    if (this._filterInProgress) {\n      this._nextRequestedFilter = this._filterInProgress.equals(nodeFilter) ? null : nodeFilter;\n      return;\n    }\n    if (this._lastFilter && this._lastFilter.equals(nodeFilter)) {\n      return;\n    }\n    this._filterInProgress = nodeFilter;\n\n    if (this.snapshot) {\n      const aggregates = await this.snapshot.aggregatesWithFilter(nodeFilter);\n      this._aggregatesReceived(nodeFilter, aggregates);\n    }\n  }\n\n  /**\n   * @param {!Array.<!HeapProfileHeader>} profiles\n   * @param {number} profileIndex\n   */\n  filterSelectIndexChanged(profiles, profileIndex) {\n    this._profileIndex = profileIndex;\n    this._nodeFilter = undefined;\n    if (profileIndex !== -1) {\n      const minNodeId = profileIndex > 0 ? profiles[profileIndex - 1].maxJSObjectId : 0;\n      const maxNodeId = profiles[profileIndex].maxJSObjectId;\n      this._nodeFilter = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    }\n\n    this._populateChildren(this._nodeFilter);\n  }\n}\n\nexport class HeapSnapshotDiffDataGrid extends HeapSnapshotViewportDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate) {\n    const columns = /** @type {!Array<!DataGrid.DataGrid.ColumnDescriptor>} */ ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'addedCount', title: i18nString(UIStrings.New), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'removedCount', title: i18nString(UIStrings.Deleted), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'countDelta', title: i18nString(UIStrings.Delta), width: '65px', sortable: true, fixedWidth: true}, {\n        id: 'addedSize',\n        title: i18nString(UIStrings.allocSize),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending\n      },\n      {id: 'removedSize', title: i18nString(UIStrings.freedSize), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'sizeDelta', title: i18nString(UIStrings.sizeDelta), width: '75px', sortable: true, fixedWidth: true}\n    ]);\n    // clang-format off\n    super(heapProfilerModel, dataDisplayDelegate, /** @type {!DataGrid.DataGrid.Parameters} */ (\n      {displayName: i18nString(UIStrings.heapSnapshotDiff).toString(), columns}));\n    // clang-format on\n  }\n\n  /**\n   * @override\n   * @return {number}\n   */\n  defaultPopulateCount() {\n    return 50;\n  }\n\n  /**\n   * @override\n   * @param {string} sortColumn\n   * @param {boolean} sortAscending\n   */\n  _sortFields(sortColumn, sortAscending) {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_name', sortAscending, '_count', false);\n      case 'addedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_addedCount', sortAscending, '_name', true);\n      case 'removedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_removedCount', sortAscending, '_name', true);\n      case 'countDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_countDelta', sortAscending, '_name', true);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_addedSize', sortAscending, '_name', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_removedSize', sortAscending, '_name', true);\n      case 'sizeDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('_sizeDelta', sortAscending, '_name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n    this.snapshot = snapshot;\n  }\n\n  /**\n   * @param {!HeapSnapshotProxy} baseSnapshot\n   */\n  setBaseDataSource(baseSnapshot) {\n    this.baseSnapshot = baseSnapshot;\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    if (this.baseSnapshot === this.snapshot) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n      return;\n    }\n    this._populateChildren();\n  }\n\n  async _populateChildren() {\n    if (this.snapshot === null || this.baseSnapshot === undefined || this.baseSnapshot.uid === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    // Two snapshots live in different workers isolated from each other. That is why\n    // we first need to collect information about the nodes in the first snapshot and\n    // then pass it to the second snapshot to calclulate the diff.\n    const aggregatesForDiff = await this.baseSnapshot.aggregatesForDiff();\n    const diffByClassName = await this.snapshot.calculateSnapshotDiff(this.baseSnapshot.uid, aggregatesForDiff);\n\n    for (const className in diffByClassName) {\n      const diff = /** @type {!HeapSnapshotModel.HeapSnapshotModel.DiffForClass} */ (\n          /** @type {?} */ (diffByClassName[className]));\n      this.appendNode(this.rootNode(), new HeapSnapshotDiffNode(this, className, diff));\n    }\n    this.sortingChanged();\n  }\n}\n\nexport class AllocationDataGrid extends HeapSnapshotViewportDataGrid {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!DataDisplayDelegate} dataDisplayDelegate\n   */\n  constructor(heapProfilerModel, dataDisplayDelegate) {\n    const columns = /** @type {!Array<!DataGrid.DataGrid.ColumnDescriptor>} */ ([\n      {id: 'liveCount', title: i18nString(UIStrings.liveCount), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'count', title: i18nString(UIStrings.count), width: '65px', sortable: true, fixedWidth: true},\n      {id: 'liveSize', title: i18nString(UIStrings.liveSize), width: '75px', sortable: true, fixedWidth: true},\n      {\n        id: 'size',\n        title: i18nString(UIStrings.size),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending\n      },\n      {id: 'name', title: i18nString(UIStrings.function), disclosure: true, sortable: true},\n    ]);\n    // clang-format off\n    super(heapProfilerModel, dataDisplayDelegate, /** @type {!DataGrid.DataGrid.Parameters} */ (\n      {displayName: i18nString(UIStrings.allocation).toString(), columns}));\n    // clang-format on\n    this._linkifier = new Components.Linkifier.Linkifier();\n  }\n\n  get linkifier() {\n    return this._linkifier;\n  }\n\n  dispose() {\n    this._linkifier.reset();\n  }\n\n  /**\n   * @override\n   * @param {!HeapSnapshotProxy} snapshot\n   * @param {number} nodeIndex\n   */\n  async setDataSource(snapshot, nodeIndex) {\n    this.snapshot = snapshot;\n    this._topNodes = await this.snapshot.allocationTracesTops();\n    this._populateChildren();\n  }\n\n  _populateChildren() {\n    this.removeTopLevelNodes();\n    const root = this.rootNode();\n    const tops = this._topNodes || [];\n    for (const top of tops) {\n      this.appendNode(root, new AllocationGridNode(this, top));\n    }\n    this.updateVisibleNodes(true);\n  }\n\n  /**\n   * @override\n   */\n  sortingChanged() {\n    if (this._topNodes !== undefined) {\n      this._topNodes.sort(this.createComparator());\n      this.rootNode().removeChildren();\n      this._populateChildren();\n    }\n  }\n\n  /**\n   * @return {function(!Object, !Object):number}\n   */\n  createComparator() {\n    const fieldName = this.sortColumnId();\n    const compareResult = (this.sortOrder() === DataGrid.DataGrid.Order.Ascending) ? +1 : -1;\n    /**\n     * @param {!Object} a\n     * @param {!Object} b\n     * @return {number}\n     */\n    function compare(a, b) {\n      // @ts-ignore\n      if (a[fieldName] > b[fieldName]) {\n        return compareResult;\n      }\n      // @ts-ignore\n      if (a[fieldName] < b[fieldName]) {\n        return -compareResult;\n      }\n      return 0;\n    }\n    return compare;\n  }\n}\n"]}