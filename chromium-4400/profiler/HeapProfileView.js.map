{"version":3,"file":"HeapProfileView.js","sourceRoot":"","sources":["../../../../../front_end/profiler/HeapProfileView.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC,CAAE,qCAAqC;AACrF,OAAO,KAAK,UAAU,MAAM,6BAA6B,CAAC;AAC1D,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,MAAM,MAAM,uBAAuB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAElC,OAAO,EAAC,6BAA6B,EAAC,MAAM,2BAA2B,CAAC;AACxE,OAAO,EAAC,oBAAoB,EAAE,eAAe,EAAU,MAAM,2BAA2B,CAAC,CAAE,qCAAqC;AAEhI,OAAO,EAAC,aAAa,EAAiB,WAAW,EAAC,MAAM,oBAAoB,CAAC,CAAE,qCAAqC;AACpH,OAAO,EAAC,WAAW,EAAE,qBAAqB,EAAC,MAAM,kBAAkB,CAAC;AAEpE,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB;;;MAGE;IACF,aAAa,EAAE,sBAAsB;IACrC;;MAEE;IACF,aAAa,EAAE,mBAAmB;IAClC;;MAEE;IACF,cAAc,EAAE,oBAAoB;IACpC;;MAEE;IACF,iBAAiB,EAAE,qBAAqB;IACxC;;MAEE;IACF,kBAAkB,EAAE,sBAAsB;IAC1C;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,uBAAuB,EAAE,4BAA4B;IACrD;;MAEE;IACF,QAAQ,EAAE,WAAW;IACrB;;MAEE;IACF,kBAAkB,EAAE,qBAAqB;IACzC;;MAEE;IACF,gBAAgB,EAAE,mBAAmB;IACrC;;MAEE;IACF,4BAA4B,EACxB,yQAAyQ;IAC7Q;;;MAGE;IACF,QAAQ,EAAE,eAAe;IACzB;;;MAGE;IACF,MAAM,EAAE,aAAa;IACrB;;;MAGE;IACF,aAAa,EAAE,SAAS;IACxB;;;MAGE;IACF,GAAG,EAAE,UAAU;IACf;;MAEE;IACF,IAAI,EAAE,MAAM;IACZ;;MAEE;IACF,QAAQ,EAAE,WAAW;IACrB;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,GAAG,EAAE,KAAK;CACX,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;AACnF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE;;;GAGG;AACH,SAAS,4BAA4B,CAAC,aAAa;IACjD,OAAO,yDAAyD,CAAC,CAC7D,aAAa,CAAC,QAAQ,IAAI,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC;AACjE,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,eAAgB,SAAQ,WAAW;IAC9C;;OAEG;IACH,YAAY,aAAa;QACvB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAEzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAEtD,6BAA6B;QAC7B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,6BAA6B;QAC7B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,6BAA6B;QAC7B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,6BAA6B;QAC7B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,qBAAqB;QACrB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,qBAAqB;QACrB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAEtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAEpD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,EAAE;YACtE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7F,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnE,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAE/B,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAC1G,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC9D,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;gBAC7G,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;gBAC9B,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY;QAChB,OAAO,CAAC,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,KAAK;QACtB,MAAM,KAAK,GAAG,qBAAqB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,KAAK,GAAG,qBAAqB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAC1B,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,KAAK,EAAE,KAAK;QAC7B,MAAM,WAAW,GAAG,4BAA4B,CAAC,yCAAyC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QACjH,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAK;QAClB,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SACvB;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC3C,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;YACpC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAChE,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAC9B,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC;gBAC1F,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC;SACpC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAEpD,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpE,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE;YACzD,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;SACtB;QAED,MAAM,OAAO,GAAG,uBAAuB,CAAC,CAAC;YACvC,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,GAAG,EAAE,IAAI,CAAC,IAAI;YACd,GAAG,EAAE,IAAI,CAAC,SAAS;YACnB,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,SAAS,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,QAAQ;QACnB,QAAQ,QAAQ,EAAE;YAChB,KAAK,MAAM;gBACT,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACV,OAAO,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;SAC/C;QACD,OAAO,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,4BAA4B;QAC1B,OAAO,IAAI,0BAA0B;QACjC,wCAAwC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,CAAC;IACzG,CAAC;CAEF;AAED,MAAM,OAAO,2BAA4B,SAAQ,WAAW;IAC1D;;;OAGG;IACH,YAAY,MAAM,EAAE,WAAW;QAC7B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,oBAAoB;QAClB,OAAO,yCAAyC,CAAC,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC,CAAC;IAClF,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,aAAa;QACX,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IAC9G,CAAC;IAED;;;OAGG;IACH,aAAa;QACX,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;aAAM;YACL,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,sBAAsB;QACpB,MAAM,iBAAiB,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACxG,IAAI,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,EAAE;YACrD,OAAO;SACR;QACD,MAAM,aAAa,GAAG,IAAI,yBAAyB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC7E,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC/B,aAAa,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5D,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACtD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAChF,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAE9E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACpD,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,EAAE;YAC5D,OAAO;SACR;QAED,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAI,eAAe,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC;YACtC,eAAe,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAC/D,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;SACpC;QACD,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAC9E,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAChF,CAAC;IAED;;;;OAIG;IACH,2BAA2B,CAAC,KAAK;QAC/B,OAAO,IAAI,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,2BAA2B;QACzB,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,cAAc;QACZ,MAAM,iBAAiB,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,aAAa;QACX,MAAM,iBAAiB,CAAC;IAC1B,CAAC;CACF;AAED,uCAAuC;AACvC,IAAI,+BAA+B,CAAC;AAEpC,MAAM,OAAO,uBAAwB,SAAQ,2BAA2B;IACtE;QACE,KAAK,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,+BAA+B,EAAE;YACpC,+BAA+B,GAAG,IAAI,CAAC;SACxC;QAED,qBAAqB;QACrB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;IAC/B,CAAC;IAED,MAAM,KAAK,QAAQ;QACjB,OAAO,+BAA+B,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACf,OAAO,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QACb,OAAO,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACzD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QAED,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAClC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,EAAE;YACtE,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;gBACzC,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC5B;IACH,CAAC;IAED;;OAEG;IACH,uBAAuB;QACrB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACrD,IAAI,gBAAgB,EAAE;YACpB,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,CAAC;YAC/D,OAAO,iBAAiB,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa;QACjB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAC/E,MAAM,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACzD,IAAI,CAAC,iBAAiB,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,YAAY,EAAE,CAAC;QAC/D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACzD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QAED,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,OAAO;SACR;QACD,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QACnF,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7B,CAAC;CACF;AAED,uBAAuB,CAAC,MAAM,GAAG,cAAc,CAAC;AAEhD,+BAA+B;AAC/B,uBAAuB,CAAC,MAAM,GAAG;IAC/B,gBAAgB,EAAE,MAAM,CAAC,kBAAkB,CAAC;IAC5C,WAAW,EAAE,MAAM,CAAC,aAAa,CAAC;CACnC,CAAC;AAEF,MAAM,OAAO,yBAA0B,SAAQ,qBAAqB;IAClE;;;;OAIG;IACH,YAAY,iBAAiB,EAAE,IAAI,EAAE,KAAK;QACxC,KAAK,CACD,iBAAiB,IAAI,iBAAiB,CAAC,aAAa,EAAE,EAAE,IAAI,EAC5D,KAAK,IAAI,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,cAAc,EAAE,EAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG;YACtB,IAAI,EAAE;gBACJ,SAAS,EAAE;oBACT,YAAY,EAAE,EAAE;oBAChB,QAAQ,EAAE,EAAE;oBACZ,GAAG,EAAE,EAAE;oBACP,UAAU,EAAE,CAAC;oBACb,YAAY,EAAE,CAAC;iBAChB;gBACD,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,CAAC;gBACX,EAAE,EAAE,CAAC;aACN;YACD,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,EAAE;SACV,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,eAAe;QACb,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;CACF;AAED,MAAM,OAAO,uBAAwB,SAAQ,GAAG,CAAC,gBAAgB,CAAC,WAAW;IAC3E;;OAEG;IACH,YAAY,IAAI;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,0CAA0C,CAAC,CAAC;YAC5D,wDAAwD;YACxD,uCAAuC;YACvC,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC;YAClC,uCAAuC;YACvC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,uCAAuC;YACvC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;YAChB,uCAAuC;YACvC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAClC,uCAAuC;YACvC,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;SACvC,CAAC,CAAC;QACrB,KAAK,CAAC,SAAS,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC5B,CAAC;CACF;AAED,MAAM,OAAO,wBAAyB,SAAQ,GAAG,CAAC,gBAAgB,CAAC,gBAAgB;IACjF;;;;OAIG;IACH,YAAY,OAAO,EAAE,UAAU,EAAE,UAAU;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC;QAExD,mCAAmC;QACnC,IAAI,eAAe,GAAG,IAAI,CAAC;QAC3B,IAAI,UAAU,IAAI,UAAU,EAAE;YAC5B,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;YAC5B,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC;YAC7B,UAAU,GAAG,UAAU,IAAI,QAAQ,CAAC;YACpC,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;gBACpC,IAAI,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,MAAM,CAAC,OAAO,GAAG,UAAU,EAAE;oBAC9D,SAAS;iBACV;gBACD,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrD,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;aACxD;SACF;QAED,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpD;;;WAGG;QACH,SAAS,oBAAoB,CAAC,IAAI;YAChC,MAAM,UAAU,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,eAAe,GAAG,CAAC,UAAU,CAAC,CAAC;YACrC,OAAO,eAAe,CAAC,MAAM,EAAE;gBAC7B,MAAM,UAAU,GAAG,6DAA6D,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;gBACzG,MAAM,UAAU,GAAG,uCAAuC,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;gBACnF,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACpD,MAAM,WAAW,GAAG,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACvD,IAAI,eAAe,EAAE;wBACnB,WAAW,CAAC,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;qBACvD;oBACD,OAAO,WAAW,CAAC;gBACrB,CAAC,CAAC,CAAC;gBACH,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;aAC9C;YACD,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC/B,OAAO,UAAU,CAAC;QACpB,CAAC;QAED;;;WAGG;QACH,SAAS,kBAAkB,CAAC,IAAI;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YACzD,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,aAAa;IACxB;;OAEG;IACH,YAAY,WAAW;QACrB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,KAAK;QACf,OAAO,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,yBAAyB,CAAC,KAAK;QAC7B,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACH,aAAa,CAAC,KAAK,EAAE,IAAI;QACvB,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,IAAI;QACd,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;QAC9E,MAAM,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACrE,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,mBAAmB;YAC9B,YAAY,EAAE,SAAS;YACvB,OAAO,EAAE,SAAS;SACnB,CAAC;QACF,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACjH,CAAC;CACF;AAED,MAAM,OAAO,0BAA2B,SAAQ,6BAA6B;IAC3E;;;OAGG;IACH,YAAY,OAAO,EAAE,iBAAiB;QACpC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,wDAAwD;QACxD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,CAAC,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,UAAU;QAC5B,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,KAAK,EAAE,SAAS;QAC1B,OAAO,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,GAAG,EAAE,MAAM,CAAC,sBAAsB,CAAC,KAAK,GAAG,GAAG,CAAC,EAAC,CAAC,CAAC;IACtF,CAAC;IAED;;;OAGG;IACH,sBAAsB;QACpB;;;WAGG;QACH,SAAS,UAAU,CAAC,IAAI;YACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5E,CAAC;QACD,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7C,wDAAwD;QACxD,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,eAAe,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd;;WAEG;QACH,SAAS,OAAO,CAAC,IAAI;YACnB,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACzB,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC3B,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,eAAe,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;YAClC,EAAE,KAAK,CAAC;YACR,EAAE,KAAK,CAAC;YACR,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC/B,EAAE,KAAK,CAAC;YACR,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACrC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE5B,IAAI,CAAC,cAAc,GAAG,QAAQ,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;QAE7G,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,2BAA2B,CAAC,UAAU;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,uDAAuD;QACvD,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB;;;WAGG;QACH,SAAS,gBAAgB,CAAC,KAAK,EAAE,KAAK;YACpC,SAAS,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC/C,CAAC;QACD,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACjG,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACpG,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QACvD,MAAM,IAAI,GAAG,SAAS,CAAC,4BAA4B,CAC/C,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACvF,IAAI,IAAI,EAAE;YACR,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,qBAAqB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;SACvF;QACD,SAAS,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Components from '../components/components.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as PerfUI from '../perf_ui/perf_ui.js';\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\nimport {HeapTimelineOverview, IdsRangeChanged, Samples} from './HeapTimelineOverview.js';  // eslint-disable-line no-unused-vars\nimport {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';           // eslint-disable-line no-unused-vars\nimport {ProfileEvents, ProfileHeader, ProfileType} from './ProfileHeader.js';  // eslint-disable-line no-unused-vars\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nexport const UIStrings = {\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  *@example {3 MB} PH1\n  */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  selfSizeBytes: 'Self Size (bytes)',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  totalSizeBytes: 'Total Size (bytes)',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  stopHeapProfiling: 'Stop heap profiling',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  startHeapProfiling: 'Start heap profiling',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recording: 'Recording…',\n  /**\n  *@description Icon title in Heap Profile View of a profiler tool\n  */\n  heapProfilerIsRecording: 'Heap profiler is recording',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  stopping: 'Stopping…',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  allocationSampling: 'Allocation sampling',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  samplingProfiles: 'SAMPLING PROFILES',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  recordMemoryAllocationsUsing:\n      'Record memory allocations using sampling method.\\n              This profile type has minimal performance overhead and can be used for long running operations.\\n              It provides good approximation of allocations broken down by JavaScript execution stack.',\n  /**\n  *@description Name of a profile\n  *@example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n  /**\n  *@description Accessible text for the value in bytes in memory allocation or coverage view.\n  *@example {12345} PH1\n  */\n  sBytes: '{PH1} bytes',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  *@example {21.33} PH1\n  */\n  formatPercent: '{PH1} %',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  *@example {1,021} PH1\n  */\n  skb: '{PH1} kB',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  selfSize: 'Self size',\n  /**\n  *@description Text in Heap Profile View of a profiler tool\n  */\n  totalSize: 'Total size',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('profiler/HeapProfileView.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n/**\n * @param {!SamplingHeapProfileHeader} profileHeader\n * @return {!Protocol.HeapProfiler.SamplingHeapProfile}\n */\nfunction convertToSamplingHeapProfile(profileHeader) {\n  return /** @type {!Protocol.HeapProfiler.SamplingHeapProfile} */ (\n      profileHeader._profile || profileHeader.protocolProfile());\n}\n\n/**\n * @implements {UI.SearchableView.Searchable}\n */\nexport class HeapProfileView extends ProfileView {\n  /**\n   * @param {!SamplingHeapProfileHeader} profileHeader\n   */\n  constructor(profileHeader) {\n    super();\n\n    this.profileHeader = profileHeader;\n    this._profileType = profileHeader.profileType();\n    this.initialize(new NodeFormatter(this));\n    const profile = new SamplingHeapProfileModel(convertToSamplingHeapProfile(profileHeader));\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n\n    this._selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    /** @type {!Array<number>} */\n    this._timestamps = [];\n    /** @type {!Array<number>} */\n    this._sizes = [];\n    /** @type {!Array<number>} */\n    this._max = [];\n    /** @type {!Array<number>} */\n    this._ordinals = [];\n    /** @type {number} */\n    this._totalTime = 0;\n    /** @type {number} */\n    this._lastOrdinal = 0;\n\n    this._timelineOverview = new HeapTimelineOverview();\n\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this._timelineOverview.addEventListener(IdsRangeChanged, this._onIdsRangeChanged.bind(this));\n      this._timelineOverview.show(this.element, this.element.firstChild);\n      this._timelineOverview.start();\n\n      this._profileType.addEventListener(SamplingHeapProfileType.Events.StatsUpdate, this._onStatsUpdate, this);\n      this._profileType.once(ProfileEvents.ProfileComplete).then(() => {\n        this._profileType.removeEventListener(SamplingHeapProfileType.Events.StatsUpdate, this._onStatsUpdate, this);\n        this._timelineOverview.stop();\n        this._timelineOverview.updateGrid();\n      });\n    }\n  }\n\n  /**\n   * @override\n   * @return {!Promise<!Array<!UI.Toolbar.ToolbarItem>>}\n   */\n  async toolbarItems() {\n    return [...await super.toolbarItems(), this._selectedSizeText];\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onIdsRangeChanged(event) {\n    const minId = /** @type {number} */ (event.data.minId);\n    const maxId = /** @type {number} */ (event.data.maxId);\n    this._selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: Platform.NumberUtilities.bytesToString(event.data.size)}));\n    this._setSelectionRange(minId, maxId);\n  }\n\n  /**\n   * @param {number} minId\n   * @param {number} maxId\n   */\n  _setSelectionRange(minId, maxId) {\n    const profileData = convertToSamplingHeapProfile(/** @type {!SamplingHeapProfileHeader} */ (this.profileHeader));\n    const profile = new SamplingHeapProfileModel(profileData, minId, maxId);\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onStatsUpdate(event) {\n    const profile = event.data;\n\n    if (!this._totalTime) {\n      this._timestamps = [];\n      this._sizes = [];\n      this._max = [];\n      this._ordinals = [];\n      this._totalTime = 30000;\n      this._lastOrdinal = 0;\n    }\n\n    this._sizes.fill(0);\n    this._sizes.push(0);\n    this._timestamps.push(Date.now());\n    this._ordinals.push(this._lastOrdinal + 1);\n    for (const sample of profile.samples) {\n      this._lastOrdinal = Math.max(this._lastOrdinal, sample.ordinal);\n      const bucket = Platform.ArrayUtilities.upperBound(\n                         this._ordinals, sample.ordinal, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n          1;\n      this._sizes[bucket] += sample.size;\n    }\n    this._max.push(this._sizes[this._sizes.length - 1]);\n\n    const lastTimestamp = this._timestamps[this._timestamps.length - 1];\n    if (lastTimestamp - this._timestamps[0] > this._totalTime) {\n      this._totalTime *= 2;\n    }\n\n    const samples = /** @type {!Samples} */ ({\n      sizes: this._sizes,\n      max: this._max,\n      ids: this._ordinals,\n      timestamps: this._timestamps,\n      totalTime: this._totalTime,\n    });\n\n    this._timelineOverview.setSamples(samples);\n  }\n\n  /**\n   * @override\n   * @param {string} columnId\n   * @return {!Platform.UIString.LocalizedString}\n   */\n  columnHeader(columnId) {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfSizeBytes);\n      case 'total':\n        return i18nString(UIStrings.totalSizeBytes);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  /**\n   * @override\n   * @return {!ProfileFlameChartDataProvider}\n   */\n  createFlameChartDataProvider() {\n    return new HeapFlameChartDataProvider(\n        /** @type {!SamplingHeapProfileModel} */ (this.profile()), this.profileHeader.heapProfilerModel());\n  }\n\n}\n\nexport class SamplingHeapProfileTypeBase extends ProfileType {\n  /**\n   * @param {string} typeId\n   * @param {string} description\n   */\n  constructor(typeId, description) {\n    super(typeId, description);\n    this._recording = false;\n  }\n\n  /**\n   * @override\n   * @return {?SamplingHeapProfileHeader}\n   */\n  profileBeingRecorded() {\n    return /** @type {?SamplingHeapProfileHeader} */ (super.profileBeingRecorded());\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  typeName() {\n    return 'Heap';\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  fileExtension() {\n    return '.heapprofile';\n  }\n\n  /**\n   * @override\n   */\n  get buttonTooltip() {\n    return this._recording ? i18nString(UIStrings.stopHeapProfiling) : i18nString(UIStrings.startHeapProfiling);\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  buttonClicked() {\n    if (this._recording) {\n      this._stopRecordingProfile();\n    } else {\n      this._startRecordingProfile();\n    }\n    return this._recording;\n  }\n\n  _startRecordingProfile() {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (this.profileBeingRecorded() || !heapProfilerModel) {\n      return;\n    }\n    const profileHeader = new SamplingHeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profileHeader);\n    this.addProfile(profileHeader);\n    profileHeader.updateStatus(i18nString(UIStrings.recording));\n\n    const icon = UI.Icon.Icon.create('smallicon-warning');\n    UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.heapProfilerIsRecording));\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', icon);\n\n    this._recording = true;\n    this._startSampling();\n  }\n\n  async _stopRecordingProfile() {\n    this._recording = false;\n    const recordedProfile = this.profileBeingRecorded();\n    if (!recordedProfile || !recordedProfile.heapProfilerModel()) {\n      return;\n    }\n\n    recordedProfile.updateStatus(i18nString(UIStrings.stopping));\n    const profile = await this._stopSampling();\n    if (recordedProfile) {\n      console.assert(profile !== undefined);\n      recordedProfile.setProtocolProfile(/** @type {?} */ (profile));\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', null);\n    this.dispatchEventToListeners(ProfileEvents.ProfileComplete, recordedProfile);\n  }\n\n  /**\n   * @override\n   * @param {string} title\n   * @return {!ProfileHeader}\n   */\n  createProfileLoadedFromFile(title) {\n    return new SamplingHeapProfileHeader(null, this, title);\n  }\n\n  /**\n   * @override\n   */\n  profileBeingRecordedRemoved() {\n    this._stopRecordingProfile();\n  }\n\n  _startSampling() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @return {!Promise<!Protocol.HeapProfiler.SamplingHeapProfile>}\n   */\n  _stopSampling() {\n    throw 'Not implemented';\n  }\n}\n\n/** @type {!SamplingHeapProfileType} */\nlet samplingHeapProfileTypeInstance;\n\nexport class SamplingHeapProfileType extends SamplingHeapProfileTypeBase {\n  constructor() {\n    super(SamplingHeapProfileType.TypeId, i18nString(UIStrings.allocationSampling));\n    if (!samplingHeapProfileTypeInstance) {\n      samplingHeapProfileTypeInstance = this;\n    }\n\n    /** @type {number} */\n    this._updateTimer = 0;\n    this._updateIntervalMs = 200;\n  }\n\n  static get instance() {\n    return samplingHeapProfileTypeInstance;\n  }\n\n  /**\n   * @override\n   */\n  get treeItemTitle() {\n    return i18nString(UIStrings.samplingProfiles);\n  }\n\n  /**\n   * @override\n   */\n  get description() {\n    return i18nString(UIStrings.recordMemoryAllocationsUsing);\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  hasTemporaryView() {\n    return Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline');\n  }\n\n  /**\n   * @override\n   */\n  _startSampling() {\n    const heapProfilerModel = this._obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    heapProfilerModel.startSampling();\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this._updateTimer = window.setTimeout(() => {\n        this._updateStats();\n      }, this._updateIntervalMs);\n    }\n  }\n\n  /**\n   * @return {?SDK.HeapProfilerModel.HeapProfilerModel}\n   */\n  _obtainRecordingProfile() {\n    const recordingProfile = this.profileBeingRecorded();\n    if (recordingProfile) {\n      const heapProfilerModel = recordingProfile.heapProfilerModel();\n      return heapProfilerModel;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   * @return {!Promise<!Protocol.HeapProfiler.SamplingHeapProfile>}\n   */\n  async _stopSampling() {\n    window.clearTimeout(this._updateTimer);\n    this._updateTimer = 0;\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.RecordingStopped);\n    const heapProfilerModel = this._obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      throw new Error('No heap profiler model');\n    }\n\n    const samplingProfile = await heapProfilerModel.stopSampling();\n    if (!samplingProfile) {\n      throw new Error('No sampling profile found');\n    }\n    return samplingProfile;\n  }\n\n  async _updateStats() {\n    const heapProfilerModel = this._obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    const profile = await heapProfilerModel.getSamplingProfile();\n    if (!this._updateTimer) {\n      return;\n    }\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.StatsUpdate, profile);\n    this._updateTimer = window.setTimeout(() => {\n      this._updateStats();\n    }, this._updateIntervalMs);\n  }\n}\n\nSamplingHeapProfileType.TypeId = 'SamplingHeap';\n\n/** @override @enum {symbol} */\nSamplingHeapProfileType.Events = {\n  RecordingStopped: Symbol('RecordingStopped'),\n  StatsUpdate: Symbol('StatsUpdate')\n};\n\nexport class SamplingHeapProfileHeader extends WritableProfileHeader {\n  /**\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   * @param {!SamplingHeapProfileTypeBase} type\n   * @param {string=} title\n   */\n  constructor(heapProfilerModel, type, title) {\n    super(\n        heapProfilerModel && heapProfilerModel.debuggerModel(), type,\n        title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this._heapProfilerModel = heapProfilerModel;\n    this._protocolProfile = {\n      head: {\n        callFrame: {\n          functionName: '',\n          scriptId: '',\n          url: '',\n          lineNumber: 0,\n          columnNumber: 0,\n        },\n        children: [],\n        selfSize: 0,\n        id: 0,\n      },\n      samples: [],\n      startTime: 0,\n      endTime: 0,\n      nodes: [],\n    };\n  }\n\n  /**\n   * @override\n   * @return {!HeapProfileView}\n   */\n  createView() {\n    return new HeapProfileView(this);\n  }\n\n  /**\n   * @return {!Protocol.HeapProfiler.SamplingHeapProfile}\n   */\n  protocolProfile() {\n    return this._protocolProfile;\n  }\n\n  /**\n   * @return {?SDK.HeapProfilerModel.HeapProfilerModel}\n   */\n  heapProfilerModel() {\n    return this._heapProfilerModel;\n  }\n}\n\nexport class SamplingHeapProfileNode extends SDK.ProfileTreeModel.ProfileNode {\n  /**\n   * @param {!Protocol.HeapProfiler.SamplingHeapProfileNode} node\n   */\n  constructor(node) {\n    const callFrame = node.callFrame || /** @type {!Protocol.Runtime.CallFrame} */ ({\n                        // Backward compatibility for old CpuProfileNode format.\n                        // @ts-ignore https://crbug.com/1150777\n                        functionName: node['functionName'],\n                        // @ts-ignore https://crbug.com/1150777\n                        scriptId: node['scriptId'],\n                        // @ts-ignore https://crbug.com/1150777\n                        url: node['url'],\n                        // @ts-ignore https://crbug.com/1150777\n                        lineNumber: node['lineNumber'] - 1,\n                        // @ts-ignore https://crbug.com/1150777\n                        columnNumber: node['columnNumber'] - 1,\n                      });\n    super(callFrame);\n    this.self = node.selfSize;\n  }\n}\n\nexport class SamplingHeapProfileModel extends SDK.ProfileTreeModel.ProfileTreeModel {\n  /**\n   * @param {!Protocol.HeapProfiler.SamplingHeapProfile} profile\n   * @param {number=} minOrdinal\n   * @param {number=} maxOrdinal\n   */\n  constructor(profile, minOrdinal, maxOrdinal) {\n    super();\n    this.modules = /** @type {?} */ (profile).modules || [];\n\n    /** @type {?Map<number, number>} */\n    let nodeIdToSizeMap = null;\n    if (minOrdinal || maxOrdinal) {\n      nodeIdToSizeMap = new Map();\n      minOrdinal = minOrdinal || 0;\n      maxOrdinal = maxOrdinal || Infinity;\n      for (const sample of profile.samples) {\n        if (sample.ordinal < minOrdinal || sample.ordinal > maxOrdinal) {\n          continue;\n        }\n        const size = nodeIdToSizeMap.get(sample.nodeId) || 0;\n        nodeIdToSizeMap.set(sample.nodeId, size + sample.size);\n      }\n    }\n\n    this.initialize(translateProfileTree(profile.head));\n\n    /**\n     * @param {!Protocol.HeapProfiler.SamplingHeapProfileNode} root\n     * @return {!SamplingHeapProfileNode}\n     */\n    function translateProfileTree(root) {\n      const resultRoot = new SamplingHeapProfileNode(root);\n      const sourceNodeStack = [root];\n      const targetNodeStack = [resultRoot];\n      while (sourceNodeStack.length) {\n        const sourceNode = /** @type {!Protocol.HeapProfiler.SamplingHeapProfileNode} */ (sourceNodeStack.pop());\n        const targetNode = /** @type {!SamplingHeapProfileNode} */ (targetNodeStack.pop());\n        targetNode.children = sourceNode.children.map(child => {\n          const targetChild = new SamplingHeapProfileNode(child);\n          if (nodeIdToSizeMap) {\n            targetChild.self = nodeIdToSizeMap.get(child.id) || 0;\n          }\n          return targetChild;\n        });\n        sourceNodeStack.push(...sourceNode.children);\n        targetNodeStack.push(...targetNode.children);\n      }\n      pruneEmptyBranches(resultRoot);\n      return resultRoot;\n    }\n\n    /**\n     * @param {!SDK.ProfileTreeModel.ProfileNode} node\n     * @return {boolean}\n     */\n    function pruneEmptyBranches(node) {\n      node.children = node.children.filter(pruneEmptyBranches);\n      return Boolean(node.children.length || node.self);\n    }\n  }\n}\n\n/**\n * @implements {Formatter}\n */\nexport class NodeFormatter {\n  /**\n   * @param {!HeapProfileView} profileView\n   */\n  constructor(profileView) {\n    this._profileView = profileView;\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @return {string}\n   */\n  formatValue(value) {\n    return Number.withThousandsSeparator(value);\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @return {string}\n   */\n  formatValueAccessibleText(value) {\n    return i18nString(UIStrings.sBytes, {PH1: value});\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @param {!ProfileDataGridNode} node\n   * @return {string}\n   */\n  formatPercent(value, node) {\n    return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n  }\n\n  /**\n   * @override\n   * @param  {!ProfileDataGridNode} node\n   * @return {?Element}\n   */\n  linkifyNode(node) {\n    const heapProfilerModel = this._profileView.profileHeader.heapProfilerModel();\n    const target = heapProfilerModel ? heapProfilerModel.target() : null;\n    const options = {\n      className: 'profile-node-file',\n      columnNumber: undefined,\n      tabStop: undefined,\n    };\n    return this._profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class HeapFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  /**\n   * @param {!SDK.ProfileTreeModel.ProfileTreeModel} profile\n   * @param {?SDK.HeapProfilerModel.HeapProfilerModel} heapProfilerModel\n   */\n  constructor(profile, heapProfilerModel) {\n    super();\n    this._profile = profile;\n    this._heapProfilerModel = heapProfilerModel;\n    /** @type {!Array<!SDK.ProfileTreeModel.ProfileNode>} */\n    this._entryNodes = [];\n  }\n\n  /**\n   * @override\n   * @return {number}\n   */\n  minimumBoundary() {\n    return 0;\n  }\n\n  /**\n   * @override\n   * @return {number}\n   */\n  totalTime() {\n    return this._profile.root.total;\n  }\n\n  /**\n   * @override\n   * @param {number} entryIndex\n   * @return {boolean}\n   */\n  entryHasDeoptReason(entryIndex) {\n    return false;\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @param {number=} precision\n   * @return {string}\n   */\n  formatValue(value, precision) {\n    return i18nString(UIStrings.skb, {PH1: Number.withThousandsSeparator(value / 1e3)});\n  }\n\n  /**\n   * @override\n   * @return {!PerfUI.FlameChart.TimelineData}\n   */\n  _calculateTimelineData() {\n    /**\n     * @param  {!SDK.ProfileTreeModel.ProfileNode} node\n     * @return {number}\n     */\n    function nodesCount(node) {\n      return node.children.reduce((count, node) => count + nodesCount(node), 1);\n    }\n    const count = nodesCount(this._profile.root);\n    /** @type {!Array<!SDK.ProfileTreeModel.ProfileNode>} */\n    const entryNodes = new Array(count);\n    const entryLevels = new Uint16Array(count);\n    const entryTotalTimes = new Float32Array(count);\n    const entryStartTimes = new Float64Array(count);\n    let depth = 0;\n    let maxDepth = 0;\n    let position = 0;\n    let index = 0;\n\n    /**\n     * @param {!SDK.ProfileTreeModel.ProfileNode} node\n     */\n    function addNode(node) {\n      const start = position;\n      entryNodes[index] = node;\n      entryLevels[index] = depth;\n      entryTotalTimes[index] = node.total;\n      entryStartTimes[index] = position;\n      ++index;\n      ++depth;\n      node.children.forEach(addNode);\n      --depth;\n      maxDepth = Math.max(maxDepth, depth);\n      position = start + node.total;\n    }\n    addNode(this._profile.root);\n\n    this._maxStackDepth = maxDepth + 1;\n    this._entryNodes = entryNodes;\n    this._timelineData = new PerfUI.FlameChart.TimelineData(entryLevels, entryTotalTimes, entryStartTimes, null);\n\n    return this._timelineData;\n  }\n\n  /**\n   * @override\n   * @param {number} entryIndex\n   * @return {?Element}\n   */\n  prepareHighlightedEntryInfo(entryIndex) {\n    const node = this._entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n    /** @type {!Array<{ title: string, value: string }>} */\n    const entryInfo = [];\n    /**\n     * @param {string} title\n     * @param {string} value\n     */\n    function pushEntryInfoRow(title, value) {\n      entryInfo.push({title: title, value: value});\n    }\n    pushEntryInfoRow(i18nString(UIStrings.name), UI.UIUtils.beautifyFunctionName(node.functionName));\n    pushEntryInfoRow(i18nString(UIStrings.selfSize), Platform.NumberUtilities.bytesToString(node.self));\n    pushEntryInfoRow(i18nString(UIStrings.totalSize), Platform.NumberUtilities.bytesToString(node.total));\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link = linkifier.maybeLinkifyConsoleCallFrame(\n        this._heapProfilerModel ? this._heapProfilerModel.target() : null, node.callFrame);\n    if (link) {\n      pushEntryInfoRow(i18nString(UIStrings.url), /** @type {string} */ (link.textContent));\n    }\n    linkifier.dispose();\n    return ProfileView.buildPopoverTable(entryInfo);\n  }\n}\n"]}