{"version":3,"file":"CPUProfileView.js","sourceRoot":"","sources":["../../../../../front_end/profiler/CPUProfileView.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as Components from '../components/components.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as PerfUI from '../perf_ui/perf_ui.js';\nimport * as Platform from '../platform/platform.js';  // eslint-disable-line no-unused-vars\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\nimport {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';           // eslint-disable-line no-unused-vars\nimport {ProfileEvents, ProfileHeader, ProfileType} from './ProfileHeader.js';  // eslint-disable-line no-unused-vars\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nexport const UIStrings = {\n  /**\n  *@description Time of a single activity, as opposed to the total time\n  */\n  selfTime: 'Self Time',\n  /**\n  *@description Text for the total time of something\n  */\n  totalTime: 'Total Time',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recordJavascriptCpuProfile: 'Record JavaScript CPU Profile',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  stopCpuProfiling: 'Stop CPU profiling',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  startCpuProfiling: 'Start CPU profiling',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  cpuProfiles: 'CPU PROFILES',\n  /**\n  *@description Text in CPUProfile View of a profiler tool, that show how much time a script spend executing a function.\n  */\n  cpuProfilesShow: 'CPU profiles show where the execution time is spent in your page\\'s JavaScript functions.',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  recording: 'Recording…',\n  /**\n  *@description Time in miliseconds\n  *@example {30.1} PH1\n  */\n  fms: '{PH1} ms',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  *@example {21.33} PH1\n  */\n  formatPercent: '{PH1} %',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  aggregatedSelfTime: 'Aggregated self time',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  */\n  aggregatedTotalTime: 'Aggregated total time',\n  /**\n  *@description Text that indicates something is not optimized\n  */\n  notOptimized: 'Not optimized',\n};\nconst str_ = i18n.i18n.registerUIStrings('profiler/CPUProfileView.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n/**\n * @implements {UI.SearchableView.Searchable}\n */\nexport class CPUProfileView extends ProfileView {\n  /**\n   * @param {!CPUProfileHeader} profileHeader\n   */\n  constructor(profileHeader) {\n    super();\n    this.profileHeader = profileHeader;\n    this.initialize(new NodeFormatter(this));\n    const profile = profileHeader.profileModel();\n    this.adjustedTotal = profile.profileHead.total;\n    this.adjustedTotal -= profile.idleNode ? profile.idleNode.total : 0;\n    this.setProfile(profile);\n  }\n\n  /**\n   * @override\n   */\n  wasShown() {\n    super.wasShown();\n    PerfUI.LineLevelProfile.Performance.instance().reset();\n    PerfUI.LineLevelProfile.Performance.instance().appendCPUProfile(this.profileHeader.profileModel());\n  }\n\n  /**\n   * @override\n   * @param {string} columnId\n   * @return {!Platform.UIString.LocalizedString}\n   */\n  columnHeader(columnId) {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfTime);\n      case 'total':\n        return i18nString(UIStrings.totalTime);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  /**\n   * @override\n   * @return {!ProfileFlameChartDataProvider}\n   */\n  createFlameChartDataProvider() {\n    return new CPUFlameChartDataProvider(this.profileHeader.profileModel(), this.profileHeader._cpuProfilerModel);\n  }\n}\n\nexport class CPUProfileType extends ProfileType {\n  constructor() {\n    super(CPUProfileType.TypeId, i18nString(UIStrings.recordJavascriptCpuProfile));\n    this._recording = false;\n\n    SDK.SDKModel.TargetManager.instance().addModelListener(\n        SDK.CPUProfilerModel.CPUProfilerModel, SDK.CPUProfilerModel.Events.ConsoleProfileFinished,\n        this._consoleProfileFinished, this);\n  }\n\n  /**\n   * @override\n   * @return {?CPUProfileHeader}\n   */\n  profileBeingRecorded() {\n    return /** @type {?CPUProfileHeader} */ (super.profileBeingRecorded());\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  typeName() {\n    return 'CPU';\n  }\n\n  /**\n   * @override\n   * @return {string}\n   */\n  fileExtension() {\n    return '.cpuprofile';\n  }\n\n  /**\n   * @override\n   */\n  get buttonTooltip() {\n    return this._recording ? i18nString(UIStrings.stopCpuProfiling) : i18nString(UIStrings.startCpuProfiling);\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  buttonClicked() {\n    if (this._recording) {\n      this._stopRecordingProfile();\n      return false;\n    }\n    this._startRecordingProfile();\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  get treeItemTitle() {\n    return i18nString(UIStrings.cpuProfiles);\n  }\n\n  /**\n   * @override\n   */\n  get description() {\n    return i18nString(UIStrings.cpuProfilesShow);\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _consoleProfileFinished(event) {\n    const data = /** @type {!SDK.CPUProfilerModel.EventData} */ (event.data);\n    const cpuProfile = /** @type {!Protocol.Profiler.Profile} */ (data.cpuProfile);\n    const profile = new CPUProfileHeader(data.cpuProfilerModel, this, data.title);\n    profile.setProtocolProfile(cpuProfile);\n    this.addProfile(profile);\n  }\n\n  _startRecordingProfile() {\n    const cpuProfilerModel = UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel);\n    if (this.profileBeingRecorded() || !cpuProfilerModel) {\n      return;\n    }\n    const profile = new CPUProfileHeader(cpuProfilerModel, this);\n    this.setProfileBeingRecorded(profile);\n    SDK.SDKModel.TargetManager.instance().suspendAllTargets();\n    this.addProfile(profile);\n    profile.updateStatus(i18nString(UIStrings.recording));\n    this._recording = true;\n    cpuProfilerModel.startRecording();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesCPUProfileTaken);\n  }\n\n  async _stopRecordingProfile() {\n    this._recording = false;\n    const profileBeingRecorded = this.profileBeingRecorded();\n    if (!profileBeingRecorded || !profileBeingRecorded._cpuProfilerModel) {\n      return;\n    }\n\n    const profile = await profileBeingRecorded._cpuProfilerModel.stopRecording();\n    const recordedProfile = this.profileBeingRecorded();\n    if (recordedProfile) {\n      if (!profile) {\n        throw new Error('Expected profile to be non-null');\n      }\n      recordedProfile.setProtocolProfile(profile);\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n\n    await SDK.SDKModel.TargetManager.instance().resumeAllTargets();\n    this.dispatchEventToListeners(ProfileEvents.ProfileComplete, recordedProfile);\n  }\n\n  /**\n   * @override\n   * @param {string} title\n   * @return {!ProfileHeader}\n   */\n  createProfileLoadedFromFile(title) {\n    return new CPUProfileHeader(null, this, title);\n  }\n\n  /**\n   * @override\n   */\n  profileBeingRecordedRemoved() {\n    this._stopRecordingProfile();\n  }\n}\n\nCPUProfileType.TypeId = 'CPU';\n\nexport class CPUProfileHeader extends WritableProfileHeader {\n  /**\n   * @param {?SDK.CPUProfilerModel.CPUProfilerModel} cpuProfilerModel\n   * @param {!CPUProfileType} type\n   * @param {string=} title\n   */\n  constructor(cpuProfilerModel, type, title) {\n    super(cpuProfilerModel && cpuProfilerModel.debuggerModel(), type, title);\n    this._cpuProfilerModel = cpuProfilerModel;\n  }\n\n  /**\n   * @override\n   * @return {!ProfileView}\n   */\n  createView() {\n    return new CPUProfileView(this);\n  }\n\n  /**\n   * @return {!Protocol.Profiler.Profile}\n   */\n  protocolProfile() {\n    if (!this._protocolProfile) {\n      throw new Error('Expected _protocolProfile to be available');\n    }\n    return this._protocolProfile;\n  }\n\n  /**\n   * @return {!SDK.CPUProfileDataModel.CPUProfileDataModel}\n   */\n  profileModel() {\n    if (!this._profileModel) {\n      throw new Error('Expected _profileModel to be available');\n    }\n    return this._profileModel;\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Profiler.Profile} profile\n   */\n  setProfile(profile) {\n    const target = this._cpuProfilerModel && this._cpuProfilerModel.target() || null;\n    this._profileModel = new SDK.CPUProfileDataModel.CPUProfileDataModel(profile, target);\n  }\n}\n\n/**\n * @implements {Formatter}\n */\nexport class NodeFormatter {\n  /**\n   * @param {!CPUProfileView} profileView\n   */\n  constructor(profileView) {\n    this._profileView = profileView;\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @return {string}\n   */\n  formatValue(value) {\n    return i18nString(UIStrings.fms, {PH1: value.toFixed(1)});\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @return {string}\n   */\n  formatValueAccessibleText(value) {\n    return this.formatValue(value);\n  }\n\n  /**\n   * @override\n   * @param {number} value\n   * @param {!ProfileDataGridNode} node\n   * @return {string}\n   */\n  formatPercent(value, node) {\n    if (this._profileView) {\n      const profile = this._profileView.profile();\n      if (profile &&\n          node.profileNode !== /** @type {!SDK.CPUProfileDataModel.CPUProfileDataModel} */ (profile).idleNode) {\n        return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n      }\n    }\n    return '';\n  }\n\n  /**\n   * @override\n   * @param  {!ProfileDataGridNode} node\n   * @return {?Element}\n   */\n  linkifyNode(node) {\n    const cpuProfilerModel = this._profileView.profileHeader._cpuProfilerModel;\n    const target = cpuProfilerModel ? cpuProfilerModel.target() : null;\n    const options = {className: 'profile-node-file', columnNumber: undefined, tabStop: undefined};\n    return this._profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class CPUFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  /**\n   * @param {!SDK.CPUProfileDataModel.CPUProfileDataModel} cpuProfile\n   * @param {?SDK.CPUProfilerModel.CPUProfilerModel} cpuProfilerModel\n   */\n  constructor(cpuProfile, cpuProfilerModel) {\n    super();\n    this._cpuProfile = cpuProfile;\n    this._cpuProfilerModel = cpuProfilerModel;\n  }\n\n  /**\n   * @override\n   * @return {number}\n   */\n  minimumBoundary() {\n    return this._cpuProfile.profileStartTime;\n  }\n\n  /**\n   * @override\n   * @return {number}\n   */\n  totalTime() {\n    return this._cpuProfile.profileHead.total;\n  }\n\n  /**\n   * @override\n   * @param {number} entryIndex\n   * @return {boolean}\n   */\n  entryHasDeoptReason(entryIndex) {\n    const node = /** @type {!SDK.CPUProfileDataModel.CPUProfileNode} */ (this.entryNodes[entryIndex]);\n    return Boolean(node.deoptReason);\n  }\n\n  /**\n   * @override\n   * @return {!PerfUI.FlameChart.TimelineData}\n   */\n  _calculateTimelineData() {\n    /** @type {!Array.<?CPUFlameChartDataProvider.ChartEntry>} */\n    const entries = [];\n    /** @type {!Array.<number>} */\n    const stack = [];\n    let maxDepth = 5;\n\n    function onOpenFrame() {\n      stack.push(entries.length);\n      // Reserve space for the entry, as they have to be ordered by startTime.\n      // The entry itself will be put there in onCloseFrame.\n      entries.push(null);\n    }\n    /**\n     * @param {number} depth\n     * @param {!SDK.CPUProfileDataModel.CPUProfileNode} node\n     * @param {number} startTime\n     * @param {number} totalTime\n     * @param {number} selfTime\n     */\n    function onCloseFrame(depth, node, startTime, totalTime, selfTime) {\n      const index = /** @type {number} */ (stack.pop());\n      entries[index] = new CPUFlameChartDataProvider.ChartEntry(depth, totalTime, startTime, selfTime, node);\n      maxDepth = Math.max(maxDepth, depth);\n    }\n    this._cpuProfile.forEachFrame(onOpenFrame, onCloseFrame);\n\n    /** @type {!Array<!SDK.CPUProfileDataModel.CPUProfileNode>} */\n    const entryNodes = new Array(entries.length);\n    const entryLevels = new Uint16Array(entries.length);\n    const entryTotalTimes = new Float32Array(entries.length);\n    const entrySelfTimes = new Float32Array(entries.length);\n    const entryStartTimes = new Float64Array(entries.length);\n\n    for (let i = 0; i < entries.length; ++i) {\n      const entry = entries[i];\n      if (!entry) {\n        continue;\n      }\n      entryNodes[i] = entry.node;\n      entryLevels[i] = entry.depth;\n      entryTotalTimes[i] = entry.duration;\n      entryStartTimes[i] = entry.startTime;\n      entrySelfTimes[i] = entry.selfTime;\n    }\n\n    this._maxStackDepth = maxDepth + 1;\n    this.entryNodes = entryNodes;\n    this.timelineData_ = new PerfUI.FlameChart.TimelineData(entryLevels, entryTotalTimes, entryStartTimes, null);\n\n    this._entrySelfTimes = entrySelfTimes;\n\n    return this.timelineData_;\n  }\n\n  /**\n   * @override\n   * @param {number} entryIndex\n   * @return {?Element}\n   */\n  prepareHighlightedEntryInfo(entryIndex) {\n    const timelineData = this.timelineData_;\n    const node = this.entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n\n    /** @type {!Array<!{title: string, value: string}>} */\n    const entryInfo = [];\n    /**\n     * @param {string} title\n     * @param {string} value\n     */\n    function pushEntryInfoRow(title, value) {\n      entryInfo.push({title: title, value: value});\n    }\n    /**\n     * @param {number} ms\n     * @return {string}\n     */\n    function millisecondsToString(ms) {\n      if (ms === 0) {\n        return '0';\n      }\n      if (ms < 1000) {\n        return i18nString(UIStrings.fms, {PH1: ms.toFixed(1)});\n      }\n      return Number.secondsToString(ms / 1000, true);\n    }\n    const name = UI.UIUtils.beautifyFunctionName(node.functionName);\n    pushEntryInfoRow(i18nString(UIStrings.name), name);\n    const selfTime = millisecondsToString(/** @type {!Float32Array} */ (this._entrySelfTimes)[entryIndex]);\n    const totalTime =\n        millisecondsToString(/** @type {!PerfUI.FlameChart.TimelineData} */ (timelineData).entryTotalTimes[entryIndex]);\n    pushEntryInfoRow(i18nString(UIStrings.selfTime), selfTime);\n    pushEntryInfoRow(i18nString(UIStrings.totalTime), totalTime);\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link = linkifier.maybeLinkifyConsoleCallFrame(\n        this._cpuProfilerModel && this._cpuProfilerModel.target(), node.callFrame);\n    if (link) {\n      pushEntryInfoRow(i18nString(UIStrings.url), link.textContent || '');\n    }\n    linkifier.dispose();\n    pushEntryInfoRow(i18nString(UIStrings.aggregatedSelfTime), Number.secondsToString(node.self / 1000, true));\n    pushEntryInfoRow(i18nString(UIStrings.aggregatedTotalTime), Number.secondsToString(node.total / 1000, true));\n    const deoptReason = /** @type {!SDK.CPUProfileDataModel.CPUProfileNode} */ (node).deoptReason;\n    if (deoptReason) {\n      pushEntryInfoRow(i18nString(UIStrings.notOptimized), deoptReason);\n    }\n\n    return ProfileView.buildPopoverTable(entryInfo);\n  }\n}\n\nCPUFlameChartDataProvider.ChartEntry = class {\n  /**\n   * @param {number} depth\n   * @param {number} duration\n   * @param {number} startTime\n   * @param {number} selfTime\n   * @param {!SDK.CPUProfileDataModel.CPUProfileNode} node\n   */\n  constructor(depth, duration, startTime, selfTime, node) {\n    this.depth = depth;\n    this.duration = duration;\n    this.startTime = startTime;\n    this.selfTime = selfTime;\n    this.node = node;\n  }\n};\n"]}