{"version":3,"file":"ProfileDataGrid.js","sourceRoot":"","sources":["../../../../../front_end/profiler/ProfileDataGrid.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as DataGrid from '../data_grid/data_grid.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as SDK from '../sdk/sdk.js';  // eslint-disable-line no-unused-vars\nimport * as UI from '../ui/ui.js';\n\nexport const UIStrings = {\n  /**\n  *@description Text to show something is not optimized\n  *@example {Optimized too many times} PH1\n  */\n  notOptimizedS: 'Not optimized: {PH1}',\n  /**\n  *@description Generic text with two placeholders separated by a comma\n  *@example {1 613 680} PH1\n  *@example {44 %} PH2\n  */\n  genericTextTwoPlaceholders: '{PH1}, {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('profiler/ProfileDataGrid.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n/**\n * @extends DataGrid.DataGrid.DataGridNode<*>\n */\nexport class ProfileDataGridNode extends DataGrid.DataGrid.DataGridNode {\n  /**\n   * @param {!SDK.ProfileTreeModel.ProfileNode} profileNode\n   * @param {!ProfileDataGridTree} owningTree\n   * @param {boolean} hasChildren\n   */\n  constructor(profileNode, owningTree, hasChildren) {\n    super(null, hasChildren);\n\n    this._searchMatchedSelfColumn = false;\n    this._searchMatchedTotalColumn = false;\n    this._searchMatchedFunctionColumn = false;\n\n    this.profileNode = profileNode;\n    this.tree = owningTree;\n    /** @type {!Map<string, !ProfileDataGridNode>} */\n    this.childrenByCallUID = new Map();\n    /** @type {*} */\n    this.lastComparator = null;\n\n    this.callUID = profileNode.callUID;\n    this.self = profileNode.self;\n    this.total = profileNode.total;\n    this.functionName = UI.UIUtils.beautifyFunctionName(profileNode.functionName);\n    this._deoptReason = profileNode.deoptReason || '';\n    this.url = profileNode.url;\n    /** @type {?Element} */\n    this.linkElement = null;\n\n    this._populated = false;\n  }\n\n  /**\n   * @param {!Array<!Array<*>>} gridNodeGroups\n   * @param {function(!T, !T):number} comparator\n   * @param {boolean} force\n   * @template T\n   */\n  static sort(gridNodeGroups, comparator, force) {\n    for (let gridNodeGroupIndex = 0; gridNodeGroupIndex < gridNodeGroups.length; ++gridNodeGroupIndex) {\n      const gridNodes = gridNodeGroups[gridNodeGroupIndex];\n      const count = gridNodes.length;\n\n      for (let index = 0; index < count; ++index) {\n        const gridNode = gridNodes[index];\n\n        // If the grid node is collapsed, then don't sort children (save operation for later).\n        // If the grid node has the same sorting as previously, then there is no point in sorting it again.\n        if (!force && (!gridNode.expanded || gridNode.lastComparator === comparator)) {\n          if (gridNode.children.length) {\n            gridNode.shouldRefreshChildren = true;\n          }\n          continue;\n        }\n\n        gridNode.lastComparator = comparator;\n\n        const children = gridNode.children;\n        const childCount = children.length;\n\n        if (childCount) {\n          children.sort(comparator);\n\n          for (let childIndex = 0; childIndex < childCount; ++childIndex) {\n            children[childIndex].recalculateSiblings(childIndex);\n          }\n\n          gridNodeGroups.push(/** @type {!Array<!ProfileDataGridNode>} */ (children));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {!ProfileDataGridNode|!ProfileDataGridTree} container\n   * @param {!ProfileDataGridNode} child\n   * @param {boolean} shouldAbsorb\n   */\n  static merge(container, child, shouldAbsorb) {\n    container.self += child.self;\n\n    if (!shouldAbsorb) {\n      container.total += child.total;\n    }\n\n    let children = container.children.slice();\n\n    container.removeChildren();\n\n    let count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      if (!shouldAbsorb || children[index] !== child) {\n        container.appendChild(/** @type {!ProfileDataGridNode} */ (children[index]));\n      }\n    }\n\n    children = child.children.slice();\n    count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      const orphanedChild = /** @type {!ProfileDataGridNode} */ (children[index]);\n      const existingChild = container.childrenByCallUID.get(orphanedChild.callUID);\n\n      if (existingChild) {\n        existingChild.merge(/** @type {!ProfileDataGridNode} */ (orphanedChild), false);\n      } else {\n        container.appendChild(orphanedChild);\n      }\n    }\n  }\n\n  /**\n   * @param {!ProfileDataGridNode|!ProfileDataGridTree} container\n   */\n  static populate(container) {\n    if (container._populated) {\n      return;\n    }\n    container._populated = true;\n\n    container.populateChildren();\n\n    const currentComparator = container.tree.lastComparator;\n\n    if (currentComparator) {\n      container.sort(currentComparator, true);\n    }\n  }\n\n  /**\n   * @override\n   * @param {string} columnId\n   * @return {!HTMLElement}\n   */\n  createCell(columnId) {\n    switch (columnId) {\n      case 'self': {\n        const cell = this._createValueCell(this.self, this.selfPercent, columnId);\n        cell.classList.toggle('highlight', this._searchMatchedSelfColumn);\n        return cell;\n      }\n\n      case 'total': {\n        const cell = this._createValueCell(this.total, this.totalPercent, columnId);\n        cell.classList.toggle('highlight', this._searchMatchedTotalColumn);\n        return cell;\n      }\n\n      case 'function': {\n        const cell = this.createTD(columnId);\n        cell.classList.toggle('highlight', this._searchMatchedFunctionColumn);\n        if (this._deoptReason) {\n          cell.classList.add('not-optimized');\n          const warningIcon = UI.Icon.Icon.create('smallicon-warning', 'profile-warn-marker');\n          UI.Tooltip.Tooltip.install(warningIcon, i18nString(UIStrings.notOptimizedS, {PH1: this._deoptReason}));\n          cell.appendChild(warningIcon);\n        }\n        UI.UIUtils.createTextChild(cell, this.functionName);\n        if (this.profileNode.scriptId === '0') {\n          return cell;\n        }\n        const urlElement = this.tree._formatter.linkifyNode(this);\n        if (!urlElement) {\n          return cell;\n        }\n        /** @type {!HTMLElement} */ (urlElement).style.maxWidth = '75%';\n        cell.appendChild(urlElement);\n        this.linkElement = urlElement;\n        return cell;\n      }\n    }\n    return super.createCell(columnId);\n  }\n\n  /**\n   * @param {number} value\n   * @param {number} percent\n   * @param {string} columnId\n   * @return {!HTMLElement}\n   */\n  _createValueCell(value, percent, columnId) {\n    const cell = /** @type {!HTMLElement} */ (document.createElement('td'));\n    cell.classList.add('numeric-column');\n    const div = cell.createChild('div', 'profile-multiple-values');\n    const valueSpan = div.createChild('span');\n    const valueText = this.tree._formatter.formatValue(value, this);\n    valueSpan.textContent = valueText;\n    const percentSpan = div.createChild('span', 'percent-column');\n    const percentText = this.tree._formatter.formatPercent(percent, this);\n    percentSpan.textContent = percentText;\n    const valueAccessibleText = this.tree._formatter.formatValueAccessibleText(value, this);\n    this.setCellAccessibleName(\n        i18nString(UIStrings.genericTextTwoPlaceholders, {PH1: valueAccessibleText, PH2: percentText}), cell, columnId);\n    return cell;\n  }\n\n  /**\n   * @param {function(!ProfileDataGridNode, !ProfileDataGridNode): number} comparator\n   * @param {boolean} force\n   */\n  sort(comparator, force) {\n    const sortComparator =\n        /** @type {function(!DataGrid.DataGrid.DataGridNode<*>, !DataGrid.DataGrid.DataGridNode<*>): number} */ (\n            comparator);\n    return ProfileDataGridNode.sort([[this]], sortComparator, force);\n  }\n\n  /**\n   * @override\n   * @param {!DataGrid.DataGrid.DataGridNode<*>} child\n   * @param {number} index\n   */\n  insertChild(child, index) {\n    const profileDataGridNode = /** @type {!ProfileDataGridNode} */ (child);\n    super.insertChild(profileDataGridNode, index);\n\n    this.childrenByCallUID.set(profileDataGridNode.callUID, /** @type {!ProfileDataGridNode} */ (profileDataGridNode));\n  }\n\n  /**\n   * @override\n   * @param {!DataGrid.DataGrid.DataGridNode<*>} profileDataGridNode\n   */\n  removeChild(profileDataGridNode) {\n    super.removeChild(profileDataGridNode);\n\n    this.childrenByCallUID.delete((/** @type {!ProfileDataGridNode} */ (profileDataGridNode)).callUID);\n  }\n\n  /**\n   * @override\n   */\n  removeChildren() {\n    super.removeChildren();\n\n    this.childrenByCallUID.clear();\n  }\n\n  /**\n   * @param {!SDK.ProfileTreeModel.ProfileNode} node\n   * @return {?ProfileDataGridNode}\n   */\n  findChild(node) {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  get selfPercent() {\n    return this.self / this.tree.total * 100.0;\n  }\n\n  get totalPercent() {\n    return this.total / this.tree.total * 100.0;\n  }\n\n  /**\n   * @override\n   */\n  populate() {\n    ProfileDataGridNode.populate(this);\n  }\n\n  populateChildren() {\n    // Not implemented.\n  }\n\n  // When focusing and collapsing we modify lots of nodes in the tree.\n  // This allows us to restore them all to their original state when we revert.\n\n  save() {\n    if (this._savedChildren) {\n      return;\n    }\n\n    this._savedSelf = this.self;\n    this._savedTotal = this.total;\n\n    this._savedChildren = this.children.slice();\n  }\n\n  /**\n   * When focusing and collapsing we modify lots of nodes in the tree.\n   * This allows us to restore them all to their original state when we revert.\n   */\n  restore() {\n    if (!this._savedChildren) {\n      return;\n    }\n\n    if (this._savedSelf && this._savedTotal) {\n      this.self = this._savedSelf;\n      this.total = this._savedTotal;\n    }\n\n    this.removeChildren();\n\n    const children = this._savedChildren;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      /** @type {!ProfileDataGridNode} */ (children[index]).restore();\n      this.appendChild(children[index]);\n    }\n  }\n\n  /**\n   * @param {!ProfileDataGridNode} child\n   * @param {boolean} shouldAbsorb\n   */\n  merge(child, shouldAbsorb) {\n    ProfileDataGridNode.merge(this, child, shouldAbsorb);\n  }\n}\n\n\n/**\n * @implements {UI.SearchableView.Searchable}\n */\nexport class ProfileDataGridTree {\n  /**\n   * @param {!Formatter} formatter\n   * @param {!UI.SearchableView.SearchableView} searchableView\n   * @param {number} total\n   */\n  constructor(formatter, searchableView, total) {\n    this.tree = this;\n    this.self = 0;\n    /** @type {!Array.<!ProfileDataGridNode>} */\n    this.children = [];\n    this._formatter = formatter;\n    this._searchableView = searchableView;\n    this.total = total;\n\n    /** @type {?function(!ProfileDataGridNode, !ProfileDataGridNode): number} */\n    this.lastComparator = null;\n    this.childrenByCallUID = new Map();\n    this.deepSearch = true;\n    this._populated = false;\n\n    /** @type {!Array<{profileNode: !ProfileDataGridNode}>} */\n    this._searchResults;\n  }\n\n  /**\n   * @param {string} property\n   * @param {boolean} isAscending\n   * @return {function(!Object.<string, *>, !Object.<string, *>)}\n   */\n  static propertyComparator(property, isAscending) {\n    let comparator = ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property];\n\n    if (!comparator) {\n      if (isAscending) {\n        /**\n         * @param {!Object.<string, *>} lhs\n         * @param {!Object.<string, *>} rhs\n         */\n        comparator = function(lhs, rhs) {\n          if (lhs[property] < rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] > rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      } else {\n        /**\n         * @param {!Object.<string, *>} lhs\n         * @param {!Object.<string, *>} rhs\n         */\n        comparator = function(lhs, rhs) {\n          if (lhs[property] > rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] < rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      }\n\n      ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property] = comparator;\n    }\n\n    return /** @type {function(!Object.<string, *>, !Object.<string, *>):void} */ (comparator);\n  }\n\n  get expanded() {\n    return true;\n  }\n\n  /**\n   * @param {!ProfileDataGridNode} child\n   */\n  appendChild(child) {\n    this.insertChild(child, this.children.length);\n  }\n\n  /** @param {!ProfileDataGridNode} profileDataGridNode */\n  focus(profileDataGridNode) {\n  }\n\n  /** @param {!ProfileDataGridNode} profileDataGridNode */\n  exclude(profileDataGridNode) {\n  }\n\n  /**\n   * @param {!DataGrid.DataGrid.DataGridNode<*>} child\n   * @param {number} index\n   */\n  insertChild(child, index) {\n    const childToInsert = /** @type {!ProfileDataGridNode} */ (child);\n    this.children.splice(index, 0, childToInsert);\n    this.childrenByCallUID.set(childToInsert.callUID, child);\n  }\n\n  removeChildren() {\n    this.children = [];\n    this.childrenByCallUID.clear();\n  }\n\n  populateChildren() {\n    // Not implemented.\n  }\n\n  /**\n   * @param {!SDK.ProfileTreeModel.ProfileNode} node\n   * @return {?ProfileDataGridNode}\n   */\n  findChild(node) {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID);\n  }\n\n  /**\n   * @param {function(!T, !T):number} comparator\n   * @param {boolean} force\n   * @template T\n   */\n  sort(comparator, force) {\n    return ProfileDataGridNode.sort([[this]], comparator, force);\n  }\n\n  save() {\n    if (this._savedChildren) {\n      return;\n    }\n\n    this._savedTotal = this.total;\n    this._savedChildren = this.children.slice();\n  }\n\n  restore() {\n    if (!this._savedChildren) {\n      return;\n    }\n\n    this.children = this._savedChildren;\n    if (this._savedTotal) {\n      this.total = this._savedTotal;\n    }\n\n    const children = this.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      /** @type {!ProfileDataGridNode} */ (children[index]).restore();\n    }\n\n    this._savedChildren = null;\n  }\n\n  /**\n   * @param {!UI.SearchableView.SearchConfig} searchConfig\n   * @return {?function(!ProfileDataGridNode):boolean}\n   */\n  _matchFunction(searchConfig) {\n    const query = searchConfig.query.trim();\n    if (!query.length) {\n      return null;\n    }\n\n    const greaterThan = (query.startsWith('>'));\n    const lessThan = (query.startsWith('<'));\n    let equalTo = (query.startsWith('=') || ((greaterThan || lessThan) && query.indexOf('=') === 1));\n    const percentUnits = (query.endsWith('%'));\n    const millisecondsUnits = (query.length > 2 && query.endsWith('ms'));\n    const secondsUnits = (!millisecondsUnits && query.endsWith('s'));\n\n    let queryNumber = parseFloat(query);\n    if (greaterThan || lessThan || equalTo) {\n      if (equalTo && (greaterThan || lessThan)) {\n        queryNumber = parseFloat(query.substring(2));\n      } else {\n        queryNumber = parseFloat(query.substring(1));\n      }\n    }\n\n    const queryNumberMilliseconds = (secondsUnits ? (queryNumber * 1000) : queryNumber);\n\n    // Make equalTo implicitly true if it wasn't specified there is no other operator.\n    if (!isNaN(queryNumber) && !(greaterThan || lessThan)) {\n      equalTo = true;\n    }\n\n    const matcher = createPlainTextSearchRegex(query, 'i');\n\n    /**\n     * @param {!ProfileDataGridNode} profileDataGridNode\n     * @return {boolean}\n     */\n    function matchesQuery(profileDataGridNode) {\n      profileDataGridNode._searchMatchedSelfColumn = false;\n      profileDataGridNode._searchMatchedTotalColumn = false;\n      profileDataGridNode._searchMatchedFunctionColumn = false;\n\n      if (percentUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.selfPercent < queryNumber) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent < queryNumber) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.selfPercent > queryNumber) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent > queryNumber) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.selfPercent === queryNumber) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent === queryNumber) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        }\n      } else if (millisecondsUnits || secondsUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.self < queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total < queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.self > queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total > queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.self === queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total === queryNumberMilliseconds) {\n            profileDataGridNode._searchMatchedTotalColumn = true;\n          }\n        }\n      }\n\n      if (profileDataGridNode.functionName.match(matcher) ||\n          (profileDataGridNode.url && profileDataGridNode.url.match(matcher))) {\n        profileDataGridNode._searchMatchedFunctionColumn = true;\n      }\n\n      if (profileDataGridNode._searchMatchedSelfColumn || profileDataGridNode._searchMatchedTotalColumn ||\n          profileDataGridNode._searchMatchedFunctionColumn) {\n        profileDataGridNode.refresh();\n        return true;\n      }\n\n      return false;\n    }\n    return matchesQuery;\n  }\n\n  /**\n   * @override\n   * @param {!UI.SearchableView.SearchConfig} searchConfig\n   * @param {boolean} shouldJump\n   * @param {boolean=} jumpBackwards\n   */\n  performSearch(searchConfig, shouldJump, jumpBackwards) {\n    this.searchCanceled();\n    const matchesQuery = this._matchFunction(searchConfig);\n    if (!matchesQuery) {\n      return;\n    }\n\n    /** @type {!Array<{profileNode: !ProfileDataGridNode}>} */\n    this._searchResults = [];\n    const deepSearch = this.deepSearch;\n    /** @type {?DataGrid.DataGrid.DataGridNode<*>} */\n    let current;\n    for (current = this.children[0]; current; current = current.traverseNextNode(!deepSearch, null, !deepSearch)) {\n      const item = /** @type {?ProfileDataGridNode} */ (current);\n      if (!item) {\n        break;\n      }\n\n      if (matchesQuery(item)) {\n        this._searchResults.push({profileNode: item});\n      }\n    }\n    this._searchResultIndex = jumpBackwards ? 0 : this._searchResults.length - 1;\n    this._searchableView.updateSearchMatchesCount(this._searchResults.length);\n    this._searchableView.updateCurrentMatchIndex(this._searchResultIndex);\n  }\n\n  /**\n   * @override\n   */\n  searchCanceled() {\n    if (this._searchResults) {\n      for (let i = 0; i < this._searchResults.length; ++i) {\n        const profileNode = this._searchResults[i].profileNode;\n        profileNode._searchMatchedSelfColumn = false;\n        profileNode._searchMatchedTotalColumn = false;\n        profileNode._searchMatchedFunctionColumn = false;\n        profileNode.refresh();\n      }\n    }\n\n    this._searchResults = [];\n    this._searchResultIndex = -1;\n  }\n\n  /**\n   * @override\n   */\n  jumpToNextSearchResult() {\n    if (!this._searchResults || !this._searchResults.length) {\n      return;\n    }\n    this._searchResultIndex = (this._searchResultIndex + 1) % this._searchResults.length;\n    this._jumpToSearchResult(this._searchResultIndex);\n  }\n\n  /**\n   * @override\n   */\n  jumpToPreviousSearchResult() {\n    if (!this._searchResults || !this._searchResults.length) {\n      return;\n    }\n    this._searchResultIndex = (this._searchResultIndex - 1 + this._searchResults.length) % this._searchResults.length;\n    this._jumpToSearchResult(this._searchResultIndex);\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  supportsCaseSensitiveSearch() {\n    return true;\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  supportsRegexSearch() {\n    return false;\n  }\n\n  /**\n   * @param {number} index\n   */\n  _jumpToSearchResult(index) {\n    const searchResult = this._searchResults[index];\n    if (!searchResult) {\n      return;\n    }\n    const profileNode = searchResult.profileNode;\n    profileNode.revealAndSelect();\n    this._searchableView.updateCurrentMatchIndex(index);\n  }\n}\n\n/** @type {!Array.<!Object.<string, *>>} */\nProfileDataGridTree.propertyComparators = [{}, {}];\n\n\n/**\n * @interface\n */\nexport class Formatter {\n  /**\n   * @param {number} value\n   * @param {!ProfileDataGridNode} node\n   * @return {string}\n   */\n  formatValue(value, node) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {number} value\n   * @param {!ProfileDataGridNode} node\n   * @return {string}\n   */\n  formatValueAccessibleText(value, node) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param {number} value\n   * @param {!ProfileDataGridNode} node\n   * @return {string}\n   */\n  formatPercent(value, node) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @param  {!ProfileDataGridNode} node\n   * @return {?Element}\n   */\n  linkifyNode(node) {\n    throw new Error('Not implemented');\n  }\n}\n"]}