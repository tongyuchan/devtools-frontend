{"version":3,"file":"DatabaseTableView.js","sourceRoot":"","sources":["../../../../../front_end/resources/DatabaseTableView.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEH,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,QAAQ,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAC,EAAE,EAAC,MAAM,yBAAyB,CAAC;AAC3C,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAIlC,MAAM,OAAO,iBAAkB,SAAQ,EAAE,CAAC,IAAI,CAAC,UAAU;IACvD;;;OAGG;IACH,YAAY,QAAQ,EAAE,SAAS;QAC7B,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,mCAAmC;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAEpD,IAAI,CAAC,sBAAsB;YACvB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;QAE7F,IAAI,CAAC,aAAa,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,mBAAmB,CAAC,CAAC;QAC5G,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;QAC7G,IAAI,CAAC,oBAAoB,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5G,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CACtC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;QAEpF,8GAA8G;QAC9G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY;QAChB,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACzD,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,SAAS;QACxB,OAAO,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,CAAC,UAAU,CACpB,wBAAwB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EACtG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,WAAW,EAAE,MAAM;QAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAE9B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,CAAA,UAAU,CAAC,CAAC;QACtG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,YAAY,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAA,QAAQ,IAAI,CAAC,SAAS,oBAAoB,CAAC,CAAC;YACjG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,OAAO;SACR;QACD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAElC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC3C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACnF,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QACvD,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IAED,wBAAwB;QACtB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO;SACR;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;QACpC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,iBAAiB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;aACrC;SACF;QACD,MAAM,iBAAiB,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE;gBACzC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAC1B;SACF;QACD,IAAI,iBAAiB,KAAK,IAAI,CAAC,mBAAmB,EAAE;YAClD,OAAO;SACR;QACD,MAAM,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC;QACjE,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAC9C,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,iBAAiB,CAAC;IAC/C,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAE9B,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACtD,eAAe,CAAC,SAAS,GAAG,qBAAqB,CAAC;QAClD,eAAe,CAAC,WAAW,GAAG,EAAE,CAAA,0CAA0C,IAAI,CAAC,SAAS,UAAU,CAAC;QACnG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,KAAK;QACzB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as DataGrid from '../data_grid/data_grid.js';\nimport {ls} from '../platform/platform.js';\nimport * as UI from '../ui/ui.js';\n\nimport {Database, DatabaseModel, Events as DatabaseModelEvents} from './DatabaseModel.js';  // eslint-disable-line no-unused-vars\n\nexport class DatabaseTableView extends UI.View.SimpleView {\n  /**\n   * @param {!Database} database\n   * @param {string} tableName\n   */\n  constructor(database, tableName) {\n    super(Common.UIString.UIString('Database'));\n\n    this.database = database;\n    this.tableName = tableName;\n    this._lastVisibleColumns = '';\n    /** @type {!Map<string, string>} */\n    this._columnsMap = new Map();\n\n    this.element.classList.add('storage-view', 'table');\n\n    this._visibleColumnsSetting =\n        Common.Settings.Settings.instance().createSetting('databaseTableViewVisibleColumns', {});\n\n    this.refreshButton = new UI.Toolbar.ToolbarButton(Common.UIString.UIString('Refresh'), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this._refreshButtonClicked, this);\n    this._visibleColumnsInput = new UI.Toolbar.ToolbarInput(Common.UIString.UIString('Visible columns'), '', 1);\n    this._visibleColumnsInput.addEventListener(\n        UI.Toolbar.ToolbarInput.Event.TextChanged, this._onVisibleColumnsChanged, this);\n\n    /** @type {?DataGrid.SortableDataGrid.SortableDataGrid<!DataGrid.SortableDataGrid.SortableDataGridNode<*>>} */\n    this._dataGrid = null;\n  }\n\n  /**\n   * @override\n   */\n  wasShown() {\n    this.update();\n  }\n\n  /**\n   * @override\n   * @return {!Promise<!Array<!UI.Toolbar.ToolbarItem>>}\n   */\n  async toolbarItems() {\n    return [this.refreshButton, this._visibleColumnsInput];\n  }\n\n  /**\n   * @param {string} tableName\n   * @return {string}\n   */\n  _escapeTableName(tableName) {\n    return tableName.replace(/\\\"/g, '\"\"');\n  }\n\n  update() {\n    this.database.executeSql(\n        'SELECT rowid, * FROM \"' + this._escapeTableName(this.tableName) + '\"', this._queryFinished.bind(this),\n        this._queryError.bind(this));\n  }\n\n  /**\n   *\n   * @param {!Array<string>} columnNames\n   * @param {!Array<*>} values\n   */\n  _queryFinished(columnNames, values) {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    this._dataGrid = DataGrid.SortableDataGrid.SortableDataGrid.create(columnNames, values, ls`Database`);\n    this._visibleColumnsInput.setVisible(Boolean(this._dataGrid));\n    if (!this._dataGrid) {\n      this._emptyWidget = new UI.EmptyWidget.EmptyWidget(ls`The \"${this.tableName}\"\\ntable is empty.`);\n      this._emptyWidget.show(this.element);\n      return;\n    }\n    this._dataGrid.setStriped(true);\n    this._dataGrid.asWidget().show(this.element);\n    this._dataGrid.autoSizeColumns(5);\n\n    this._columnsMap.clear();\n    for (let i = 1; i < columnNames.length; ++i) {\n      this._columnsMap.set(columnNames[i], String(i));\n    }\n    this._lastVisibleColumns = '';\n    const visibleColumnsText = this._visibleColumnsSetting.get()[this.tableName] || '';\n    this._visibleColumnsInput.setValue(visibleColumnsText);\n    this._onVisibleColumnsChanged();\n  }\n\n  _onVisibleColumnsChanged() {\n    if (!this._dataGrid) {\n      return;\n    }\n    const text = this._visibleColumnsInput.value();\n    const parts = text.split(/[\\s,]+/);\n    const matches = new Set();\n    const columnsVisibility = new Set();\n    columnsVisibility.add('0');\n    for (const part of parts) {\n      const mappedColumn = this._columnsMap.get(part);\n      if (mappedColumn !== undefined) {\n        matches.add(part);\n        columnsVisibility.add(mappedColumn);\n      }\n    }\n    const newVisibleColumns = [...matches].sort().join(', ');\n    if (newVisibleColumns.length === 0) {\n      for (const v of this._columnsMap.values()) {\n        columnsVisibility.add(v);\n      }\n    }\n    if (newVisibleColumns === this._lastVisibleColumns) {\n      return;\n    }\n    const visibleColumnsRegistry = this._visibleColumnsSetting.get();\n    visibleColumnsRegistry[this.tableName] = text;\n    this._visibleColumnsSetting.set(visibleColumnsRegistry);\n    this._dataGrid.setColumnsVisiblity(columnsVisibility);\n    this._lastVisibleColumns = newVisibleColumns;\n  }\n\n  _queryError() {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    const errorMsgElement = document.createElement('div');\n    errorMsgElement.className = 'storage-table-error';\n    errorMsgElement.textContent = ls`An error occurred trying to\\nread the \"${this.tableName}\" table.`;\n    this.element.appendChild(errorMsgElement);\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _refreshButtonClicked(event) {\n    this.update();\n  }\n}\n"]}