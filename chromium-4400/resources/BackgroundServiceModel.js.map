{"version":3,"file":"BackgroundServiceModel.js","sourceRoot":"","sources":["../../../../../front_end/resources/BackgroundServiceModel.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AAErC;;GAEG;AACH,MAAM,OAAO,sBAAuB,SAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ;IAC/D;;OAEG;IACH,YAAY,MAAM;QAChB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,sBAAsB,EAAE,CAAC;QAC/D,MAAM,CAAC,mCAAmC,CAAC,IAAI,CAAC,CAAC;QAEjD,wHAAwH;QACxH,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,OAAO;QACZ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,YAAY,EAAE,OAAO;QAChC,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,EAAC,YAAY,EAAE,OAAO,EAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,OAAO;QACjB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,OAAO;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,qBAAqB,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC;QAC1C,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,qBAAqB,EAAE,EAAC,WAAW,EAAE,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC;IACnG,CAAC;IAED;;;OAGG;IACH,8BAA8B,CAAC,EAAC,sBAAsB,EAAC;QACrD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9E,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,8BAA8B,EAAE,sBAAsB,CAAC,CAAC;IAC/F,CAAC;CACF;AAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAE/F,qBAAqB;AACrB,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,qBAAqB,EAAE,MAAM,CAAC,uBAAuB,CAAC;IACtD,8BAA8B,EAAE,MAAM,CAAC,gCAAgC,CAAC;CACzE,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../sdk/sdk.js';\n\n/**\n * @implements {ProtocolProxyApi.BackgroundServiceDispatcher}\n */\nexport class BackgroundServiceModel extends SDK.SDKModel.SDKModel {\n  /**\n   * @param {!SDK.SDKModel.Target} target\n   */\n  constructor(target) {\n    super(target);\n    this._backgroundServiceAgent = target.backgroundServiceAgent();\n    target.registerBackgroundServiceDispatcher(this);\n\n    /** @const {!Map<!Protocol.BackgroundService.ServiceName, Array<!Protocol.BackgroundService.BackgroundServiceEvent>>} */\n    this._events = new Map();\n  }\n\n  /**\n   * @param {!Protocol.BackgroundService.ServiceName} service\n   */\n  enable(service) {\n    this._events.set(service, []);\n    this._backgroundServiceAgent.invoke_startObserving({service});\n  }\n\n  /**\n   * @param {boolean} shouldRecord\n   * @param {!Protocol.BackgroundService.ServiceName} service\n   */\n  setRecording(shouldRecord, service) {\n    this._backgroundServiceAgent.invoke_setRecording({shouldRecord, service});\n  }\n\n  /**\n   * @param {!Protocol.BackgroundService.ServiceName} service\n   */\n  clearEvents(service) {\n    this._events.set(service, []);\n    this._backgroundServiceAgent.invoke_clearEvents({service});\n  }\n\n  /**\n   * @param {!Protocol.BackgroundService.ServiceName} service\n   * @return {!Array<!Protocol.BackgroundService.BackgroundServiceEvent>}\n   */\n  getEvents(service) {\n    return this._events.get(service) || [];\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.BackgroundService.RecordingStateChangedEvent} event\n   */\n  recordingStateChanged({isRecording, service}) {\n    this.dispatchEventToListeners(Events.RecordingStateChanged, {isRecording, serviceName: service});\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.BackgroundService.BackgroundServiceEventReceivedEvent} event\n   */\n  backgroundServiceEventReceived({backgroundServiceEvent}) {\n    this._events.get(backgroundServiceEvent.service).push(backgroundServiceEvent);\n    this.dispatchEventToListeners(Events.BackgroundServiceEventReceived, backgroundServiceEvent);\n  }\n}\n\nSDK.SDKModel.SDKModel.register(BackgroundServiceModel, SDK.SDKModel.Capability.Browser, false);\n\n/** @enum {symbol} */\nexport const Events = {\n  RecordingStateChanged: Symbol('RecordingStateChanged'),\n  BackgroundServiceEventReceived: Symbol('BackgroundServiceEventReceived'),\n};\n"]}