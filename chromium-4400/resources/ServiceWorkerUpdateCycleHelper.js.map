{"version":3,"file":"ServiceWorkerUpdateCycleHelper.js","sourceRoot":"","sources":["../../../../../front_end/resources/ServiceWorkerUpdateCycleHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ls} from '../platform/platform.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nexport class ServiceWorkerUpdateCycleHelper {\n  static calculateServiceWorkerUpdateRanges(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration):\n      Array<ServiceWorkerUpdateRange> {\n    function addRange(ranges: Array<ServiceWorkerUpdateRange>, range: ServiceWorkerUpdateRange): void {\n      if (range.start < Number.MAX_VALUE && range.start <= range.end) {\n        ranges.push(range);\n      }\n    }\n\n    /**\n     * Add ranges representing Install, Wait or Activate of a sw version represented by id.\n     */\n    function addNormalizedRanges(\n        ranges: Array<ServiceWorkerUpdateRange>, id: string, startInstallTime: number, endInstallTime: number,\n        startActivateTime: number, endActivateTime: number,\n        status: Protocol.ServiceWorker.ServiceWorkerVersionStatus): void {\n      addRange(ranges, {id, phase: ServiceWorkerUpdateNames.Install, start: startInstallTime, end: endInstallTime});\n      if (status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating ||\n          status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated ||\n          status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant) {\n        addRange(ranges, {\n          id,\n          phase: ServiceWorkerUpdateNames.Wait,\n          start: endInstallTime,\n          end: startActivateTime,\n        });\n        addRange(\n            ranges, {id, phase: ServiceWorkerUpdateNames.Activate, start: startActivateTime, end: endActivateTime});\n      }\n    }\n\n    function RangesForVersion(version: SDK.ServiceWorkerManager.ServiceWorkerVersion): Array<ServiceWorkerUpdateRange> {\n      let state: SDK.ServiceWorkerManager.ServiceWorkerVersionState|null = version.currentState;\n      let endActivateTime: number = 0;\n      let beginActivateTime: number = 0;\n      let endInstallTime: number = 0;\n      let beginInstallTime: number = 0;\n      const currentStatus = state.status;\n      if (currentStatus === Protocol.ServiceWorker.ServiceWorkerVersionStatus.New) {\n        return [];\n      }\n\n      while (state) {\n        // find the earliest timestamp of different stage on record.\n        if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated) {\n          endActivateTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating) {\n          if (endActivateTime === 0) {\n            endActivateTime = state.last_updated_timestamp;\n          }\n          beginActivateTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed) {\n          endInstallTime = state.last_updated_timestamp;\n        } else if (state.status === Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing) {\n          if (endInstallTime === 0) {\n            endInstallTime = state.last_updated_timestamp;\n          }\n          beginInstallTime = state.last_updated_timestamp;\n        }\n        state = state.previousState;\n      }\n      /** @type {Array <ServiceWorkerUpdateRange>} */\n      const ranges: Array<ServiceWorkerUpdateRange> = [];\n      addNormalizedRanges(\n          ranges, version.id, beginInstallTime, endInstallTime, beginActivateTime, endActivateTime, currentStatus);\n      return ranges;\n    }\n\n    const versions = registration.versionsByMode();\n    const modes = [\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Waiting,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing,\n      SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Redundant,\n    ];\n\n    for (const mode of modes) {\n      const version = versions.get(mode);\n      if (version) {\n        const ranges = RangesForVersion(version);\n        return ranges;\n      }\n    }\n\n    return [];\n  }\n\n  static createTimingTable(registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): Element {\n    const tableElement = document.createElement('table');\n    tableElement.classList.add('service-worker-update-timing-table');\n    UI.Utils.appendStyle(tableElement, 'resources/serviceWorkerUpdateCycleView.css');\n    const timeRanges = this.calculateServiceWorkerUpdateRanges(registration);\n    this.updateTimingTable(tableElement, timeRanges);\n    return tableElement;\n  }\n\n  private static createTimingTableHead(tableElement: Element): void {\n    const serverHeader = tableElement.createChild('tr', 'service-worker-update-timing-table-header');\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), ls`Version`);\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), ls`Update Activity`);\n    UI.UIUtils.createTextChild(serverHeader.createChild('td'), ls`Timeline`);\n  }\n\n  private static removeRows(tableElement: Element): void {\n    const rows = tableElement.getElementsByTagName('tr');\n    while (rows[0]) {\n      if (rows[0].parentNode) {\n        rows[0].parentNode.removeChild(rows[0]);\n      }\n    }\n  }\n\n  private static updateTimingTable(tableElement: Element, timeRanges: Array<ServiceWorkerUpdateRange>): void {\n    this.removeRows(tableElement);\n    this.createTimingTableHead(tableElement);\n    /** @type {!Array<ServiceWorkerUpdateRange>} */\n    const timeRangeArray = timeRanges;\n    if (timeRangeArray.length === 0) {\n      return;\n    }\n\n    const startTimes = timeRangeArray.map(r => r.start);\n    const endTimes = timeRangeArray.map(r => r.end);\n    const startTime = startTimes.reduce((a, b) => Math.min(a, b));\n    const endTime = endTimes.reduce((a, b) => Math.max(a, b));\n    const scale = 100 / (endTime - startTime);\n\n    for (const range of timeRangeArray) {\n      const phaseName = range.phase;\n\n      const left = (scale * (range.start - startTime));\n      const right = (scale * (endTime - range.end));\n\n      const tr = tableElement.createChild('tr');\n      const timingBarVersionElement = tr.createChild('td');\n      UI.UIUtils.createTextChild(timingBarVersionElement, '#' + range.id);\n      timingBarVersionElement.classList.add('service-worker-update-timing-bar-clickable');\n      timingBarVersionElement.setAttribute('tabindex', '0');\n      const timingBarTitleElement = tr.createChild('td');\n      UI.UIUtils.createTextChild(timingBarTitleElement, phaseName);\n      timingBarTitleElement.setAttribute('role', 'switch');\n      UI.ARIAUtils.setChecked(timingBarTitleElement, false);\n      this.constructUpdateDetails(tableElement, tr, range);\n      const barContainer = tr.createChild('td').createChild('div', 'service-worker-update-timing-row');\n      const bar = <HTMLElement>(\n          barContainer.createChild('span', 'service-worker-update-timing-bar ' + phaseName.toLowerCase()));\n\n      bar.style.left = left + '%';\n      bar.style.right = right + '%';\n      bar.textContent = '\\u200B';  // Important for 0-time items to have 0 width.\n    }\n  }\n\n  /**\n   * Detailed information about an update phase. Currently starting and ending time.\n   */\n  private static constructUpdateDetails(tableElement: Element, tr: Element, range: ServiceWorkerUpdateRange): void {\n    const detailsElement = tableElement.createChild('tr', 'service-worker-update-timing-bar-details');\n    detailsElement.classList.add('service-worker-update-timing-bar-details-collapsed');\n\n    self.onInvokeElement(tr, event => this.onToggleUpdateDetails(detailsElement, event));\n\n    const detailsView = new UI.TreeOutline.TreeOutlineInShadow();\n    detailsElement.appendChild(detailsView.element);\n\n    const startTimeItem = document.createElementWithClass('div', 'service-worker-update-details-treeitem');\n    const startTime = (new Date(range.start)).toISOString();\n    startTimeItem.textContent = ls`Start time: ${startTime}`;\n\n    const startTimeTreeElement = new UI.TreeOutline.TreeElement(startTimeItem);\n    detailsView.appendChild(startTimeTreeElement);\n\n    const endTimeItem = document.createElementWithClass('div', 'service-worker-update-details-treeitem');\n    const endTime = (new Date(range.end)).toISOString();\n    endTimeItem.textContent = ls`End time: ${endTime}`;\n\n    const endTimeTreeElement = new UI.TreeOutline.TreeElement(endTimeItem);\n    detailsView.appendChild(endTimeTreeElement);\n  }\n\n  private static onToggleUpdateDetails(detailsRow: Element, event: Event): void {\n    if (!event.target) {\n      return;\n    }\n    const target: Element = <Element>(event.target);\n    if (target.classList.contains('service-worker-update-timing-bar-clickable')) {\n      detailsRow.classList.toggle('service-worker-update-timing-bar-details-collapsed');\n      detailsRow.classList.toggle('service-worker-update-timing-bar-details-expanded');\n\n      const expanded = target.getAttribute('aria-checked') === 'true';\n      UI.ARIAUtils.setChecked(target, !expanded);\n    }\n  }\n\n  static refresh(tableElement: Element, registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration): void {\n    const timeRanges = this.calculateServiceWorkerUpdateRanges(registration);\n    this.updateTimingTable(tableElement, timeRanges);\n  }\n}\n\nexport const enum ServiceWorkerUpdateNames {\n  Install = 'Install',\n  Wait = 'Wait',\n  Activate = 'Activate'\n}\n\n\nexport interface ServiceWorkerUpdateRange {\n  id: string, phase: ServiceWorkerUpdateNames, start: number, end: number\n}\n"]}