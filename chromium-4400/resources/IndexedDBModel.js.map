{"version":3,"file":"IndexedDBModel.js","sourceRoot":"","sources":["../../../../../front_end/resources/IndexedDBModel.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\n\n/**\n * @implements {ProtocolProxyApi.StorageDispatcher}\n */\nexport class IndexedDBModel extends SDK.SDKModel.SDKModel {\n  /**\n   * @param {!SDK.SDKModel.Target} target\n   */\n  constructor(target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n    this._securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    this._indexedDBAgent = target.indexedDBAgent();\n    this._storageAgent = target.storageAgent();\n\n    /** @type {!Map.<!DatabaseId, !Database>} */\n    this._databases = new Map();\n    /** @type {!Object.<string, !Array.<string>>} */\n    this._databaseNamesBySecurityOrigin = {};\n\n    this._originsUpdated = new Set();\n    this._throttler = new Common.Throttler.Throttler(1000);\n  }\n\n  /**\n   * @param {*} idbKey\n   * @return {(!Protocol.IndexedDB.Key|undefined)}\n   */\n  static keyFromIDBKey(idbKey) {\n    if (typeof (idbKey) === 'undefined' || idbKey === null) {\n      return undefined;\n    }\n\n    /** @type {!Protocol.IndexedDB.Key} */\n    let key;\n    switch (typeof(idbKey)) {\n      case 'number':\n        key = {\n          type: Protocol.IndexedDB.KeyType.Number,\n          number: idbKey,\n        };\n        break;\n      case 'string':\n        key = {\n          type: Protocol.IndexedDB.KeyType.String,\n          string: idbKey,\n        };\n        break;\n      case 'object':\n        if (idbKey instanceof Date) {\n          key = {\n            type: Protocol.IndexedDB.KeyType.Date,\n            date: idbKey.getTime(),\n          };\n        } else if (Array.isArray(idbKey)) {\n          const array = [];\n          for (let i = 0; i < idbKey.length; ++i) {\n            const nestedKey = IndexedDBModel.keyFromIDBKey(idbKey[i]);\n            if (nestedKey) {\n              array.push(nestedKey);\n            }\n          }\n          key = {\n            type: Protocol.IndexedDB.KeyType.Array,\n            array,\n          };\n        } else {\n          return undefined;\n        }\n        break;\n      default:\n        return undefined;\n    }\n    return key;\n  }\n\n  /**\n   * @param {!IDBKeyRange} idbKeyRange\n   * @return {!Protocol.IndexedDB.KeyRange}\n   */\n  static _keyRangeFromIDBKeyRange(idbKeyRange) {\n    const keyRange = {};\n    keyRange.lower = IndexedDBModel.keyFromIDBKey(idbKeyRange.lower);\n    keyRange.upper = IndexedDBModel.keyFromIDBKey(idbKeyRange.upper);\n    keyRange.lowerOpen = Boolean(idbKeyRange.lowerOpen);\n    keyRange.upperOpen = Boolean(idbKeyRange.upperOpen);\n    return keyRange;\n  }\n\n  /**\n   * @param {!Protocol.IndexedDB.KeyPath} keyPath\n   * @return {?string|!Array.<string>|undefined}\n   */\n  static idbKeyPathFromKeyPath(keyPath) {\n    let idbKeyPath;\n    switch (keyPath.type) {\n      case Protocol.IndexedDB.KeyPathType.Null:\n        idbKeyPath = null;\n        break;\n      case Protocol.IndexedDB.KeyPathType.String:\n        idbKeyPath = keyPath.string;\n        break;\n      case Protocol.IndexedDB.KeyPathType.Array:\n        idbKeyPath = keyPath.array;\n        break;\n    }\n    return idbKeyPath;\n  }\n\n  /**\n   * @param {?string|!Array.<string>|undefined} idbKeyPath\n   * @return {?string}\n   */\n  static keyPathStringFromIDBKeyPath(idbKeyPath) {\n    if (typeof idbKeyPath === 'string') {\n      return '\"' + idbKeyPath + '\"';\n    }\n    if (idbKeyPath instanceof Array) {\n      return '[\"' + idbKeyPath.join('\", \"') + '\"]';\n    }\n    return null;\n  }\n\n  enable() {\n    if (this._enabled) {\n      return;\n    }\n\n    this._indexedDBAgent.invoke_enable();\n    if (this._securityOriginManager) {\n      this._securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginAdded, this._securityOriginAdded, this);\n      this._securityOriginManager.addEventListener(\n          SDK.SecurityOriginManager.Events.SecurityOriginRemoved, this._securityOriginRemoved, this);\n\n      for (const securityOrigin of this._securityOriginManager.securityOrigins()) {\n        this._addOrigin(securityOrigin);\n      }\n    }\n\n    this._enabled = true;\n  }\n\n  /**\n   * @param {string} origin\n   */\n  clearForOrigin(origin) {\n    if (!this._enabled || !this._databaseNamesBySecurityOrigin[origin]) {\n      return;\n    }\n\n    this._removeOrigin(origin);\n    this._addOrigin(origin);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   */\n  async deleteDatabase(databaseId) {\n    if (!this._enabled) {\n      return;\n    }\n    await this._indexedDBAgent.invoke_deleteDatabase(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name});\n    this._loadDatabaseNames(databaseId.securityOrigin);\n  }\n\n  async refreshDatabaseNames() {\n    for (const securityOrigin in this._databaseNamesBySecurityOrigin) {\n      await this._loadDatabaseNames(securityOrigin);\n    }\n    this.dispatchEventToListeners(Events.DatabaseNamesRefreshed);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   */\n  refreshDatabase(databaseId) {\n    this._loadDatabase(databaseId, true);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {string} objectStoreName\n   * @return {!Promise<void>}\n   */\n  async clearObjectStore(databaseId, objectStoreName) {\n    await this._indexedDBAgent.invoke_clearObjectStore(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name, objectStoreName});\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {string} objectStoreName\n   * @param {!IDBKeyRange} idbKeyRange\n   * @return {!Promise<void>}\n   */\n  async deleteEntries(databaseId, objectStoreName, idbKeyRange) {\n    const keyRange = IndexedDBModel._keyRangeFromIDBKeyRange(idbKeyRange);\n    await this._indexedDBAgent.invoke_deleteObjectStoreEntries(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name, objectStoreName, keyRange});\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _securityOriginAdded(event) {\n    const securityOrigin = /** @type {string} */ (event.data);\n    this._addOrigin(securityOrigin);\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _securityOriginRemoved(event) {\n    const securityOrigin = /** @type {string} */ (event.data);\n    this._removeOrigin(securityOrigin);\n  }\n\n  /**\n   * @param {string} securityOrigin\n   */\n  _addOrigin(securityOrigin) {\n    console.assert(!this._databaseNamesBySecurityOrigin[securityOrigin]);\n    this._databaseNamesBySecurityOrigin[securityOrigin] = [];\n    this._loadDatabaseNames(securityOrigin);\n    if (this._isValidSecurityOrigin(securityOrigin)) {\n      this._storageAgent.invoke_trackIndexedDBForOrigin({origin: securityOrigin});\n    }\n  }\n\n  /**\n   * @param {string} securityOrigin\n   */\n  _removeOrigin(securityOrigin) {\n    console.assert(Boolean(this._databaseNamesBySecurityOrigin[securityOrigin]));\n    for (let i = 0; i < this._databaseNamesBySecurityOrigin[securityOrigin].length; ++i) {\n      this._databaseRemoved(securityOrigin, this._databaseNamesBySecurityOrigin[securityOrigin][i]);\n    }\n    delete this._databaseNamesBySecurityOrigin[securityOrigin];\n    if (this._isValidSecurityOrigin(securityOrigin)) {\n      this._storageAgent.invoke_untrackIndexedDBForOrigin({origin: securityOrigin});\n    }\n  }\n\n  /**\n   * @param {string} securityOrigin\n   * @return {boolean}\n   */\n  _isValidSecurityOrigin(securityOrigin) {\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(securityOrigin);\n    return parsedURL !== null && parsedURL.scheme.startsWith('http');\n  }\n\n  /**\n   * @param {string} securityOrigin\n   * @param {!Array.<string>} databaseNames\n   */\n  _updateOriginDatabaseNames(securityOrigin, databaseNames) {\n    const newDatabaseNames = new Set(databaseNames);\n    const oldDatabaseNames = new Set(this._databaseNamesBySecurityOrigin[securityOrigin]);\n\n    this._databaseNamesBySecurityOrigin[securityOrigin] = databaseNames;\n\n    for (const databaseName of oldDatabaseNames) {\n      if (!newDatabaseNames.has(databaseName)) {\n        this._databaseRemoved(securityOrigin, databaseName);\n      }\n    }\n    for (const databaseName of newDatabaseNames) {\n      if (!oldDatabaseNames.has(databaseName)) {\n        this._databaseAdded(securityOrigin, databaseName);\n      }\n    }\n  }\n\n  /**\n   * @return {!Array.<!DatabaseId>}\n   */\n  databases() {\n    const result = [];\n    for (const securityOrigin in this._databaseNamesBySecurityOrigin) {\n      const databaseNames = this._databaseNamesBySecurityOrigin[securityOrigin];\n      for (let i = 0; i < databaseNames.length; ++i) {\n        result.push(new DatabaseId(securityOrigin, databaseNames[i]));\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {string} securityOrigin\n   * @param {string} databaseName\n   */\n  _databaseAdded(securityOrigin, databaseName) {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(Events.DatabaseAdded, {model: this, databaseId: databaseId});\n  }\n\n  /**\n   * @param {string} securityOrigin\n   * @param {string} databaseName\n   */\n  _databaseRemoved(securityOrigin, databaseName) {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(Events.DatabaseRemoved, {model: this, databaseId: databaseId});\n  }\n\n  /**\n   * @param {string} securityOrigin\n   * @return {!Promise<!Array.<string>>} databaseNames\n   */\n  async _loadDatabaseNames(securityOrigin) {\n    const {databaseNames} = await this._indexedDBAgent.invoke_requestDatabaseNames({securityOrigin});\n    if (!databaseNames) {\n      return [];\n    }\n    if (!this._databaseNamesBySecurityOrigin[securityOrigin]) {\n      return [];\n    }\n    this._updateOriginDatabaseNames(securityOrigin, databaseNames);\n    return databaseNames;\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {boolean} entriesUpdated\n   */\n  async _loadDatabase(databaseId, entriesUpdated) {\n    const {databaseWithObjectStores} = await this._indexedDBAgent.invoke_requestDatabase(\n        {securityOrigin: databaseId.securityOrigin, databaseName: databaseId.name});\n\n    if (!databaseWithObjectStores) {\n      return;\n    }\n    if (!this._databaseNamesBySecurityOrigin[databaseId.securityOrigin]) {\n      return;\n    }\n\n    const databaseModel = new Database(databaseId, databaseWithObjectStores.version);\n    this._databases.set(databaseId, databaseModel);\n    for (const objectStore of databaseWithObjectStores.objectStores) {\n      const objectStoreIDBKeyPath = IndexedDBModel.idbKeyPathFromKeyPath(objectStore.keyPath);\n      const objectStoreModel = new ObjectStore(objectStore.name, objectStoreIDBKeyPath, objectStore.autoIncrement);\n      for (let j = 0; j < objectStore.indexes.length; ++j) {\n        const index = objectStore.indexes[j];\n        const indexIDBKeyPath = IndexedDBModel.idbKeyPathFromKeyPath(index.keyPath);\n        const indexModel = new Index(index.name, indexIDBKeyPath, index.unique, index.multiEntry);\n        objectStoreModel.indexes.set(indexModel.name, indexModel);\n      }\n      databaseModel.objectStores.set(objectStoreModel.name, objectStoreModel);\n    }\n\n    this.dispatchEventToListeners(\n        Events.DatabaseLoaded, {model: this, database: databaseModel, entriesUpdated: entriesUpdated});\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {string} objectStoreName\n   * @param {?IDBKeyRange} idbKeyRange\n   * @param {number} skipCount\n   * @param {number} pageSize\n   * @param {function(!Array.<!Entry>, boolean):void} callback\n   */\n  loadObjectStoreData(databaseId, objectStoreName, idbKeyRange, skipCount, pageSize, callback) {\n    this._requestData(databaseId, databaseId.name, objectStoreName, '', idbKeyRange, skipCount, pageSize, callback);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {string} objectStoreName\n   * @param {string} indexName\n   * @param {?IDBKeyRange} idbKeyRange\n   * @param {number} skipCount\n   * @param {number} pageSize\n   * @param {function(!Array.<!Entry>, boolean):void} callback\n   */\n  loadIndexData(databaseId, objectStoreName, indexName, idbKeyRange, skipCount, pageSize, callback) {\n    this._requestData(\n        databaseId, databaseId.name, objectStoreName, indexName, idbKeyRange, skipCount, pageSize, callback);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {string} databaseName\n   * @param {string} objectStoreName\n   * @param {string} indexName\n   * @param {?IDBKeyRange} idbKeyRange\n   * @param {number} skipCount\n   * @param {number} pageSize\n   * @param {function(!Array.<!Entry>, boolean):void} callback\n   */\n  async _requestData(databaseId, databaseName, objectStoreName, indexName, idbKeyRange, skipCount, pageSize, callback) {\n    const keyRange = idbKeyRange ? IndexedDBModel._keyRangeFromIDBKeyRange(idbKeyRange) : undefined;\n\n    const response = await this._indexedDBAgent.invoke_requestData({\n      securityOrigin: databaseId.securityOrigin,\n      databaseName,\n      objectStoreName,\n      indexName,\n      skipCount,\n      pageSize,\n      keyRange\n    });\n\n    if (response.getError()) {\n      console.error('IndexedDBAgent error: ' + response.getError());\n      return;\n    }\n\n    const runtimeModel = this.target().model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel || !this._databaseNamesBySecurityOrigin[databaseId.securityOrigin]) {\n      return;\n    }\n    const dataEntries = response.objectStoreDataEntries;\n    const entries = [];\n    for (const dataEntry of dataEntries) {\n      const key = runtimeModel.createRemoteObject(dataEntry.key);\n      const primaryKey = runtimeModel.createRemoteObject(dataEntry.primaryKey);\n      const value = runtimeModel.createRemoteObject(dataEntry.value);\n      entries.push(new Entry(key, primaryKey, value));\n    }\n    callback(entries, response.hasMore);\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {!ObjectStore} objectStore\n   * @return {!Promise<?ObjectStoreMetadata>}\n   */\n  async getMetadata(databaseId, objectStore) {\n    const databaseOrigin = databaseId.securityOrigin;\n    const databaseName = databaseId.name;\n    const objectStoreName = objectStore.name;\n    const response =\n        await this._indexedDBAgent.invoke_getMetadata({securityOrigin: databaseOrigin, databaseName, objectStoreName});\n\n    if (response.getError()) {\n      console.error('IndexedDBAgent error: ' + response.getError());\n      return null;\n    }\n    return {entriesCount: response.entriesCount, keyGeneratorValue: response.keyGeneratorValue};\n  }\n\n  /**\n   * @param {string} securityOrigin\n   */\n  async _refreshDatabaseList(securityOrigin) {\n    const databaseNames = await this._loadDatabaseNames(securityOrigin);\n    for (const databaseName of databaseNames) {\n      this._loadDatabase(new DatabaseId(securityOrigin, databaseName), false);\n    }\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Storage.IndexedDBListUpdatedEvent} event\n   */\n  indexedDBListUpdated({origin: securityOrigin}) {\n    this._originsUpdated.add(securityOrigin);\n\n    this._throttler.schedule(() => {\n      const promises = Array.from(this._originsUpdated, securityOrigin => {\n        this._refreshDatabaseList(securityOrigin);\n      });\n      this._originsUpdated.clear();\n      return Promise.all(promises);\n    });\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Storage.IndexedDBContentUpdatedEvent} event\n   */\n  indexedDBContentUpdated({origin: securityOrigin, databaseName, objectStoreName}) {\n    const databaseId = new DatabaseId(securityOrigin, databaseName);\n    this.dispatchEventToListeners(\n        Events.IndexedDBContentUpdated, {databaseId: databaseId, objectStoreName: objectStoreName, model: this});\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Storage.CacheStorageListUpdatedEvent} event\n   */\n  cacheStorageListUpdated(event) {\n  }\n\n  /**\n   * @override\n   * @param {!Protocol.Storage.CacheStorageContentUpdatedEvent} event\n   */\n  cacheStorageContentUpdated(event) {\n  }\n}\n\nSDK.SDKModel.SDKModel.register(IndexedDBModel, SDK.SDKModel.Capability.Storage, false);\n\n/** @enum {symbol} */\nexport const Events = {\n  DatabaseAdded: Symbol('DatabaseAdded'),\n  DatabaseRemoved: Symbol('DatabaseRemoved'),\n  DatabaseLoaded: Symbol('DatabaseLoaded'),\n  DatabaseNamesRefreshed: Symbol('DatabaseNamesRefreshed'),\n  IndexedDBContentUpdated: Symbol('IndexedDBContentUpdated')\n};\n\nexport class Entry {\n  /**\n   * @param {!SDK.RemoteObject.RemoteObject} key\n   * @param {!SDK.RemoteObject.RemoteObject} primaryKey\n   * @param {!SDK.RemoteObject.RemoteObject} value\n   */\n  constructor(key, primaryKey, value) {\n    this.key = key;\n    this.primaryKey = primaryKey;\n    this.value = value;\n  }\n}\n\nexport class DatabaseId {\n  /**\n   * @param {string} securityOrigin\n   * @param {string} name\n   */\n  constructor(securityOrigin, name) {\n    this.securityOrigin = securityOrigin;\n    this.name = name;\n  }\n\n  /**\n   * @param {!DatabaseId} databaseId\n   * @return {boolean}\n   */\n  equals(databaseId) {\n    return this.name === databaseId.name && this.securityOrigin === databaseId.securityOrigin;\n  }\n}\n\nexport class Database {\n  /**\n   * @param {!DatabaseId} databaseId\n   * @param {number} version\n   */\n  constructor(databaseId, version) {\n    this.databaseId = databaseId;\n    this.version = version;\n    /** @type {!Map<string, !ObjectStore>} */\n    this.objectStores = new Map();\n  }\n}\n\nexport class ObjectStore {\n  /**\n   * @param {string} name\n   * @param {*} keyPath\n   * @param {boolean} autoIncrement\n   */\n  constructor(name, keyPath, autoIncrement) {\n    this.name = name;\n    this.keyPath = keyPath;\n    this.autoIncrement = autoIncrement;\n    /** @type {!Map<string, !Index>} */\n    this.indexes = new Map();\n  }\n\n  /**\n   * @return {string}\n   */\n  get keyPathString() {\n    return /** @type {string}*/ (IndexedDBModel.keyPathStringFromIDBKeyPath(/** @type {string}*/ (this.keyPath)));\n  }\n}\n\nexport class Index {\n  /**\n   * @param {string} name\n   * @param {*} keyPath\n   * @param {boolean} unique\n   * @param {boolean} multiEntry\n   */\n  constructor(name, keyPath, unique, multiEntry) {\n    this.name = name;\n    this.keyPath = keyPath;\n    this.unique = unique;\n    this.multiEntry = multiEntry;\n  }\n\n  /**\n   * @return {string}\n   */\n  get keyPathString() {\n    return /** @type {string}*/ (IndexedDBModel.keyPathStringFromIDBKeyPath(/** @type {string}*/ (this.keyPath)));\n  }\n}\n\n/**\n * @typedef {{\n *      entriesCount: number,\n *      keyGeneratorValue: number\n * }}\n */\n// @ts-ignore typedef\nexport let ObjectStoreMetadata;\n"]}