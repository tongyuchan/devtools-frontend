{"version":3,"file":"FormatterWorker.js","sourceRoot":"","sources":["../../../../../front_end/formatter_worker/FormatterWorker.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport * as Acorn from '../third_party/acorn/acorn.js';\n\nimport {AcornTokenizer, ECMA_VERSION} from './AcornTokenizer.js';\nimport {CSSFormatter} from './CSSFormatter.js';\nimport {ESTreeWalker} from './ESTreeWalker.js';\nimport {FormattedContentBuilder} from './FormattedContentBuilder.js';\nimport {HTMLFormatter} from './HTMLFormatter.js';\nimport {IdentityFormatter} from './IdentityFormatter.js';\nimport {JavaScriptFormatter} from './JavaScriptFormatter.js';\n\n/**\n * @param {string} mimeType\n * @return {function(string, function(string, ?string, number, number):(!Object|undefined|void))}\n */\nexport function createTokenizer(mimeType) {\n  const mode = CodeMirror.getMode({indentUnit: 2}, mimeType);\n  const state = CodeMirror.startState(mode);\n\n  if (!mode || mode.name === 'null') {\n    throw new Error(`Could not find CodeMirror mode for MimeType: ${mimeType}`);\n  }\n\n  if (!mode.token) {\n    throw new Error(`Could not find CodeMirror mode with token method: ${mimeType}`);\n  }\n\n  /**\n   * @param {string} line\n   * @param {function(string, ?string, number, number):?} callback\n   */\n  return (line, callback) => {\n    const stream = new CodeMirror.StringStream(line);\n    while (!stream.eol()) {\n      // @ts-expect-error TypeScript can't determine that `mode.token` is defined based on lines above\n      const style = mode.token(stream, state);\n      const value = stream.current();\n      if (callback(value, style, stream.start, stream.start + value.length) === AbortTokenization) {\n        return;\n      }\n      stream.start = stream.pos;\n    }\n  };\n}\n\nexport const AbortTokenization = {};\n\n/**\n * @param {string} content\n * @return {string}\n */\nexport function evaluatableJavaScriptSubstring(content) {\n  const tokenizer = Acorn.tokenizer(content, {ecmaVersion: ECMA_VERSION});\n  let result = '';\n  try {\n    let token = tokenizer.getToken();\n    while (token.type !== Acorn.tokTypes.eof && AcornTokenizer.punctuator(token)) {\n      token = tokenizer.getToken();\n    }\n\n    const startIndex = token.start;\n    let endIndex = token.end;\n    let openBracketsCounter = 0;\n    while (token.type !== Acorn.tokTypes.eof) {\n      const isIdentifier = AcornTokenizer.identifier(token);\n      const isThis = AcornTokenizer.keyword(token, 'this');\n      const isString = token.type === Acorn.tokTypes.string;\n      if (!isThis && !isIdentifier && !isString) {\n        break;\n      }\n\n      endIndex = token.end;\n      token = tokenizer.getToken();\n      while (AcornTokenizer.punctuator(token, '.[]')) {\n        if (AcornTokenizer.punctuator(token, '[')) {\n          openBracketsCounter++;\n        }\n\n        if (AcornTokenizer.punctuator(token, ']')) {\n          endIndex = openBracketsCounter > 0 ? token.end : endIndex;\n          openBracketsCounter--;\n        }\n\n        token = tokenizer.getToken();\n      }\n    }\n    result = content.substring(startIndex, endIndex);\n  } catch (e) {\n    console.error(e);\n  }\n  return result;\n}\n\n/**\n * @param {string} content\n * @return {!Array<!{name: (string|undefined), offset: number}>}\n */\nexport function javaScriptIdentifiers(content) {\n  /** @type {?ESTree.Node} */\n  let root = null;\n  try {\n    root = /** @type {?ESTree.Node} */ (Acorn.parse(content, {ecmaVersion: ECMA_VERSION, ranges: false}));\n  } catch (e) {\n  }\n\n  /** @type {!Array<!ESTree.Node>} */\n  const identifiers = [];\n  const walker = new ESTreeWalker(beforeVisit);\n\n  /**\n   * @param {!ESTree.Node} node\n   * @return {boolean}\n   */\n  function isFunction(node) {\n    return node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression' ||\n        node.type === 'ArrowFunctionExpression';\n  }\n\n  /**\n   * @param {!ESTree.Node} node\n   * @return {!(Object | undefined)}\n   */\n  function beforeVisit(node) {\n    if (isFunction(node)) {\n      if (node.id) {\n        identifiers.push(node.id);\n      }\n      return ESTreeWalker.SkipSubtree;\n    }\n\n    if (node.type !== 'Identifier') {\n      return;\n    }\n\n    if (node.parent && node.parent.type === 'MemberExpression') {\n      const parent = /** @type {!ESTree.MemberExpression} */ (node.parent);\n      if (parent.property === node && !parent.computed) {\n        return;\n      }\n    }\n    identifiers.push(node);\n    return;\n  }\n\n  if (!root || root.type !== 'Program' || root.body.length !== 1 || !isFunction(root.body[0])) {\n    return [];\n  }\n\n  const functionNode = /** @type {!ESTree.FunctionDeclaration} */ (root.body[0]);\n  for (const param of functionNode.params) {\n    walker.walk(param);\n  }\n  walker.walk(functionNode.body);\n  return identifiers.map(id => ({name: 'name' in id && id.name || undefined, offset: id.start}));\n}\n\n/**\n * @param {string} mimeType\n * @param {string} text\n * @param {string=} indentString\n * @return {{mapping: {original: !Array<number>, formatted: !Array<number>}, content: string}}\n */\nexport function format(mimeType, text, indentString) {\n  // Default to a 4-space indent.\n  indentString = indentString || '    ';\n  const result = {};\n  const builder = new FormattedContentBuilder(indentString);\n  const lineEndings = Platform.StringUtilities.findLineEndingIndexes(text);\n  try {\n    switch (mimeType) {\n      case 'text/html': {\n        const formatter = new HTMLFormatter(builder);\n        formatter.format(text, lineEndings);\n        break;\n      }\n      case 'text/css': {\n        const formatter = new CSSFormatter(builder);\n        formatter.format(text, lineEndings, 0, text.length);\n        break;\n      }\n      case 'text/javascript':\n      case 'application/javascript': {\n        const formatter = new JavaScriptFormatter(builder);\n        formatter.format(text, lineEndings, 0, text.length);\n        break;\n      }\n      default: {\n        const formatter = new IdentityFormatter(builder);\n        formatter.format(text, lineEndings, 0, text.length);\n      }\n    }\n    result.mapping = builder.mapping;\n    result.content = builder.content();\n  } catch (e) {\n    console.error(e);\n    result.mapping = {original: [0], formatted: [0]};\n    result.content = text;\n  }\n  return result;\n}\n\n/**\n * @param {string} content\n * @return {?{baseExpression: string, receiver: string, argumentIndex: number, functionName: string}}\n */\nexport function findLastFunctionCall(content) {\n  if (content.length > 10000) {\n    return null;\n  }\n  try {\n    const tokenizer = Acorn.tokenizer(content, {ecmaVersion: ECMA_VERSION});\n    while (tokenizer.getToken().type !== Acorn.tokTypes.eof) {\n    }\n  } catch (e) {\n    return null;\n  }\n\n  const suffix = '000)';\n  const base = _lastCompleteExpression(content, suffix, new Set(['CallExpression', 'NewExpression']));\n  if (!base) {\n    return null;\n  }\n  if (base.baseNode.type !== 'CallExpression' && base.baseNode.type !== 'NewExpression') {\n    return null;\n  }\n  const callee = base.baseNode['callee'];\n\n  let functionName = '';\n  const functionProperty =\n      callee.type === 'Identifier' ? callee : /** @type {!ESTree.MemberExpression} */ (callee).property;\n  if (functionProperty) {\n    if (functionProperty.type === 'Identifier') {\n      functionName = functionProperty.name;\n    } else if (functionProperty.type === 'Literal') {\n      functionName = /** @type {string} */ (functionProperty.value);\n    }\n  }\n\n  const argumentIndex = base.baseNode['arguments'].length - 1;\n  const baseExpression =\n      `(${base.baseExpression.substring(callee.start - base.baseNode.start, callee.end - base.baseNode.start)})`;\n  let receiver = '(function(){return this})()';\n  if (callee.type === 'MemberExpression') {\n    const receiverBase = callee['object'];\n    receiver =\n        base.baseExpression.substring(receiverBase.start - base.baseNode.start, receiverBase.end - base.baseNode.start);\n  }\n  return {baseExpression, receiver, argumentIndex, functionName};\n}\n\n/**\n * @param {string} content\n * @return {!Array<string>}\n */\nexport function argumentsList(content) {\n  if (content.length > 10000) {\n    return [];\n  }\n  /** @type {?ESTree.Node} */\n  let parsed = null;\n  try {\n    // Try to parse as a function, anonymous function, or arrow function.\n    parsed = /** @type {?ESTree.Node} */ (Acorn.parse(`(${content})`, {ecmaVersion: ECMA_VERSION}));\n  } catch (e) {\n  }\n  if (!parsed) {\n    try {\n      // Try to parse as a method.\n      parsed = /** @type {?ESTree.Node} */ (Acorn.parse(`({${content}})`, {ecmaVersion: ECMA_VERSION}));\n    } catch (e) {\n    }\n  }\n  if (!parsed || !('body' in parsed) || !Array.isArray(parsed.body) || !parsed.body[0] ||\n      !('expression' in parsed.body[0])) {\n    return [];\n  }\n  const expression = parsed.body[0].expression;\n  let params = null;\n  switch (expression.type) {\n    case 'ClassExpression': {\n      if (!expression.body.body) {\n        break;\n      }\n      const constructor = expression.body.body.find(method => method.kind === 'constructor');\n      if (constructor) {\n        params = constructor.value.params;\n      }\n      break;\n    }\n    case 'ObjectExpression': {\n      if (!expression.properties[0] || !('value' in expression.properties[0]) ||\n          !('params' in expression.properties[0].value)) {\n        break;\n      }\n      params = expression.properties[0].value.params;\n      break;\n    }\n    case 'FunctionExpression':\n    case 'ArrowFunctionExpression': {\n      params = expression.params;\n      break;\n    }\n  }\n  if (!params) {\n    return [];\n  }\n  return params.map(paramName);\n\n  /**\n   * @param {!ESTree.Node} param\n   * @return {string}\n   */\n  function paramName(param) {\n    switch (param.type) {\n      case 'Identifier':\n        return param.name;\n      case 'AssignmentPattern':\n        return '?' + paramName(param.left);\n      case 'ObjectPattern':\n        return 'obj';\n      case 'ArrayPattern':\n        return 'arr';\n      case 'RestElement':\n        return '...' + paramName(param.argument);\n    }\n    return '?';\n  }\n}\n\n/**\n * @param {string} content\n * @return {?string}\n */\nexport function findLastExpression(content) {\n  if (content.length > 10000) {\n    return null;\n  }\n  try {\n    const tokenizer = Acorn.tokenizer(content, {ecmaVersion: ECMA_VERSION});\n    while (tokenizer.getToken().type !== Acorn.tokTypes.eof) {\n    }\n  } catch (e) {\n    return null;\n  }\n\n  const suffix = '.DEVTOOLS';\n  try {\n    Acorn.parse(content + suffix, {ecmaVersion: ECMA_VERSION});\n  } catch (parseError) {\n    // If this is an invalid location for a '.', don't attempt to give autocomplete\n    if (parseError.message.startsWith('Unexpected token') && parseError.pos === content.length) {\n      return null;\n    }\n  }\n  const base = _lastCompleteExpression(content, suffix, new Set(['MemberExpression', 'Identifier']));\n  if (base) {\n    return base.baseExpression;\n  }\n  return null;\n}\n\n/**\n * @param {string} content\n * @param {string} suffix\n * @param {!Set<string>} types\n * @return {?{baseNode: !ESTree.Node, baseExpression: string}}\n */\nexport function _lastCompleteExpression(content, suffix, types) {\n  /** @type {?ESTree.Node} */\n  let ast = null;\n  let parsedContent = '';\n  for (let i = 0; i < content.length; i++) {\n    try {\n      // Wrap content in paren to successfully parse object literals\n      parsedContent = content[i] === '{' ? `(${content.substring(i)})${suffix}` : `${content.substring(i)}${suffix}`;\n      ast = /** @type {!ESTree.Node} */ (Acorn.parse(parsedContent, {ecmaVersion: ECMA_VERSION}));\n      break;\n    } catch (e) {\n    }\n  }\n  if (!ast) {\n    return null;\n  }\n  const astEnd = ast.end;\n  /** @type {?ESTree.Node} */\n  let baseNode = null;\n  const walker = new ESTreeWalker(node => {\n    if (baseNode || node.end < astEnd) {\n      return ESTreeWalker.SkipSubtree;\n    }\n    if (types.has(node.type)) {\n      baseNode = node;\n    }\n    return;\n  });\n  walker.walk(ast);\n  if (!baseNode) {\n    return null;\n  }\n  let baseExpression =\n      parsedContent.substring(/** @type {!ESTree.Node} */ (baseNode).start, parsedContent.length - suffix.length);\n  if (baseExpression.startsWith('{')) {\n    baseExpression = `(${baseExpression})`;\n  }\n  return {baseNode, baseExpression};\n}\n\n(function disableLoggingForTest() {\n  if (Root.Runtime.Runtime.queryParam('test')) {\n    console.error = () => undefined;\n  }\n})();\n"]}