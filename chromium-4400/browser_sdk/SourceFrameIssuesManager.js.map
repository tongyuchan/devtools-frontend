{"version":3,"file":"SourceFrameIssuesManager.js","sourceRoot":"","sources":["../../../../../front_end/browser_sdk/SourceFrameIssuesManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Bindings from '../bindings/bindings.js';  // eslint-disable-line no-unused-vars\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as Marked from '../third_party/marked/marked.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport * as IssuesManager from './IssuesManager.js';\nimport {findTitleFromMarkdownAst, getMarkdownFileContent} from './MarkdownHelpers.js';\n\n\nexport class SourceFrameIssuesManager {\n  private issuesManager: IssuesManager.IssuesManager;\n  private locationPool = new Bindings.LiveLocation.LiveLocationPool();\n  private issueMessages = new Array<IssueMessage>();\n\n  constructor(issuesManager: IssuesManager.IssuesManager) {\n    this.issuesManager = issuesManager;\n\n    this.issuesManager.addEventListener(IssuesManager.Events.IssueAdded, this.onIssueAdded, this);\n    this.issuesManager.addEventListener(IssuesManager.Events.FullUpdateRequired, this.onFullUpdateRequired, this);\n  }\n\n  private onIssueAdded(event: Common.EventTarget.EventTargetEvent): void {\n    const {issue} =\n        /** @type {!{issue: !SDK.Issue.Issue}} */ (event.data);\n    this.addIssue(issue);\n  }\n\n  private addIssue(issue: SDK.Issue.Issue): void {\n    if (!this.isTrustedTypeIssue(issue)) {\n      return;\n    }\n    const issuesModel = issue.model();\n    if (!issuesModel) {\n      return;\n    }\n    const debuggerModel = issuesModel.target().model(SDK.DebuggerModel.DebuggerModel);\n    const srcLocation = issue.details().sourceCodeLocation;\n    if (srcLocation && debuggerModel) {\n      const rawLocation =\n          debuggerModel.createRawLocationByURL(srcLocation.url, srcLocation.lineNumber, srcLocation.columnNumber);\n      if (rawLocation) {\n        this.addIssueMessageToScript(issue, rawLocation);\n      }\n    }\n  }\n\n  private onFullUpdateRequired(): void {\n    this.resetMessages();\n    const issues = this.issuesManager.issues();\n    for (const issue of issues) {\n      this.addIssue(issue);\n    }\n  }\n\n  private createIssueDescriptionFromMarkdown(description: SDK.Issue.MarkdownIssueDescription): string|null {\n    const rawMarkdown = getMarkdownFileContent(description.file);\n    const markdownAst = Marked.Marked.lexer(rawMarkdown);\n    return findTitleFromMarkdownAst(markdownAst);\n  }\n\n  private addIssueMessageToScript(issue: SDK.Issue.Issue, rawLocation: SDK.DebuggerModel.Location): void {\n    const description = issue.getDescription();\n    if (description && 'file' in description) {\n      const title = this.createIssueDescriptionFromMarkdown(description);\n      if (title) {\n        const clickHandler: () => void = () => {\n          Common.Revealer.reveal(issue);\n        };\n        this.issueMessages.push(new IssueMessage(title, rawLocation, this.locationPool, clickHandler));\n      }\n    }\n  }\n\n  private isTrustedTypeIssue(issue: SDK.Issue.Issue):\n      issue is SDK.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue {\n    return issue instanceof SDK.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue &&\n        issue.code() === SDK.ContentSecurityPolicyIssue.trustedTypesSinkViolationCode ||\n        issue.code() === SDK.ContentSecurityPolicyIssue.trustedTypesPolicyViolationCode;\n  }\n\n  private resetMessages(): void {\n    for (const message of this.issueMessages) {\n      message.dispose();\n    }\n    this.issueMessages = [];\n    this.locationPool.disposeAll();\n  }\n}\n\nexport class IssueMessage {\n  private text: string;\n  private level: string;\n  private uiMessage?: Workspace.UISourceCode.Message;\n  private clickHandler: () => void;\n\n  constructor(\n      title: string, rawLocation: SDK.DebuggerModel.Location, locationPool: Bindings.LiveLocation.LiveLocationPool,\n      clickHandler: () => void) {\n    this.text = title;\n    this.level = Workspace.UISourceCode.Message.Level.Issue;\n    this.uiMessage = undefined;\n    this.clickHandler = clickHandler;\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().createLiveLocation(\n        rawLocation, this.updateLocation.bind(this), locationPool);\n  }\n\n  private async updateLocation(liveLocation: Bindings.LiveLocation.LiveLocation): Promise<void> {\n    if (this.uiMessage) {\n      this.uiMessage.remove();\n    }\n    const uiLocation = await liveLocation.uiLocation();\n    if (!uiLocation) {\n      return;\n    }\n    this.uiMessage = uiLocation.uiSourceCode.addLineMessage(\n        this.level, this.text, uiLocation.lineNumber, uiLocation.columnNumber, this.clickHandler);\n  }\n\n  dispose(): void {\n    this.uiMessage?.remove();\n  }\n\n  getText(): string {\n    return this.text;\n  }\n\n  getLevel(): string {\n    return this.level;\n  }\n}\n"]}