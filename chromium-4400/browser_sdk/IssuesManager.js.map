{"version":3,"file":"IssuesManager.js","sourceRoot":"","sources":["../../../../../front_end/browser_sdk/IssuesManager.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\nimport {SourceFrameIssuesManager} from './SourceFrameIssuesManager.js';\n\n/** @type {?IssuesManager} */\nlet issuesManagerInstance = null;\n\n/**\n * The `IssuesManager` is the central storage for issues. It collects issues from all the\n * `IssuesModel` instances in the page, and deduplicates them wrt their primary key.\n * It also takes care of clearing the issues when it sees a main-frame navigated event.\n * Any client can subscribe to the events provided, and/or query the issues via the public\n * interface.\n *\n * Additionally, the `IssuesManager` can filter Issues. All Issues are stored, but only\n * Issues that are accepted by the filter cause events to be fired or are returned by\n * `IssuesManager#issues()`.\n *\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.IssuesModel.IssuesModel>}\n */\nexport class IssuesManager extends Common.ObjectWrapper.ObjectWrapper {\n  constructor() {\n    super();\n    /** @type {!WeakMap<!SDK.IssuesModel.IssuesModel, !Common.EventTarget.EventDescriptor>} */\n    this._eventListeners = new WeakMap();\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.IssuesModel.IssuesModel, this);\n    /** @type {!Map<string, !SDK.Issue.Issue>} */\n    this._issues = new Map();\n    /** @type {!Map<string, !SDK.Issue.Issue>} */\n    this._filteredIssues = new Map();\n    this._hasSeenTopFrameNavigated = false;\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.TopFrameNavigated, this._onTopFrameNavigated, this);\n    SDK.FrameManager.FrameManager.instance().addEventListener(\n        SDK.FrameManager.Events.FrameAddedToTarget, this._onFrameAddedToTarget, this);\n\n    /** @type {?Common.EventTarget.EventDescriptor} */\n    this._showThirdPartySettingsChangeListener = null;\n\n    this._sourceFrameIssuesManager = new SourceFrameIssuesManager(this);\n  }\n\n  /**\n   * @param {{forceNew: boolean}} opts\n   * @return {!IssuesManager}\n   */\n  static instance({forceNew} = {forceNew: false}) {\n    if (!issuesManagerInstance || forceNew) {\n      issuesManagerInstance = new IssuesManager();\n    }\n\n    return issuesManagerInstance;\n  }\n\n  /**\n   * Once we have seen at least one `TopFrameNavigated` event, we can be reasonably sure\n   * that we also collected issues that were reported during the navigation to the current\n   * page. If we haven't seen a main frame navigated, we might have missed issues that arose\n   * during navigation.\n   *\n   * @return {boolean}\n   */\n  reloadForAccurateInformationRequired() {\n    return !this._hasSeenTopFrameNavigated;\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onTopFrameNavigated(event) {\n    const {frame} = /** @type {!{frame:!SDK.ResourceTreeModel.ResourceTreeFrame}} */ (event.data);\n    const keptIssues = new Map();\n    for (const [key, issue] of this._issues.entries()) {\n      if (issue.isAssociatedWithRequestId(frame.loaderId)) {\n        keptIssues.set(key, issue);\n      }\n    }\n    this._issues = keptIssues;\n    this._hasSeenTopFrameNavigated = true;\n    this._updateFilteredIssues();\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _onFrameAddedToTarget(event) {\n    const {frame} = /** @type {!{frame:!SDK.ResourceTreeModel.ResourceTreeFrame}} */ (event.data);\n    // Determining third-party status usually requires the registered domain of the top frame.\n    // When DevTools is opened after navigation has completed, issues may be received\n    // before the top frame is available. Thus, we trigger a recalcuation of third-party-ness\n    // when we attach to the top frame.\n    if (frame.isTopFrame()) {\n      this._updateFilteredIssues();\n    }\n  }\n\n  /**\n   * @override\n   * @param {!SDK.IssuesModel.IssuesModel} issuesModel\n   */\n  modelAdded(issuesModel) {\n    const listener = issuesModel.addEventListener(SDK.IssuesModel.Events.IssueAdded, this._issueAdded, this);\n    this._eventListeners.set(issuesModel, listener);\n  }\n\n  /**\n   * @override\n   * @param {!SDK.IssuesModel.IssuesModel} issuesModel\n   */\n  modelRemoved(issuesModel) {\n    const listener = this._eventListeners.get(issuesModel);\n    if (listener) {\n      Common.EventTarget.EventTarget.removeEventListeners([listener]);\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _issueAdded(event) {\n    const {issuesModel, issue} =\n        /** @type {{issuesModel: !SDK.IssuesModel.IssuesModel, issue: !SDK.Issue.Issue}} */ (event.data);\n    // Ignore issues without proper description; they are invisible to the user and only cause confusion.\n    if (!issue.getDescription()) {\n      return;\n    }\n    const primaryKey = issue.primaryKey();\n    if (this._issues.has(primaryKey)) {\n      return;\n    }\n    this._issues.set(primaryKey, issue);\n\n    if (this._issueFilter(issue)) {\n      this._filteredIssues.set(primaryKey, issue);\n      this.dispatchEventToListeners(Events.IssueAdded, {issuesModel, issue});\n    }\n    // Always fire the \"count\" event even if the issue was filtered out.\n    // The result of `hasOnlyThirdPartyIssues` could still change.\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n\n  /**\n   * @return {!Iterable<!SDK.Issue.Issue>}\n   */\n  issues() {\n    return this._filteredIssues.values();\n  }\n\n  /**\n   * @return {number}\n   */\n  numberOfIssues() {\n    return this._filteredIssues.size;\n  }\n\n  /**\n   * @return {number}\n   */\n  numberOfAllStoredIssues() {\n    return this._issues.size;\n  }\n\n  /**\n   * @param {!SDK.Issue.Issue} issue\n   * @return {boolean}\n   */\n  _issueFilter(issue) {\n    if (!this._showThirdPartySettingsChangeListener) {\n      // _issueFilter uses the 'showThirdPartyIssues' setting. Clients of IssuesManager need\n      // a full update when the setting changes to get an up-to-date issues list.\n      //\n      // The settings change listener can't be set up in IssuesManager's constructor. At that\n      // time, the settings storage is not initialized yet, so the setting can't be created.\n      const showThirdPartyIssuesSetting = SDK.Issue.getShowThirdPartyIssuesSetting();\n      this._showThirdPartySettingsChangeListener = showThirdPartyIssuesSetting.addChangeListener(() => {\n        this._updateFilteredIssues();\n      });\n    }\n\n    const showThirdPartyIssuesSetting = SDK.Issue.getShowThirdPartyIssuesSetting();\n    return showThirdPartyIssuesSetting.get() || !issue.isCausedByThirdParty();\n  }\n\n  _updateFilteredIssues() {\n    this._filteredIssues.clear();\n    for (const [key, issue] of this._issues) {\n      if (this._issueFilter(issue)) {\n        this._filteredIssues.set(key, issue);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n    this.dispatchEventToListeners(Events.IssuesCountUpdated);\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  IssuesCountUpdated: Symbol('IssuesCountUpdated'),\n  IssueAdded: Symbol('IssueAdded'),\n  FullUpdateRequired: Symbol('FullUpdateRequired'),\n};\n"]}