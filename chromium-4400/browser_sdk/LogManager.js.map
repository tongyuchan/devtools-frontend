{"version":3,"file":"LogManager.js","sourceRoot":"","sources":["../../../../../front_end/browser_sdk/LogManager.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\n\n/** @type {!WeakMap<!SDK.LogModel.LogModel, !Array<!Common.EventTarget.EventDescriptor>>} */\nconst modelToEventListeners = new WeakMap();\n\n/**\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.LogModel.LogModel>}\n */\nexport class LogManager {\n  constructor() {\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.LogModel.LogModel, this);\n  }\n\n  /**\n   * @override\n   * @param {!SDK.LogModel.LogModel} logModel\n   */\n  modelAdded(logModel) {\n    const eventListeners = [];\n    eventListeners.push(logModel.addEventListener(SDK.LogModel.Events.EntryAdded, this._logEntryAdded, this));\n    modelToEventListeners.set(logModel, eventListeners);\n  }\n\n  /**\n   * @override\n   * @param {!SDK.LogModel.LogModel} logModel\n   */\n  modelRemoved(logModel) {\n    const eventListeners = modelToEventListeners.get(logModel);\n    if (eventListeners) {\n      Common.EventTarget.EventTarget.removeEventListeners(eventListeners);\n    }\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _logEntryAdded(event) {\n    const data = /** @type {{logModel: !SDK.LogModel.LogModel, entry: !Protocol.Log.LogEntry}} */ (event.data);\n    const target = data.logModel.target();\n\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        target.model(SDK.RuntimeModel.RuntimeModel), data.entry.source, data.entry.level, data.entry.text, undefined,\n        data.entry.url, data.entry.lineNumber, undefined, [data.entry.text, ...(data.entry.args || [])],\n        data.entry.stackTrace, data.entry.timestamp, undefined, undefined, data.entry.workerId);\n\n    if (data.entry.networkRequestId) {\n      SDK.NetworkLog.NetworkLog.instance().associateConsoleMessageWithRequest(\n          consoleMessage, data.entry.networkRequestId);\n    }\n\n    if (consoleMessage.source === SDK.ConsoleModel.MessageSource.Worker) {\n      const workerId = consoleMessage.workerId || '';\n      // We have a copy of worker messages reported through the page, so that\n      // user can see messages from the worker which has been already destroyed.\n      // When opening DevTools, give us some time to connect to the worker and\n      // not report the message twice if the worker is still alive.\n      if (SDK.SDKModel.TargetManager.instance().targetById(workerId)) {\n        return;\n      }\n      setTimeout(() => {\n        if (!SDK.SDKModel.TargetManager.instance().targetById(workerId)) {\n          SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n        }\n      }, 1000);\n    } else {\n      SDK.ConsoleModel.ConsoleModel.instance().addMessage(consoleMessage);\n    }\n  }\n}\n"]}