{"version":3,"file":"ColorSwatch.js","sourceRoot":"","sources":["../../../../../front_end/inline_editor/ColorSwatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as ComponentHelpers from '../component_helpers/component_helpers.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as LitHtml from '../third_party/lit-html/lit-html.js';\n\nexport const UIStrings = {\n  /**\n  *@description Icon element title in Color Swatch of the inline editor in the Styles tab\n  */\n  shiftclickToChangeColorFormat: 'Shift-click to change color format',\n};\nconst str_ = i18n.i18n.registerUIStrings('inline_editor/ColorSwatch.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst getStyleSheets = ComponentHelpers.GetStylesheet.getStyleSheets;\n\ninterface KeyboardModifiedEvent extends Event {\n  shiftKey: boolean;\n}\n\nexport class FormatChangedEvent extends Event {\n  data: {format: string, text: string|null};\n\n  constructor(format: string, text: string|null) {\n    super('format-changed', {});\n    this.data = {format, text};\n  }\n}\n\nexport class ColorSwatch extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private tooltip: string = i18nString(UIStrings.shiftclickToChangeColorFormat);\n  private text: string|null = null;\n  private _color: Common.Color.Color|null = null;\n  private _format: string|null = null;\n\n  constructor() {\n    super();\n    this.shadow.adoptedStyleSheets = [\n      ...getStyleSheets('inline_editor/colorSwatch.css', {enableLegacyPatching: false}),\n    ];\n  }\n\n  static isColorSwatch(element: Element): element is ColorSwatch {\n    return element.localName === 'devtools-color-swatch';\n  }\n\n  get color(): Common.Color.Color|null {\n    return this._color;\n  }\n\n  get format(): string|null {\n    return this._format;\n  }\n\n  get anchorBox(): AnchorBox|null {\n    const swatch = this.shadow.querySelector('.color-swatch');\n    return swatch ? swatch.boxInWindow() : null;\n  }\n\n  /**\n   * Render this swatch given a color object or text to be parsed as a color.\n   * @param color The color object or string to use for this swatch.\n   * @param formatOrUseUserSetting Either the format to be used as a string, or true to auto-detect the user-set format.\n   * @param tooltip The tooltip to use on the swatch.\n   */\n  renderColor(color: Common.Color.Color|string, formatOrUseUserSetting?: string|boolean, tooltip?: string): void {\n    if (typeof color === 'string') {\n      this._color = Common.Color.Color.parse(color);\n      this.text = color;\n      if (!this._color) {\n        this.renderTextOnly();\n        return;\n      }\n    } else {\n      this._color = color;\n    }\n\n    if (typeof formatOrUseUserSetting === 'boolean' && formatOrUseUserSetting) {\n      this._format = Common.Settings.detectColorFormat(this._color);\n    } else if (typeof formatOrUseUserSetting === 'string') {\n      this._format = formatOrUseUserSetting;\n    } else {\n      this._format = this._color.format();\n    }\n\n    this.text = this._color.asString(this._format);\n\n    if (tooltip) {\n      this.tooltip = tooltip;\n    }\n\n    this.render();\n  }\n\n  private renderTextOnly(): void {\n    // Non-color values can be passed to the component (like 'none' from border style).\n    LitHtml.render(this.text, this.shadow, {eventContext: this});\n  }\n\n  private render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    LitHtml.render(\n      LitHtml.html`<span class=\"color-swatch\" title=\"${this.tooltip}\"><span class=\"color-swatch-inner\"\n        style=\"background-color: ${this.text};\"\n        @click=${this.onClick}\n        @mousedown=${this.consume}\n        @dblclick=${this.consume}></span></span><slot><span>${this.text}</span></slot>`,\n      this.shadow, {eventContext: this});\n    // clang-format on\n  }\n\n  private onClick(e: KeyboardModifiedEvent): void {\n    e.stopPropagation();\n\n    if (e.shiftKey) {\n      this.toggleNextFormat();\n      return;\n    }\n\n    this.dispatchEvent(new Event('swatch-click'));\n  }\n\n  private consume(e: Event): void {\n    e.stopPropagation();\n  }\n\n  private toggleNextFormat(): void {\n    if (!this._color || !this._format) {\n      return;\n    }\n\n    let currentValue;\n    do {\n      this._format = nextColorFormat(this._color, this._format);\n      currentValue = this._color.asString(this._format);\n    } while (currentValue === this.text);\n\n    if (currentValue) {\n      this.text = currentValue;\n      this.render();\n\n      this.dispatchEvent(new FormatChangedEvent(this._format, this.text));\n    }\n  }\n}\n\nif (!customElements.get('devtools-color-swatch')) {\n  customElements.define('devtools-color-swatch', ColorSwatch);\n}\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-color-swatch': ColorSwatch;\n  }\n}\n\nfunction nextColorFormat(color: Common.Color.Color, curFormat: string): string {\n  // The format loop is as follows:\n  // * original\n  // * rgb(a)\n  // * hsl(a)\n  // * nickname (if the color has a nickname)\n  // * shorthex (if has short hex)\n  // * hex\n  const cf = Common.Color.Format;\n\n  switch (curFormat) {\n    case cf.Original:\n      return !color.hasAlpha() ? cf.RGB : cf.RGBA;\n\n    case cf.RGB:\n    case cf.RGBA:\n      return !color.hasAlpha() ? cf.HSL : cf.HSLA;\n\n    case cf.HSL:\n    case cf.HSLA:\n      if (color.nickname()) {\n        return cf.Nickname;\n      }\n      return color.detectHEXFormat();\n\n    case cf.ShortHEX:\n      return cf.HEX;\n\n    case cf.ShortHEXA:\n      return cf.HEXA;\n\n    case cf.HEXA:\n    case cf.HEX:\n      return cf.Original;\n\n    case cf.Nickname:\n      return color.detectHEXFormat();\n\n    default:\n      return cf.RGBA;\n  }\n}\n"]}