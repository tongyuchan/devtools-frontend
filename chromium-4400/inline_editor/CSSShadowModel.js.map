{"version":3,"file":"CSSShadowModel.js","sourceRoot":"","sources":["../../../../../front_end/inline_editor/CSSShadowModel.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nexport class CSSShadowModel {\n  /**\n   * @param {boolean} isBoxShadow\n   */\n  constructor(isBoxShadow) {\n    this._isBoxShadow = isBoxShadow;\n    this._inset = false;\n    this._offsetX = CSSLength.zero();\n    this._offsetY = CSSLength.zero();\n    this._blurRadius = CSSLength.zero();\n    this._spreadRadius = CSSLength.zero();\n    /** @type {!Common.Color.Color} */\n    this._color = /** @type {!Common.Color.Color} */ (Common.Color.Color.parse('black'));\n    this._format = [_Part.OffsetX, _Part.OffsetY];\n    this._important = false;\n  }\n\n  /**\n   * @param {string} text\n   * @return {!Array<!CSSShadowModel>}\n   */\n  static parseTextShadow(text) {\n    return CSSShadowModel._parseShadow(text, false);\n  }\n\n  /**\n   * @param {string} text\n   * @return {!Array<!CSSShadowModel>}\n   */\n  static parseBoxShadow(text) {\n    return CSSShadowModel._parseShadow(text, true);\n  }\n\n  /**\n   * @param {string} text\n   * @param {boolean} isBoxShadow\n   * @return {!Array<!CSSShadowModel>}\n   */\n  static _parseShadow(text, isBoxShadow) {\n    const shadowTexts = [];\n    // Split by commas that aren't inside of color values to get the individual shadow values.\n    const splits = TextUtils.TextUtils.Utils.splitStringByRegexes(text, [Common.Color.Regex, /,/g]);\n    let currentIndex = 0;\n    for (let i = 0; i < splits.length; i++) {\n      if (splits[i].regexIndex === 1) {\n        const comma = splits[i];\n        shadowTexts.push(text.substring(currentIndex, comma.position));\n        currentIndex = comma.position + 1;\n      }\n    }\n    shadowTexts.push(text.substring(currentIndex, text.length));\n\n    const shadows = [];\n    for (let i = 0; i < shadowTexts.length; i++) {\n      const shadow = new CSSShadowModel(isBoxShadow);\n      shadow._format = [];\n      let nextPartAllowed = true;\n      const regexes = [/!important/gi, /inset/gi, Common.Color.Regex, CSSLength.Regex];\n      const results = TextUtils.TextUtils.Utils.splitStringByRegexes(shadowTexts[i], regexes);\n      for (let j = 0; j < results.length; j++) {\n        const result = results[j];\n        if (result.regexIndex === -1) {\n          // Don't allow anything other than inset, color, length values, and whitespace.\n          if (/\\S/.test(result.value)) {\n            return [];\n          }\n          // All parts must be separated by whitespace.\n          nextPartAllowed = true;\n        } else {\n          if (!nextPartAllowed) {\n            return [];\n          }\n          nextPartAllowed = false;\n          if (result.regexIndex === 0) {\n            shadow._important = true;\n            shadow._format.push(_Part.Important);\n          } else if (result.regexIndex === 1) {\n            shadow._inset = true;\n            shadow._format.push(_Part.Inset);\n          } else if (result.regexIndex === 2) {\n            const color = Common.Color.Color.parse(result.value);\n            if (!color) {\n              return [];\n            }\n            shadow._color = color;\n            shadow._format.push(_Part.Color);\n          } else if (result.regexIndex === 3) {\n            const length = CSSLength.parse(result.value);\n            if (!length) {\n              return [];\n            }\n            const previousPart = shadow._format.length > 0 ? shadow._format[shadow._format.length - 1] : '';\n            if (previousPart === _Part.OffsetX) {\n              shadow._offsetY = length;\n              shadow._format.push(_Part.OffsetY);\n            } else if (previousPart === _Part.OffsetY) {\n              shadow._blurRadius = length;\n              shadow._format.push(_Part.BlurRadius);\n            } else if (previousPart === _Part.BlurRadius) {\n              shadow._spreadRadius = length;\n              shadow._format.push(_Part.SpreadRadius);\n            } else {\n              shadow._offsetX = length;\n              shadow._format.push(_Part.OffsetX);\n            }\n          }\n        }\n      }\n      if (invalidCount(shadow, _Part.OffsetX, 1, 1) || invalidCount(shadow, _Part.OffsetY, 1, 1) ||\n          invalidCount(shadow, _Part.Color, 0, 1) || invalidCount(shadow, _Part.BlurRadius, 0, 1) ||\n          invalidCount(shadow, _Part.Inset, 0, isBoxShadow ? 1 : 0) ||\n          invalidCount(shadow, _Part.SpreadRadius, 0, isBoxShadow ? 1 : 0) ||\n          invalidCount(shadow, _Part.Important, 0, 1)) {\n        return [];\n      }\n      shadows.push(shadow);\n    }\n    return shadows;\n\n    /**\n     * @param {!CSSShadowModel} shadow\n     * @param {string} part\n     * @param {number} min\n     * @param {number} max\n     * @return {boolean}\n     */\n    function invalidCount(shadow, part, min, max) {\n      let count = 0;\n      for (let i = 0; i < shadow._format.length; i++) {\n        if (shadow._format[i] === part) {\n          count++;\n        }\n      }\n      return count < min || count > max;\n    }\n  }\n\n  /**\n   * @param {boolean} inset\n   */\n  setInset(inset) {\n    this._inset = inset;\n    if (this._format.indexOf(_Part.Inset) === -1) {\n      this._format.unshift(_Part.Inset);\n    }\n  }\n\n  /**\n   * @param {!CSSLength} offsetX\n   */\n  setOffsetX(offsetX) {\n    this._offsetX = offsetX;\n  }\n\n  /**\n   * @param {!CSSLength} offsetY\n   */\n  setOffsetY(offsetY) {\n    this._offsetY = offsetY;\n  }\n\n  /**\n   * @param {!CSSLength} blurRadius\n   */\n  setBlurRadius(blurRadius) {\n    this._blurRadius = blurRadius;\n    if (this._format.indexOf(_Part.BlurRadius) === -1) {\n      const yIndex = this._format.indexOf(_Part.OffsetY);\n      this._format.splice(yIndex + 1, 0, _Part.BlurRadius);\n    }\n  }\n\n  /**\n   * @param {!CSSLength} spreadRadius\n   */\n  setSpreadRadius(spreadRadius) {\n    this._spreadRadius = spreadRadius;\n    if (this._format.indexOf(_Part.SpreadRadius) === -1) {\n      this.setBlurRadius(this._blurRadius);\n      const blurIndex = this._format.indexOf(_Part.BlurRadius);\n      this._format.splice(blurIndex + 1, 0, _Part.SpreadRadius);\n    }\n  }\n\n  /**\n   * @param {!Common.Color.Color} color\n   */\n  setColor(color) {\n    this._color = color;\n    if (this._format.indexOf(_Part.Color) === -1) {\n      this._format.push(_Part.Color);\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isBoxShadow() {\n    return this._isBoxShadow;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  inset() {\n    return this._inset;\n  }\n\n  /**\n   * @return {!CSSLength}\n   */\n  offsetX() {\n    return this._offsetX;\n  }\n\n  /**\n   * @return {!CSSLength}\n   */\n  offsetY() {\n    return this._offsetY;\n  }\n\n  /**\n   * @return {!CSSLength}\n   */\n  blurRadius() {\n    return this._blurRadius;\n  }\n\n  /**\n   * @return {!CSSLength}\n   */\n  spreadRadius() {\n    return this._spreadRadius;\n  }\n\n  /**\n   * @return {!Common.Color.Color}\n   */\n  color() {\n    return this._color;\n  }\n\n  /**\n   * @return {string}\n   */\n  asCSSText() {\n    const parts = [];\n    for (let i = 0; i < this._format.length; i++) {\n      const part = this._format[i];\n      if (part === _Part.Inset && this._inset) {\n        parts.push('inset');\n      } else if (part === _Part.OffsetX) {\n        parts.push(this._offsetX.asCSSText());\n      } else if (part === _Part.OffsetY) {\n        parts.push(this._offsetY.asCSSText());\n      } else if (part === _Part.BlurRadius) {\n        parts.push(this._blurRadius.asCSSText());\n      } else if (part === _Part.SpreadRadius) {\n        parts.push(this._spreadRadius.asCSSText());\n      } else if (part === _Part.Color) {\n        parts.push(this._color.asString(this._color.format()));\n      } else if (part === _Part.Important && this._important) {\n        parts.push('!important');\n      }\n    }\n    return parts.join(' ');\n  }\n}\n\n/**\n * @enum {string}\n */\nexport const _Part = {\n  Inset: 'I',\n  OffsetX: 'X',\n  OffsetY: 'Y',\n  BlurRadius: 'B',\n  SpreadRadius: 'S',\n  Color: 'C',\n  Important: 'M'\n};\n\n\nexport class CSSLength {\n  /**\n   * @param {number} amount\n   * @param {string} unit\n   */\n  constructor(amount, unit) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  /**\n   * @param {string} text\n   * @return {?CSSLength}\n   */\n  static parse(text) {\n    const lengthRegex = new RegExp('^(?:' + CSSLength.Regex.source + ')$', 'i');\n    const match = text.match(lengthRegex);\n    if (!match) {\n      return null;\n    }\n    if (match.length > 2 && match[2]) {\n      return new CSSLength(parseFloat(match[1]), match[2]);\n    }\n    return CSSLength.zero();\n  }\n\n  /**\n   * @return {!CSSLength}\n   */\n  static zero() {\n    return new CSSLength(0, '');\n  }\n\n  /**\n   * @return {string}\n   */\n  asCSSText() {\n    return this.amount + this.unit;\n  }\n}\n\n/** @type {!RegExp} */\nCSSLength.Regex = (function() {\n  const number = '([+-]?(?:[0-9]*[.])?[0-9]+(?:[eE][+-]?[0-9]+)?)';\n  const unit = '(ch|cm|em|ex|in|mm|pc|pt|px|rem|vh|vmax|vmin|vw)';\n  const zero = '[+-]?(?:0*[.])?0+(?:[eE][+-]?[0-9]+)?';\n  return new RegExp(number + unit + '|' + zero, 'gi');\n})();\n"]}