{"version":3,"file":"CSPViolationBreakpointsSidebarPane.js","sourceRoot":"","sources":["../../../../../front_end/browser_debugger/CSPViolationBreakpointsSidebarPane.js"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,EAAC,iCAAiC,EAAC,MAAM,wCAAwC,CAAC;AAEzF,kDAAkD;AAClD,IAAI,0CAA0C,CAAC;AAE/C,MAAM,OAAO,kCAAmC,SAAQ,iCAAiC;IACvF;;OAEG;IACH;QACE,mEAAmE;QACnE,MAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjG,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxE,UAAU,CAAC,IAAI,EAAE,CAAC;QAClB,KAAK,CAAC,UAAU,EAAE,WAAW,EAAE,iCAAiC,EAAE,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACtH,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,0CAA0C,EAAE;YAC/C,0CAA0C,GAAG,IAAI,kCAAkC,EAAE,CAAC;SACvF;QACD,OAAO,0CAA0C,CAAC;IACpD,CAAC;IAED;;;;OAIG;IACH,+BAA+B,CAAC,OAAO;QACrC,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnH,MAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjG,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,cAAc,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,iBAAiB,CAAC,UAAU,EAAE,OAAO;QACnC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC/B,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,6BAA6B,EAAE,CAAC;IACrF,CAAC;CACF","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../sdk/sdk.js';\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\n/** @type {!CSPViolationBreakpointsSidebarPane} */\nlet cspViolationBreakpointsSidebarPaneInstance;\n\nexport class CSPViolationBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  /**\n   * @private\n   */\n  constructor() {\n    /** @type {!Array<!SDK.DOMDebuggerModel.CSPViolationBreakpoint>} */\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const categories = breakpoints.map(breakpoint => breakpoint.category());\n    categories.sort();\n    super(categories, breakpoints, 'sources.cspViolationBreakpoints', Protocol.Debugger.PausedEventReason.CSPViolation);\n  }\n\n  static instance() {\n    if (!cspViolationBreakpointsSidebarPaneInstance) {\n      cspViolationBreakpointsSidebarPaneInstance = new CSPViolationBreakpointsSidebarPane();\n    }\n    return cspViolationBreakpointsSidebarPaneInstance;\n  }\n\n  /**\n   * @override\n   * @param {!SDK.DebuggerModel.DebuggerPausedDetails} details\n   * @returns {?SDK.DOMDebuggerModel.CategorizedBreakpoint}\n   */\n  _getBreakpointFromPausedDetails(details) {\n    const breakpointType = details.auxData && details.auxData['violationType'] ? details.auxData['violationType'] : '';\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const breakpoint = breakpoints.find(x => x.type() === breakpointType);\n    return breakpoint ? breakpoint : null;\n  }\n\n  /**\n   * @override\n   * @param {!SDK.DOMDebuggerModel.CategorizedBreakpoint} breakpoint\n   * @param {boolean} enabled\n   */\n  _toggleBreakpoint(breakpoint, enabled) {\n    breakpoint.setEnabled(enabled);\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().updateCSPViolationBreakpoints();\n  }\n}\n"]}