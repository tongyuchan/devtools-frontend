{"version":3,"file":"ObjectEventListenersSidebarPane.js","sourceRoot":"","sources":["../../../../../front_end/browser_debugger/ObjectEventListenersSidebarPane.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';  // eslint-disable-line no-unused-vars\nimport * as EventListeners from '../event_listeners/event_listeners.js';\nimport {ls} from '../platform/platform.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\n/** @type {!ObjectEventListenersSidebarPane} */\nlet objectEventListenersSidebarPaneInstance;\n\n/**\n * @implements {UI.Toolbar.ItemsProvider}\n */\nexport class ObjectEventListenersSidebarPane extends UI.Widget.VBox {\n  /**\n   * @private\n   */\n  constructor() {\n    super();\n    this._refreshButton = new UI.Toolbar.ToolbarButton(ls`Refresh global listeners`, 'largeicon-refresh');\n    this._refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this._refreshClick, this);\n    this._refreshButton.setEnabled(false);\n\n    this._eventListenersView = new EventListeners.EventListenersView.EventListenersView(\n        this.update.bind(this), /* enableDefaultTreeFocus */ true);\n    this._eventListenersView.show(this.element);\n    this.setDefaultFocusedChild(this._eventListenersView);\n  }\n\n  static instance() {\n    if (!objectEventListenersSidebarPaneInstance) {\n      objectEventListenersSidebarPaneInstance = new ObjectEventListenersSidebarPane();\n    }\n    return objectEventListenersSidebarPaneInstance;\n  }\n\n  /**\n   * @override\n   * @return {!Array<!UI.Toolbar.ToolbarItem>}\n   */\n  toolbarItems() {\n    return [this._refreshButton];\n  }\n\n  update() {\n    if (this._lastRequestedContext) {\n      this._lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      delete this._lastRequestedContext;\n    }\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (!executionContext) {\n      this._eventListenersView.reset();\n      this._eventListenersView.addEmptyHolderIfNeeded();\n      return;\n    }\n    this._lastRequestedContext = executionContext;\n    Promise.all([this._windowObjectInContext(executionContext)])\n        .then(this._eventListenersView.addObjects.bind(this._eventListenersView));\n  }\n\n  /**\n   * @override\n   */\n  wasShown() {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this._refreshButton.setEnabled(true);\n    this.update();\n  }\n\n  /**\n   * @override\n   */\n  willHide() {\n    super.willHide();\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this._refreshButton.setEnabled(false);\n  }\n\n  /**\n   * @param {!SDK.RuntimeModel.ExecutionContext} executionContext\n   * @return {!Promise<?SDK.RemoteObject.RemoteObject>} object\n   */\n  _windowObjectInContext(executionContext) {\n    return executionContext\n        .evaluate(\n            {\n              expression: 'self',\n              objectGroup: objectGroupName,\n              includeCommandLineAPI: false,\n              silent: true,\n              returnByValue: false,\n              generatePreview: false,\n              timeout: undefined,\n              throwOnSideEffect: undefined,\n              disableBreaks: undefined,\n              replMode: undefined,\n              allowUnsafeEvalBlockedByCSP: undefined,\n            },\n            /* userGesture */ false,\n            /* awaitPromise */ false)\n        .then(result => {\n          if ('error' in result || result.exceptionDetails) {\n            return null;\n          }\n          return result.object;\n        });\n  }\n\n  /**\n   * @param {!Common.EventTarget.EventTargetEvent} event\n   */\n  _refreshClick(event) {\n    event.data.consume();\n    this.update();\n  }\n}\n\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n"]}