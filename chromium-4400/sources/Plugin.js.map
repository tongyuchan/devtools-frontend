{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["../../../../../front_end/sources/Plugin.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,MAAM,OAAO,MAAM;IACjB;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,YAAY;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ;IACR,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB;QACrB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;OAKG;IACH,gBAAgB;QACd,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,6BAA6B,CAAC,WAAW,EAAE,UAAU;QACnD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,2BAA2B,CAAC,WAAW,EAAE,UAAU,EAAE,YAAY;QAC/D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO;IACP,CAAC;CACF","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../ui/ui.js';                       // eslint-disable-line no-unused-vars\nimport * as Workspace from '../workspace/workspace.js';  // eslint-disable-line no-unused-vars\n\nexport class Plugin {\n  /**\n   * @param {!Workspace.UISourceCode.UISourceCode} uiSourceCode\n   * @return {boolean}\n   */\n  static accepts(uiSourceCode) {\n    return false;\n  }\n\n  wasShown() {\n  }\n\n  willHide() {\n  }\n\n  /**\n   * @return {!Promise<!Array<!UI.Toolbar.ToolbarItem>>}\n   */\n  async rightToolbarItems() {\n    return [];\n  }\n\n  /**\n   * @return {!Array<!UI.Toolbar.ToolbarItem>}\n   *\n   * TODO(szuend): It is OK to asyncify this function (similar to {rightToolbarItems}),\n   *               but it is currently not strictly necessary.\n   */\n  leftToolbarItems() {\n    return [];\n  }\n\n  /**\n   * @param {!UI.ContextMenu.ContextMenu} contextMenu\n   * @param {number} lineNumber\n   * @return {!Promise<void>}\n   */\n  populateLineGutterContextMenu(contextMenu, lineNumber) {\n    return Promise.resolve();\n  }\n\n  /**\n   * @param {!UI.ContextMenu.ContextMenu} contextMenu\n   * @param {number} lineNumber\n   * @param {number} columnNumber\n   * @return {!Promise<void>}\n   */\n  populateTextAreaContextMenu(contextMenu, lineNumber, columnNumber) {\n    return Promise.resolve();\n  }\n\n  dispose() {\n  }\n}\n"]}