{"version":3,"file":"SearchSourcesView.js","sourceRoot":"","sources":["../../../../../front_end/sources/SearchSourcesView.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC,CAAE,qCAAqC;AAEzE,OAAO,EAAC,kBAAkB,EAAC,MAAM,yBAAyB,CAAC;AAE3D,iCAAiC;AACjC,IAAI,yBAAyB,CAAC;AAE9B,MAAM,OAAO,iBAAkB,SAAQ,MAAM,CAAC,UAAU,CAAC,UAAU;IACjE;;OAEG;IACH;QACE,KAAK,CAAC,SAAS,CAAC,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,yBAAyB,EAAE;YAC9B,yBAAyB,GAAG,IAAI,iBAAiB,EAAE,CAAC;SACrD;QACD,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,iBAAiB;QAC9C,MAAM,IAAI;QACN,4BAA4B,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;QAC5G,oEAAoE;QACpE,8BAA8B;QAC9B,MAAM,QAAQ,GAAG,oCAAoC,CAAC;QAClD,gBAAgB,CAAC,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5F,MAAM,MAAM,GAAG,4CAA4C,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAClF,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACjD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,kBAAkB,EAAE,CAAC;IAClC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,cAAc;IACzB;;;;;OAKG;IACH,YAAY,CAAC,OAAO,EAAE,QAAQ;QAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,WAAW;QACT,MAAM,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;QAC5F,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,EAAE;YACrC,cAAc,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;SAC9D;QAED,OAAO,iBAAiB,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACtD,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Search from '../search/search.js';\nimport * as UI from '../ui/ui.js';  // eslint-disable-line no-unused-vars\n\nimport {SourcesSearchScope} from './SourcesSearchScope.js';\n\n/** @type {!SearchSourcesView} */\nlet searchSourcesViewInstance;\n\nexport class SearchSourcesView extends Search.SearchView.SearchView {\n  /**\n   * @private\n   */\n  constructor() {\n    super('sources');\n  }\n\n  static instance() {\n    if (!searchSourcesViewInstance) {\n      searchSourcesViewInstance = new SearchSourcesView();\n    }\n    return searchSourcesViewInstance;\n  }\n\n  /**\n   * @param {string} query\n   * @param {boolean=} searchImmediately\n   * @return {!Promise<!UI.Widget.Widget>}\n   */\n  static async openSearch(query, searchImmediately) {\n    const view =\n        /** @type {!UI.View.View} */ (UI.ViewManager.ViewManager.instance().view('sources.search-sources-tab'));\n    // Deliberately use target location name so that it could be changed\n    // based on the setting later.\n    const location = /** @type {!UI.View.ViewLocation} */ (\n        /** @type {*} */ (await UI.ViewManager.ViewManager.instance().resolveLocation('drawer-view')));\n    location.appendView(view);\n    await UI.ViewManager.ViewManager.instance().revealView(/** @type {!UI.View.View} */ (view));\n    const widget = /** @type {!Search.SearchView.SearchView} */ (await view.widget());\n    widget.toggle(query, Boolean(searchImmediately));\n    return widget;\n  }\n\n  /**\n   * @override\n   * @return {!Search.SearchConfig.SearchScope}\n   */\n  createScope() {\n    return new SourcesSearchScope();\n  }\n}\n\n/**\n * @implements {UI.ActionRegistration.ActionDelegate}\n */\nexport class ActionDelegate {\n  /**\n   * @override\n   * @param {!UI.Context.Context} context\n   * @param {string} actionId\n   * @return {boolean}\n   */\n  handleAction(context, actionId) {\n    this._showSearch();\n    return true;\n  }\n\n  /**\n   * @return {!Promise<!UI.Widget.Widget>}\n   */\n  _showSearch() {\n    const selection = UI.InspectorView.InspectorView.instance().element.window().getSelection();\n    let queryCandidate = '';\n    if (selection && selection.rangeCount) {\n      queryCandidate = selection.toString().replace(/\\r?\\n.*/, '');\n    }\n\n    return SearchSourcesView.openSearch(queryCandidate);\n  }\n}\n"]}