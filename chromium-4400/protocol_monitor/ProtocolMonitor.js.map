{"version":3,"file":"ProtocolMonitor.js","sourceRoot":"","sources":["../../../../../front_end/protocol_monitor/ProtocolMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no_underscored_properties */\n\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as ProtocolClient from '../protocol_client/protocol_client.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as SourceFrame from '../source_frame/source_frame.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as LitHtml from '../third_party/lit-html/lit-html.js';\nimport * as Components from '../ui/components/components.js';\nimport * as UI from '../ui/ui.js';\n\nexport const UIStrings = {\n  /**\n  *@description Text for one or a group of functions\n  */\n  method: 'Method',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  direction: 'Direction',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  request: 'Request',\n  /**\n  *@description Text for a network response\n  */\n  response: 'Response',\n  /**\n  *@description Text for timestamps of items\n  */\n  timestamp: 'Timestamp',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  target: 'Target',\n  /**\n  *@description Text to record a series of actions for analysis\n  */\n  record: 'Record',\n  /**\n  *@description Text to clear everything\n  */\n  clearAll: 'Clear all',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Text for the documentation of something\n  */\n  documentation: 'Documentation',\n  /**\n  *@description Cell text content in Protocol Monitor of the Protocol Monitor tab\n  *@example {30} PH1\n  */\n  sMs: '{PH1} ms',\n  /**\n  *@description Text in Protocol Monitor of the Protocol Monitor tab\n  */\n  noMessageSelected: 'No message selected',\n};\nconst str_ = i18n.i18n.registerUIStrings('protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst timestampRenderer = (value: Components.DataGridUtils.CellValue): LitHtml.TemplateResult => {\n  return LitHtml.html`${i18nString(UIStrings.sMs, {PH1: value})}`;\n};\n\nexport interface Message {\n  id?: number;\n  method: string;\n  error: Object;\n  result: Object;\n  params: Object;\n}\n\nlet protocolMonitorImplInstance: ProtocolMonitorImpl;\nexport class ProtocolMonitorImpl extends UI.Widget.VBox {\n  _started: boolean;\n  _startTime: number;\n  _dataGridRowForId: Map<number, Components.DataGridUtils.Row>;\n  _infoWidget: InfoWidget;\n  _dataGridIntegrator: Components.DataGridControllerIntegrator.DataGridControllerIntegrator;\n  _filterParser: TextUtils.TextUtils.FilterParser;\n  _suggestionBuilder: UI.FilterSuggestionBuilder.FilterSuggestionBuilder;\n  _textFilterUI: UI.Toolbar.ToolbarInput;\n\n  constructor() {\n    super(true);\n    this._started = false;\n    this._startTime = 0;\n    this._dataGridRowForId = new Map();\n    this.registerRequiredCSS('protocol_monitor/protocolMonitor.css', {enableLegacyPatching: true});\n    const topToolbar = new UI.Toolbar.Toolbar('protocol-monitor-toolbar', this.contentElement);\n    const recordButton = new UI.Toolbar.ToolbarToggle(\n        i18nString(UIStrings.record), 'largeicon-start-recording', 'largeicon-stop-recording');\n    recordButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      recordButton.setToggled(!recordButton.toggled());\n      this._setRecording(recordButton.toggled());\n    });\n    recordButton.setToggleWithRedColor(true);\n    topToolbar.appendToolbarItem(recordButton);\n    recordButton.setToggled(true);\n\n    const clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'largeicon-clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      this._dataGridIntegrator.update({...this._dataGridIntegrator.data(), rows: []});\n    });\n    topToolbar.appendToolbarItem(clearButton);\n\n    const split = new UI.SplitWidget.SplitWidget(true, true, 'protocol-monitor-panel-split', 250);\n    split.show(this.contentElement);\n    this._infoWidget = new InfoWidget();\n\n    const dataGridInitialData: Components.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'method',\n          title: i18nString(UIStrings.method),\n          sortable: false,\n          widthWeighting: 1,\n          visible: true,\n          hideable: false,\n        },\n        {\n          id: 'direction',\n          title: i18nString(UIStrings.direction),\n          sortable: true,\n          widthWeighting: 1,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'request',\n          title: i18nString(UIStrings.request),\n          sortable: false,\n          widthWeighting: 1,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'response',\n          title: i18nString(UIStrings.response),\n          sortable: false,\n          widthWeighting: 1,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'timestamp',\n          title: i18nString(UIStrings.timestamp),\n          sortable: true,\n          widthWeighting: 1,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'target',\n          title: i18nString(UIStrings.target),\n          sortable: true,\n          widthWeighting: 1,\n          visible: false,\n          hideable: true,\n        },\n      ],\n      rows: [],\n      contextMenus: {\n        bodyRow:\n            (menu: UI.ContextMenu.ContextMenu, columns: readonly Components.DataGridUtils.Column[],\n             row: Readonly<Components.DataGridUtils.Row>): void => {\n              const methodColumn = Components.DataGridUtils.getRowEntryForColumnId(row, 'method');\n              const directionColumn = Components.DataGridUtils.getRowEntryForColumnId(row, 'direction');\n\n              /**\n           * You can click the \"Filter\" item in the context menu to filter the\n           * protocol monitor entries to those that match the method of the\n           * current row.\n           */\n              menu.defaultSection().appendItem(i18nString(UIStrings.filter), () => {\n                const methodColumn = Components.DataGridUtils.getRowEntryForColumnId(row, 'method');\n                this._textFilterUI.setValue(`method:${methodColumn.value}`, true);\n              });\n\n              /**\n           * You can click the \"Documentation\" item in the context menu to be\n           * taken to the CDP Documentation site entry for the given method.\n           */\n              menu.defaultSection().appendItem(i18nString(UIStrings.documentation), () => {\n                if (!methodColumn.value) {\n                  return;\n                }\n                const [domain, method] = String(methodColumn.value).split('.');\n                const type = directionColumn.value === 'sent' ? 'method' : 'event';\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n                    `https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}`);\n              });\n            },\n      },\n    };\n\n    this._dataGridIntegrator =\n        new Components.DataGridControllerIntegrator.DataGridControllerIntegrator(dataGridInitialData);\n\n    this._dataGridIntegrator.dataGrid.addEventListener('cell-focused', (event: Event) => {\n      const focusedEvent = event as Components.DataGrid.BodyCellFocusedEvent;\n      const focusedRow = focusedEvent.data.row;\n      const infoWidgetData = {\n        request: Components.DataGridUtils.getRowEntryForColumnId(focusedRow, 'request'),\n        response: Components.DataGridUtils.getRowEntryForColumnId(focusedRow, 'response'),\n        direction: Components.DataGridUtils.getRowEntryForColumnId(focusedRow, 'direction'),\n      };\n      this._infoWidget.render(infoWidgetData);\n    });\n\n    this._dataGridIntegrator.dataGrid.addEventListener('new-user-filter-text', (event: Event) => {\n      const filterTextEvent = event as Components.DataGrid.NewUserFilterTextEvent;\n      this._textFilterUI.setValue(filterTextEvent.data.filterText, /* notify listeners */ true);\n    });\n    split.setMainWidget(this._dataGridIntegrator);\n    split.setSidebarWidget(this._infoWidget);\n    const keys = ['method', 'request', 'response', 'direction'];\n    this._filterParser = new TextUtils.TextUtils.FilterParser(keys);\n    this._suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(keys);\n\n    this._textFilterUI = new UI.Toolbar.ToolbarInput(\n        i18nString(UIStrings.filter), '', 1, .2, '', this._suggestionBuilder.completions.bind(this._suggestionBuilder),\n        true);\n    this._textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, event => {\n      const query = event.data as string;\n      const filters = this._filterParser.parse(query);\n      this._dataGridIntegrator.update({...this._dataGridIntegrator.data(), filters});\n    });\n    topToolbar.appendToolbarItem(this._textFilterUI);\n  }\n\n  static instance(opts = {forceNew: null}): ProtocolMonitorImpl {\n    const {forceNew} = opts;\n    if (!protocolMonitorImplInstance || forceNew) {\n      protocolMonitorImplInstance = new ProtocolMonitorImpl();\n    }\n\n    return protocolMonitorImplInstance;\n  }\n\n  wasShown(): void {\n    if (this._started) {\n      return;\n    }\n    this._started = true;\n    this._startTime = Date.now();\n    this._setRecording(true);\n  }\n\n  _setRecording(recording: boolean): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    if (recording) {\n      // TODO: TS thinks that properties are read-only because\n      // in TS test is defined as a namespace.\n      // @ts-ignore\n      test.onMessageSent = this._messageSent.bind(this);\n      // @ts-ignore\n      test.onMessageReceived = this._messageReceived.bind(this);\n    } else {\n      // @ts-ignore\n      test.onMessageSent = null;\n      // @ts-ignore\n      test.onMessageReceived = null;\n    }\n  }\n\n  _targetToString(target: SDK.SDKModel.Target|null): string {\n    if (!target) {\n      return '';\n    }\n    return target.decorateLabel(\n        `${target.name()} ${target === SDK.SDKModel.TargetManager.instance().mainTarget() ? '' : target.id()}`);\n  }\n\n  // eslint-disable\n  _messageReceived(message: Message, target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if ('id' in message && message.id) {\n      const existingRow = this._dataGridRowForId.get(message.id);\n      if (!existingRow) {\n        return;\n      }\n      const allExistingRows = this._dataGridIntegrator.data().rows;\n      const matchingExistingRowIndex = allExistingRows.findIndex(r => existingRow === r);\n      const newRowWithUpdate = {\n        ...existingRow,\n        cells: existingRow.cells.map(cell => {\n          if (cell.columnId === 'response') {\n            return {\n              ...cell,\n              value: JSON.stringify(message.result || message.error),\n\n            };\n          }\n          return cell;\n        }),\n      };\n\n      const newRowsArray = [...this._dataGridIntegrator.data().rows];\n      newRowsArray[matchingExistingRowIndex] = newRowWithUpdate;\n\n      // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n      this._dataGridRowForId.delete(message.id);\n      this._dataGridIntegrator.update({\n        ...this._dataGridIntegrator.data(),\n        rows: newRowsArray,\n      });\n      return;\n    }\n\n    const sdkTarget = target as SDK.SDKModel.Target | null;\n    const newRow: Components.DataGridUtils.Row = {\n      cells: [\n        {columnId: 'method', value: message.method},\n        {columnId: 'request', value: '', renderer: Components.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'response',\n          value: JSON.stringify(message.params),\n          renderer: Components.DataGridRenderers.codeBlockRenderer,\n        },\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this._startTime,\n          renderer: timestampRenderer,\n        },\n        {columnId: 'direction', value: 'received'},\n        {columnId: 'target', value: this._targetToString(sdkTarget)},\n      ],\n      hidden: false,\n    };\n\n    this._dataGridIntegrator.update({\n      ...this._dataGridIntegrator.data(),\n      rows: this._dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n\n  _messageSent(\n      message: {domain: string; method: string; params: Object; id: number;},\n      target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    const sdkTarget = target as SDK.SDKModel.Target | null;\n    const newRow: Components.DataGridUtils.Row = {\n      cells: [\n        {columnId: 'method', value: message.method},\n        {\n          columnId: 'request',\n          value: JSON.stringify(message.params),\n          renderer: Components.DataGridRenderers.codeBlockRenderer,\n        },\n        {columnId: 'response', value: '(pending)', renderer: Components.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this._startTime,\n          renderer: timestampRenderer,\n        },\n        {columnId: 'direction', value: 'sent'},\n        {columnId: 'target', value: this._targetToString(sdkTarget)},\n      ],\n      hidden: false,\n    };\n    this._dataGridRowForId.set(message.id, newRow);\n    this._dataGridIntegrator.update({\n      ...this._dataGridIntegrator.data(),\n      rows: this._dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n}\n\nexport class InfoWidget extends UI.Widget.VBox {\n  _tabbedPane: UI.TabbedPane.TabbedPane;\n  constructor() {\n    super();\n    this._tabbedPane = new UI.TabbedPane.TabbedPane();\n    this._tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n    this._tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n    this._tabbedPane.show(this.contentElement);\n    this._tabbedPane.selectTab('response');\n    this.render(null);\n  }\n\n  render(data: {\n    request: Components.DataGridUtils.Cell|undefined; response: Components.DataGridUtils.Cell | undefined;\n    direction: Components.DataGridUtils.Cell | undefined;\n  }|null): void {\n    if (!data || !data.request || !data.response) {\n      this._tabbedPane.changeTabView(\n          'request', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      this._tabbedPane.changeTabView(\n          'response', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      return;\n    }\n\n    const requestEnabled = data && data.direction && data.direction.value === 'sent';\n    this._tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n    if (!requestEnabled) {\n      this._tabbedPane.selectTab('response');\n    }\n\n    const requestParsed = JSON.parse(String(data.request.value) || 'null');\n    this._tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(requestParsed));\n    const responseParsed = JSON.parse(String(data.response.value) || 'null');\n    this._tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(responseParsed));\n  }\n}\n"]}